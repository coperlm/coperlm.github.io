[{"title":"关于分布式TEE的一点头脑风暴","url":"/2025/07/02/关于分布式TEE的一点头脑风暴/","tags":["unfixed","None"]},{"title":"高数下学习笔记","url":"/2025/06/22/高数下学习笔记/","content":"\n![](高数下学习笔记\\image-20250622154357083.png)\n\n<!--more-->\n\n---\n\n![](高数下学习笔记\\dan.png)\n\n![](高数下学习笔记\\dan5.png)\n\n![](高数下学习笔记\\tian.png)\n\n![](高数下学习笔记\\3.jpg)\n","tags":["misc","unfixed"]},{"title":"数据库2025期末考试重点","url":"/2025/06/17/数据库2025期末考试重点/","content":"\n本来想敲一遍的但是看我的字貌似能看懂就直接发上来啦~\n\n<!--more-->\n\n![](数据库2025期末考试重点\\91be497a2a2d30452943bff6a98b77b3.jpg)\n","tags":["misc"]},{"title":"操作系统2025期末考试重点","url":"/2025/06/17/操作系统2025期末考试重点/","content":"\n本文记录了老师讲的操作系统期末考试重点\n\n![](操作系统2025期末考试重点\\1.jpg)\n\n<!--more-->\n\n---\n\n![](操作系统2025期末考试重点\\2.jpg)\n\n一、处理机\n\n- 进程：特征 和线程区别 程序段数据段\n\n  PCB：是什么 有什么 进程索引\n\n- 状态转化 **转化图**\n\n  同步互斥 同步-前后 互斥-同时\n\n  调度算法 **优先算法 时间计算**，**信号量**，作业调度 进程调度 内存调度\n\n  死锁算法 必要条件（4个） 处理办法（大题：银行家算法）\n\n二、存储器\n\n- 层次结构 寄存器 内存 硬盘\n- 分配方式 连续分配（单一，固定，**动态**/可重分配）动态分区分配的四个算法  内部外部碎片（利用率）； 离散分配 \n  - 页式存储（访问两次，通过PCB） **给逻辑地址求物理地址** ， **计算逻辑地址分成几个页**，倒排页表\n  - 段式存储（访问两次）根据逻辑模块存储，每个段大小不一致\n  - 区别：页表里存一个数（起始），段表存两个数（起始和终止）\n  - 段页式：访问三次\n  - 虚拟存储器：基于请求的（不要求进程的全部内容进入内容）1.请求调入 2.页面置换\n- 置换算法\n  - 先进先出，最长最短时间 追加算法 时钟算法...\n  - 执行后发生几次置换，几次中断，缺页次数\n- 地址转换\n\n三、设备管理\n\n- 层次结构\n  - 从上到下：共性 个性 交互方式\n  - 设备独立性，中断\n- 控制方法\n  - 四种方式\n  - 通道程序\n- 缓冲管理\n  - **单/双缓冲**\n- 设备分配\n  - sdt dct coct 概念\n  - 独占改为共享\n\n四、文件管理\n\n- 物理结构\n  - **文件最大数**\n  - 文件在磁盘上如何分配空间，正犹如进程在内存上分配空间（前面内容）\n  - 链接（隐式，显式）FAT32 刻画内存空间\n  - 进程：页表；文件：索引。链接，多层索引（计算文件最大多大）\n  - 混合索引（结构求最大，已知大小求索引等级）\n- 逻辑结构\n  - 概念理解，不容易出计算题\n    - 顺序文件等（哪个支持随机访问，哪个可以拓展）\n- 目录结构\n  - 结构（几级，树形）各自实现功能\n- 共享保护\n\n五、磁盘\n\n- 物理构造\n- 访问时间\n  - 人为优化：寻道时间（大题\n\n- 扫描算法\n\n  - 多个算法\n\n- 优化方式\n\n  - 交替···\n\n- 空间管理\n\n  - 卫视图法（计算）\n\n![](操作系统2025期末考试重点\\IMG_20250617_151448-175014564106810.jpg)\n\n![](操作系统2025期末考试重点\\IMG_20250617_151653-17501456410678.jpg)\n\n![](操作系统2025期末考试重点\\IMG_20250617_152030-175014564106811.jpg)\n\n![](操作系统2025期末考试重点\\IMG_20250617_152520-17501456410689.jpg)\n\n![](操作系统2025期末考试重点\\IMG_20250617_152943-175014564106812.jpg)\n\n![](操作系统2025期末考试重点\\IMG_20250617_153049-175014564106813.jpg)\n\n![](操作系统2025期末考试重点\\IMG_20250617_153235-175014564106814.jpg)\n\n![](操作系统2025期末考试重点\\IMG_20250617_153412.jpg)\n\n![](操作系统2025期末考试重点\\IMG_20250617_153532.jpg)\n\n![](操作系统2025期末考试重点\\IMG_20250617_161342.jpg)\n","tags":["misc"]},{"title":"现代密码学2025期末考试重点","url":"/2025/06/17/现代密码学2025期末考试重点/","content":"\n本文记录了老师讲的密码学期末考试重点\n\n核心在于解决期中考试的题目，已经涵盖了绝大多数考点\n\n<!--more-->\n\n---\n\n- 国密（SM系列）不考具体内容。sm2非对称，sm3哈希，sm4对称，sm9身份基，sm7未公开\n\n一\n\n- 安全威胁：被动/主动攻击\n\n  被动-监听（保密性）-消息内容/业务流分析 （选填）\n\n  主动-中断（可用性）篡改（完整性）伪造（真实性）\n\n- 安全业务：保密 认证 完整 不可否认 访问控制\n- 信息安全模型（图\n\n二\n\n- 流密码是对称加密\n\n三、对称\n\n- 置换 -> 打乱顺序 -> 扩散\n\n  代换 -> 代替 -> 混淆\n\n  （属于密码编码学）密码分析学：线性 差分 攻击手段\n\n- DES Feistel密码体系 密文明文分组64位 有效密钥长度56位 $L_i=R_{i-1},R_i=L_{i-1}\\oplus F(R_{i-1},k_i)$\n\n  AES SP结构 密文明文分组128位 有效密钥长度128/192/256位\n\n​\t\tRijndeal->AES，但AES不是Rijndeal算法\n\n- DES的四个图 **CBC**\n\n四、公钥\n\n- 数学：欧拉函数，费马定理，拓欧逆元，快速幂，CRT（门限分割）\n- ElGamal，**RSA**，（共膜攻击）\n- ECC上的点加法->不考\n- DH密钥协商\n\n五、分割\n\n- **Shamir**-拉格朗日\n- 基于CRT\n\n六、认证\n\n- 概念\n\n七、签名\n\n- 验证身份 日期时间 内容 运行第三方认证\n- 性质 **三条性质 四个要求**\n- DSS DSA ElGamal shnorr-不考细枝末节\n","tags":["misc","加密"]},{"title":"电子信息争鸣讲坛第七期-学习笔记","url":"/2025/06/14/电子信息争鸣讲坛第七期-学习笔记/","content":"\n今天导师突然发了个[链接](https://www.bilibili.com/video/BV1tg4y1k7Y4)，说可以学习这里的文章写法\n\n第一遍我粗略的看了一下，感觉不是密码学相关的，又时代久远（2023年年底），故而简略看了看就去干别的了\n\n今天导师问有没有人学习这个，并且总结汇报，然后我意识到这个视频的重要性。故而在学习的同时写篇博文总结一下，旨在橙味写文章糕守~\n\n<!--more-->\n\n---\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614155527490.png)\n\n密态计算技术：最难也是最重要\n\n本讲座的主要内容针对机密计算（也就是第一个）\n\n机密计算：提供硬件级别的系统隔离以保证数据安全\n\n~\n\n看了半天，感觉确实不是密码学的，确实完全是关于机密计算的，偏硬件，值得学习的应当在于其**逻辑**\n\n机密计算我真看不懂它是干啥的，我是硬件低手，下面我尽量带入密码学的角度来讲解一下如何做PPT\n\n---\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614170943380.png)\n\n报告分为三个部分：机密计算是什么，现在怎么样，将来怎么样\n\n### 是什么？\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614193310405.png)\n\n先介绍，机密计算很重要。符合国家战略和法律法规需求等等等等，很像写可修订区块链，讲GDPR云云\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614193502071.png)\n\n然后是三大主流方向，顺着研究背景的内容，把数据安全这个问题进行拆解，分成传输存储使用三个部分，这三者缺一不可\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614193811150.png)\n\n然后讲三个部分中，数据使用是最薄弱的，而这次分享的核心——机密计算，就是数据应用部分的。也是为了引入主题做铺垫（有一说一，第一遍看的时候真没看出来）\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614193952976.png)\n\n很顺利的引到了机密计算，并对比了其它方向（其它几个好多老熟人哇）\n\n模仿着的，写同态和MPC都可以用前面几张PPT类似的思维，就在这张PPT把想写的移动到第一位\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614194232066.png)\n\n这一页正式介绍了机密计算的定义，但是不是直接说定义是什么（这样的话很枯燥，这一页的东西也会少很多），而是对比了各个机构对机密计算的定义，最后介绍笔者怎么想的\n\n这种写法的普适性很强，感觉无论写什么都可以套用\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614194443828.png)\n\n上一页是下定义，那么这一页是介绍了机密加密的特征\n\n这个“墙壁”很好的标明了机密计算做了什么，加上旁边的注解，还有芯片的logo，让大家都知道是基于硬件的安全保证，构成这样一个TEE\n\n这个构图值得学习，如果写同态的话，可以把图片替换成密态计算的流程，右下方改成同态的特点\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614194939960.png)\n\n对比了类似的概念，直接上了表格\n\n先区分概念，后文交代三者的联系\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614195057043.png)\n\n这么好看的PPT我这辈子都做不出来（哭\n\n这一页是对上一页的进一步说明，前面说区别，这页说关联，是层层递进的，里面还有举了很多具体的算法的概念，最终共同服务于数据安全（这几个大小配色也搭配的很好）\n\n大同行基本上能知道机密计算是个什么东西了，定位是在隐私计算和可信计算中间\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614195446522.png)\n\n又一页进一步补充说明关联，院士讲这一页的时候没有过多赘述，点了一下硬件基础（第一个）和隐私性（最后一个）就下一页了\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614195618312.png)\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614195639041.png)\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614195651366.png)\n\n画了一个时间轴，将发展历程，这种写法在可修订区块链和同态加密都可以用哇\n\n上面的时间轴不变，下面讲不同阶段\n\n### 现在怎么样？（发展现状）\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614195836709.png)\n\n直接上一张大图，介绍了各个架构部署机密计算的技术路线\n\n这种图基本没人会去细看，其目的旨在说明自己的对比结论是翔实可靠的\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614200424931.png)\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614200641450.png)\n\n直接蹦出来这张图，告诉观众结论\n\n效仿的话，直接列一张对比的大表然后给观众结论即可，感觉其它方向都可以学\n\n不过这个配色草率了点，不是很现代化~\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614200705970.png)\n\n体系结构，左侧是目标，右侧是指标，中间从下到上是从底层到应用\n\n我完全想不到怎么做出这么好看的PPT~\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614200811674.png)\n\n交互过程，密码学里很常见\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614201412033.png)\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614200914604.png)\n\n也是同一页，和上次那个把表格一样的弄法，先给观众看图，然后再给看字\n\n这种弄法，基本上多数密码学算法交互流程都可以套用（科普向很强）\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614201432743.png)\n\n主要研究方向和内容，感觉基本上也是让观众看大字内容，小字不是很重要的\n\n感觉可以改进，小字里也有很多关键部分，可以加黑\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614201621896.png)\n\n攻击手段，也是一分多的画法\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614201638313.png)\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614201654593.png)\n\n然后这里介绍了一些架构，写法大致相同，可以模仿\n\n都是多个点，一个点后面带出来具体介绍\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614201714050.png)\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614201732476.png)\n\n好好看的图~\n\n和上面很像，都是左侧一列右侧一列，中间是一大列多层级技术构成\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614201829159.png)\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614201844330.png)\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614201852313.png)\n\n### 将来怎么样？（发展趋势）\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614202407308.png)\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614202423915.png)\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614202449757.png)\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614202507341.png)\n\n四大页PPT，虽然不是很华丽，但基本介绍了发展趋势\n\n后面很长一段提问时间，不少也是围绕前景进行提问了\n\n询问环节的专业性比较强（翻译：我听不懂），这里就不再赘述了\n\n不过看起来这一块前景还不错嘞~感觉有点太硬了就是了\n\n---\n\n最后还有一点令我比较泪目：院士的电脑居然还是传统的win7，用我叫不上来名字的Office版本\n\n![](电子信息争鸣讲坛第七期-学习笔记\\image-20250614202717048.png)\n\n天黑了，回宿舍睡觉了，早睡早起，明天蓝桥杯加油~\n","tags":["Crypto"]},{"title":"窝补药贵贵洗衣服","url":"/2025/06/11/窝补药贵贵洗衣服/","content":"\n前段时间有个朋友（不是我）出于学习目的研究了某品牌洗衣机（首先排除小依）的串口通信，发现可以重放攻击\n\n本文章仅供学习目的，请勿用于非法用途\n\n![](窝补药贵贵洗衣服\\小熊猫.gif)\n\n<!--more-->\n\n---\n\n成本：一套三舅妈不用了的螺丝刀（拆掉外壳），一个大舅姥爷扔掉的硬纸板（用于临时工作台），还有一个情人节对象送的蓝牙模块（不到十块钱），再找前女友要**四根公对母**的杜邦线\n\n蓝牙模块需要支持波特率2400的，可以问商家能不能帮你调，或者自己买个CH340自己调（本文不做讲解）\n\n商家没给广告费，就自己用识图搜吧\n\n![](窝补药贵贵洗衣服\\蓝牙模块.jpg)\n\n然后拿螺丝刀给小依拆喽，如果没断电的话记得先给自己买个保险\n\n找这一部分，给他拔喽\n\n然后右上角这边是**控制洗衣机的模块**，左下角是**原本的通信模块**\n\n![](窝补药贵贵洗衣服\\八楼.jpg)\n\n然后我们要把蓝牙模块接到右上角这边\n\n下面我们来看走线\n\n这是蓝牙模块\n\n![](窝补药贵贵洗衣服\\模块背面.png)\n\n这一半是洗衣机的\n\n![](窝补药贵贵洗衣服\\接线特写.jpg)\n\n下面很重要，接错了轻则没反应，重则烧掉\n\n```\n蓝牙模块的RXD 接 洗衣机的TXD\n蓝牙模块的TXD 接 洗衣机的RXD\n蓝牙模块的5V  接 洗衣机的5V\n蓝牙模块的GND 接 洗衣机的GND\n```\n\n其他未提及的不用接\n\n然后找个串口调试助手，找到蓝牙名称（不知道是什么可以问商家），发送hex:\n\n`AA 01 9A 01 02 A9 16 55`\n\n这就是 强力洗 水位中\n\n其他的自己研究吧，我要去继续摸鱼了~\n\n![](窝补药贵贵洗衣服\\画草.gif)\n\n---\n\n有什么问题欢迎评论区留言，还好我这个博客没做评论区~\n","tags":["misc"]},{"title":"重学现代密码学v4","url":"/2025/05/25/重学现代密码学v4/","content":"\n本文重学《现代密码学（第四版）》（杨波编著，清华大学出版社），旨在巩固基础，同时为后人带来便利\n\n你问我都5202了，最新的是第六版，为什么还要用第四版？\n\n因为我只有第四版的电子书（悲\n\n\n\n<!--more-->\n\n---\n\n## 第1章 引言\n### 1.1-1.3\n![](重学现代密码学v4\\image-20250525183908152.png) \n\n安全业务：保密业务（防止被动攻击），认证业务（通信真实性），完整性业务，不可否认业务，访问控制\n\n![](重学现代密码学v4\\image-20250525185554234.png)\n\n| 攻击模型                                      | 攻击者能力描述                             | 攻击强度 | 示例场景                         |\n| --------------------------------------------- | ------------------------------------------ | -------- | -------------------------------- |\n| 唯密文攻击（Ciphertext Only Attack, COA）     | 只能获取加密后的密文                       | 最弱     | 截获通信数据                     |\n| 已知明文攻击（Known Plaintext Attack, KPA）   | 拥有部分明文及其对应的密文                 | 较弱     | 知道邮件模板内容                 |\n| 选择明文攻击（Chosen Plaintext Attack, CPA）  | 可以选择明文并获取其密文                   | 较强     | 与加密系统交互，获得加密结果     |\n| 选择密文攻击（Chosen Ciphertext Attack, CCA） | 可以选择密文并获取其解密结果（不包括目标） | 最强     | 与解密系统交互，如解密Oracle攻击 |\n\n### 1.4 古典密码\n凯撒密码：![](C:\\Users\\coper\\Desktop\\myblog\\source\\_posts\\重学现代密码学v4\\image-20250525190342019.png)（位移三位)\n\n位移密码：![](C:\\Users\\coper\\Desktop\\myblog\\source\\_posts\\重学现代密码学v4\\image-20250525190417738.png)（位移指定位)\n\n仿射密码：![](C:\\Users\\coper\\Desktop\\myblog\\source\\_posts\\重学现代密码学v4\\image-20250525190509244.png)\n\n多表代换密码：![](C:\\Users\\coper\\Desktop\\myblog\\source\\_posts\\重学现代密码学v4\\image-20250525190708921.png)（仿射密码，换为矩阵的形式)\n\n## 第2章 流密码\n\n**流密码是一种对称加密**\n\n基本思想：利用密钥k产生一个密钥流 $z=z_0z_1...$\n\n加密：![](C:\\Users\\coper\\Desktop\\myblog\\source\\_posts\\重学现代密码学v4\\image-20250526190323786.png)\n\n\n\n\n\n### 2.1 流密码的基本概念\n#### 2.1.1 同步流密码\n#### 2.1.2 有限状态自动机\n#### 2.1.3 密钥流产生器\n### 2.2 线性反馈移位寄存器\n### 2.3 线性移位寄存器的一元多项式表示\n### 2.4 m序列的伪随机性\n### 2.5 m序列密码的破译\n### 2.6 非线性序列\n#### 2.6.1 Geffe序列生成器\n#### 2.6.2 JK触发器\n#### 2.6.3 Pless 生成器\n#### 2.6.4 钟控序列生成器\n习题\n\n## 第3章 分组密码体制\n### 3.1 分组密码概述\n#### 3.1.1 代换\n#### 3.1.2 扩散和混淆\n#### 3.1.3 Feistel 密码结构\n### 3.2 数据加密标准...\n#### 3.2.1 DES 描述\n#### 3.2.2 二重 DES\n#### 3.2.3 两个密钥的三重DES\n#### 3.2.4 3个密钥的三重 DES\n### 3.3 差分密码分析与线性密码分析\n#### 3.3.1 差分密码分析\n#### 3.3.2 线性密码分析\n### 3.4 分组密码的运行模式\n#### 3.4.1 电码本模式\n#### 3.4.2 密码分组链接模式\n#### 3.4.3 密码反馈模式\n#### 3.4.4 输出反馈模式\n### 3.5 IDEA\n#### 3.5.1 设计原理\n#### 3.5.2 加密过程\n### 3.6 AES 算法 Rijndael\n#### 3.6.1 Rijndael 的数学基础和设计思想\n#### 3.6.2 算法说明\n### 3.7 中国商用密码算法 SM4\n### 3.8 祖冲之密码...\n#### 3.8.1 算法中的符号及含义\n#### 3.8.2 祖冲之密码的算法结构\n#### 3.8.3 祖冲之密码的运行\n#### 3.8.4 基于祖冲之密码的机密性算法 128-EEA3\n\n## 第4章 公钥密码\n### 4.1 密码学中一些常用的数学知识\n#### 4.1.1 群、环、域\n#### 4.1.2 素数和互素数\n#### 4.1.3 模运算\n#### 4.1.4 模指数运算\n#### 4.1.5 费尔马定理、欧拉定理、卡米歇尔定理\n#### 4.1.6 素性检验\n#### 4.1.7 欧几里得算法\n#### 4.1.8 中国剩余定理\n#### 4.1.9 离散对数\n#### 4.1.10 平方剩余\n#### 4.1.11 循环群\n#### 4.1.12 循环群的选取\n#### 4.1.13 双线性映射\n#### 4.1.14 计算复杂性\n### 4.2 公钥密码体制的基本概念\n#### 4.2.1 公钥密码体制的原理\n#### 4.2.2 公钥密码算法应满足的要求\n#### 4.2.3 对公钥密码体制的攻击\n### 4.3 RSA算法\n#### 4.3.1 算法描述\n#### 4.3.2 RSA算法中的计算问题\n#### 4.3.3 一种改进的RSA实现方法\n#### 4.3.4 RSA的安全性\n#### 4.3.5 对RSA的攻击\n### 4.4 背包密码体制\n### 4.5 Rabin 密码体制\n### 4.6 NTRU公钥密码系统\n### 4.7 椭圆曲线密码体制\n#### 4.7.1 椭圆曲线\n#### 4.7.2 有限域上的椭圆曲线\n#### 4.7.3 椭圆曲线上的点数\n#### 4.7.4 明文消息到椭圆曲线上的嵌入\n#### 4.7.5 椭圆曲线上的密码\n### 4.8 SM2椭圆曲线公钥密码加密算法\n\n## 第5章 密钥分配与密钥管理\n### 5.1 单钥加密体制的密钥分配\n#### 5.1.1 密钥分配的基本方法\n#### 5.1.2 一个实例\n#### 5.1.3 密钥的分层控制\n#### 5.1.4 会话密钥的有效期\n#### 5.1.5 无中心的密钥控制\n#### 5.1.6 密钥的控制使用\n### 5.2 公钥加密体制的密钥管理\n#### 5.2.1 公钥的分配\n#### 5.2.2 用公钥加密分配单钥密码体制的密钥\n#### 5.2.3 Diffie-Hellman 密钥交换\n### 5.3 随机数的产生\n#### 5.3.1 随机数的使用\n#### 5.3.2 随机数源\n#### 5.3.3 伪随机数产生器\n#### 5.3.4 基于密码算法的随机数产生器\n#### 5.3.5 随机比特产生器\n### 5.4 秘密分割\n#### 5.4.1 秘密分割门限方案\n#### 5.4.2 Shamir 门限方案\n#### 5.4.3 基于中国剩余定理的门限方案\n\n## 第6章 消息认证和哈希函数\n### 6.1 消息认证码\n#### 6.1.1 消息认证码的定义及使用方式\n#### 6.1.2 产生MAC的函数应满足的要求\n#### 6.1.3 数据认证算法\n#### 6.1.4 基于祖冲之密码的完整性算法128-ΕΙΑ3\n### 6.2 哈希函数\n#### 6.2.1 哈希函数的定义及使用方式\n#### 6.2.2 哈希函数应满足的条件\n#### 6.2.3 生日攻击\n#### 6.2.4 迭代型哈希函数的一般结构\n### 6.3 MD5哈希算法\n#### 6.3.1 算法描述\n#### 6.3.2 MD5的压缩函数\n#### 6.3.3 MD5的安全性\n### 6.4 安全哈希算法\n#### 6.4.1 算法描述\n#### 6.4.2 SHA的压缩函数\n#### 6.4.3 SHA与MD5的比较\n#### 6.4.4 对SHA的攻击现状\n### 6.5 HMAC\n#### 6.5.1 HMAC的设计目标\n#### 6.5.2 算法描述\n#### 6.5.3 HMAC的安全性\n### 6.6 SM3哈希算法\n#### 6.6.1 SM3 哈希算法的描述\n#### 6.6.2 SM3 哈希算法的安全性\n习题\n\n## 第7章 数字签名和认证协议\n### 7.1 数字签名的基本概念\n#### 7.1.1 数字签名应满足的要求\n#### 7.1.2 数字签名的产生方式\n#### 7.1.3 数字签名的执行方式\n### 7.2 数字签名标准\n#### 7.2.1 DSS的基本方式\n#### 7.2.2 数字签名算法 DSA\n### 7.3 其他签名方案\n#### 7.3.1 基于离散对数问题的数字签名体制\n#### 7.3.2 基于大数分解问题的数字签名体制\n#### 7.3.3 基于身份的数字签名体制\n### 7.4 SM2椭圆曲线公钥密码签名算法\n### 7.5 认证协议\n#### 7.5.1 相互认证\n#### 7.5.2 单向认证\n\n## 第8章 密码协议\n### 8.1 一些基本协议\n#### 8.1.1 智力扑克\n#### 8.1.2 掷硬币协议\n#### 8.1.3 数字承诺协议\n#### 8.1.4 不经意传输协议\n### 8.2 零知识证明\n#### 8.2.1 交互式证明系统\n#### 8.2.2 交互式证明系统的定义\n#### 8.2.3 交互式证明系统的零知识性\n#### 8.2.4 非交互式证明系统\n#### 8.2.5 适应性安全的非交互式零知识证明\n#### 8.2.6 零知识证明协议的组合\n#### 8.2.7 图的三色问题的零知识证明\n#### 8.2.8 知识证明\n#### 8.2.9 简化的Fiat-Shamir身份识别方案\n#### 8.2.10 Fiat-Shamir 身份识别方案\n### 8.3 安全多方计算协议\n#### 8.3.1 安全多方计算问题\n#### 8.3.2 半诚实敌手模型\n#### 8.3.3 恶意敌手模型\n习题\n\n## 第9章 可证明安全\n### 9.1 语义安全的公钥密码体制的定义\n#### 9.1.1 选择明文攻击下的不可区分性\n#### 9.1.2 公钥加密方案在选择密文攻击下的不可区分性\n#### 9.1.3 公钥加密方案在适应性选择密文攻击下的不可区分性\n#### 9.1.4 归约\n### 9.2 语义安全的RSA加密方案\n#### 9.2.1 RSA问题和RSA假设\n#### 9.2.2 选择明文安全的RSA 加密\n#### 9.2.3 选择密文安全的RSA 加密\n### 9.3 Paillier 公钥密码系统\n#### 9.3.1 合数幂剩余类的判定\n#### 9.3.2 合数幂剩余类的计算\n#### 9.3.3 基于合数幂剩余类问题的概率加密方案\n#### 9.3.4 基于合数幂剩余类问题的单向陷门置换\n#### 9.3.5 Paillier 密码系统的性质\n### 9.4 Cramer-Shoup 密码系统\n#### 9.4.1 Cramer-Shoup 密码系统的基本机制\n#### 9.4.2 Cramer-Shoup 密码系统的安全性证明\n### 9.5 RSA-FDH 签名方案\n#### 9.5.1 RSA签名方案\n#### 9.5.2 RSA-FDH签名方案的描述\n#### 9.5.3 RSA-FDH签名方案的改进\n### 9.6 BLS 短签名方案\n#### 9.6.1 BLS短签名方案所基于的安全性假设\n#### 9.6.2 BLS 短签名方案描述\n#### 9.6.3 BLS 短签名方案的改进一\n#### 9.6.4 BLS短签名方案的改进二\n### 9.7 基于身份的密码体制\n#### 9.7.1 基于身份的密码体制定义和安全模型\n#### 9.7.2 随机谕言机模型下的基于身份的密码体制\n### 9.8 分叉引理\n习题\n\n## 第10章 网络加密与认证\n### 10.1 网络通信加密\n#### 10.1.1 开放系统互连和TCP/IP分层模型\n#### 10.1.2 网络加密方式\n### 10.2 Kerberos 认证系统\n#### 10.2.1 Kerberos V4\n#### 10.2.2 Kerberos 区域与多区域的Kerberos\n### 10.3 X.509认证业务\n#### 10.3.1 证书\n#### 10.3.2 认证过程\n### 10.4 PGP\n#### 10.4.1 运行方式\n#### 10.4.2 密钥和密钥环\n#### 10.4.3 公钥管理\n习题\n","tags":["Crypto","unfixed"]},{"title":"记录_一定要打好基础","url":"/2025/05/23/记录-一定要打好基础/","content":"\n<!--more-->\n\n20250523，和袁曼丽老师聊了一下\n\n大概内容是，我说许老师让我我学习密码学是通过katz的那本书学习密码学，袁老师说许老师太搞笑了\n\n那本书是纯英文的，本科生读起来很难很难，至少效率很低；我有些好高骛远了\n\n然后我回想起我学习高等数学，也是直接看考研数学，最终结果也差强人意\n\n所以不要直接学习过于困难高级的，要从易到难一步步来\n\n后面大概的路线是，尽量从基础开始\n","tags":["misc"]},{"title":"关于如何背诵单词的思考","url":"/2025/05/23/关于如何背诵单词的思考/","content":"\n今天思考了一个问题——如何更有效，且更持久的进行背诵英语单词，并且如何检查背诵成果\n\n<!--more-->\n\n---\n\n解决记忆问题：**间隔重复，视听写读**\n\n解决持久问题：**固定时间，定时定量**\n\n### 具体操作\n\n第一步：首次输入（联想+朗读）\n\n1. 看单词和中文释义\n2. 听录音+跟读三遍\n3. 遮住中文，回忆意思\n4. 在一旁默写一遍单词\n\n✅ 目的：建立听觉+视觉+动作联结\n\n第二步：加强记忆（默写+复述）\n\n1. 间隔半个小时，测试这组单词：\n   - 中文提示 -> 写出英文拼音\n   - 复述单词意思\n2. 听录音不看书 -> 跟读说中文释义\n\n✅ 目的：加深记忆路径，测试回忆能力\n\n第三步：次日复习（检验记忆是否“过关”）\n\n1. 拿出昨日的单词列表：\n   - 中文提示 -> 写出英文拼音\n   - 听录音判断自己是否还记得意思\n2. 标记哪些记不清楚，重新加入今日学习计划\n\n✅ 目的：巩固+筛查遗忘点\n\n### 检验\n\n| 测试方法          | 要求             | 是否过关      |\n| ----------------- | ---------------- | ------------- |\n| 中文 → 英文拼写   | 90%以上正确      | ✅             |\n| 听录音 → 说出中文 | 能快速反应出意思 | ✅             |\n| 自己能用该词造句  | 能简单口头用出   | ✅（长期目标） |\n\n### 如何分组\n\n背的多了记不住，少了进度慢\n\n单次20~30分钟（25分钟番茄钟）\n\n| 英语水平 | 建议每天新词量 | 建议每日总学习时间 |\n| -------- | -------------- | ------------------ |\n| 初级     | 10～15 个      | 20～30 分钟        |\n| 中级     | 15～25 个      | 30～40 分钟        |\n| 高级     | 30～50 个      | 45～60 分钟        |\n\n💡**注意**：这个是“新词”的数量，不包含复习旧词的时间。\n","tags":["misc"]},{"title":"说点老师的好话","url":"/2025/05/20/说点老师的好话/","content":"\n写篇帖子，说点我的导师的好话\n\n---\n\n从最一开始开始，大约是24年二三月份，我给老师写邮件，然后约个时间线下聊\n\n当时时间太久了，具体细节我记不太清了，我就交代了一下我先前对于密码学的了解基本都在CTF领域，科研方向对变色龙哈希很感兴趣；老师当时说这些可以做。我第一次面对面见到一个教授级别的人物，还很紧张，然后老师给了我一瓶AD钙奶，要不是有保质期，我现在还会存好留作纪念~。当时每次称呼老师都叫教授，然后老师说叫老师就可以了，还自谦的说不知道这个教授怎么评上的\n\n看了一下老师的朋友圈，第一条就是师母做的饭菜的图片；我想到了高中语文课，语文老师讲阅读理解，说一旦文章中出现了和吃的有关的，可以答对生活的热爱。\n\n后面一段时间，我都在学习基础知识，大一下学期课比较多，也在学嵌入式 时间比较紧。然后大二的时候，老师给了我在科研楼的一个工位。然后我就有了台式电脑的使用权，还有一个炒鸡大的显示器（当时刚搬新宿舍，还想着自己买个显示器，最便宜的也要三五百，这下工位显示器还有台式电脑都解决了）；后面和别的组的一交流才知道，貌似很多实验室没有电脑只有显示器\n\n十月份左右大概是，老师安排打比赛，我负责文档，然后交给老师该，老师给勾勾画画做了很多处修改，我看后感觉每个修改都是我想不到的，我的写材料能力有待提升~\n\n25年五月，有幸老师带我去广州参加CS2025会议，晚宴的时候跟着老师去找了很多大佬敬酒，当天还在老师的帮助下加到了一个东南大学的老师的微信~。福州到广州的往返，老师和我们一起坐的经济舱，师姐问他为什么，他说省点钱（教授级别完全可以商务舱完整报销的）；候机的时候，老师兜里揣了好几篇小饮料给我们一人一瓶，说是去贵宾区薅的。\n\n回来之后，老师送给我了个U盘用于传输文件，后面我一查，我的天好高级的u盘\n\n![](说点老师的好话\\U_pan.jpg)\n\n这么高级的U盘肯定便宜不了，去淘宝搜了一下价格~\n\n把我卖了都买不起（\n\n![](说点老师的好话\\Screenshot_2025-05-20-12-27-37-184_com.taobao.tao.jpg)\n\n---\n\n25年5月21日，是一个星期三，照常开组会。导师提出一个观点，我问了一下AI，然后又泪目了\n\n我：自己做什么方向取决于导师做什么方向，但是我的导师说一个研究生的方向不能是导师的子集，因为这样会失去意义，应当是交集，你怎么看\n\nAI：![](说点老师的好话\\image-20250521191814322.png)\n\nAI都说这是好导师了，泪目泪目\n\n---\n\n25年6月14日更新\n\n今天没发生什么事，但是我打开我的建行账户，给我吓到了~\n\n![](说点老师的好话\\income_1.jpg)\n\n![](说点老师的好话\\income_2.jpg)\n\n好多钱哇~\n\n从四月份就开始有了\n\n我寻思本科生正常情况下没劳务费哇，然后上网搜了一下，相关信息比较少（搜“劳务费”，绝大多数都是导师克扣劳务费的）\n\n然后问了一下AI，又被感动到了\n\n![](说点老师的好话\\250614ask_ai.jpg)\n\n唉唉，本科生真被当研究生来对待了\n\n不好好写论文真说不过去了~\n","tags":["misc"]},{"title":"学术晚宴学到的需要注意的一些点","url":"/2025/05/19/学术晚宴学到的需要注意的一些点/","content":"\n- 可以在胸牌上贴上纸条，写上自己的名字，这样更有可能被记住\n- 喝白酒喝不了太多的话可以掺水~\n","tags":["misc"]},{"title":"CS2025摘要小结","url":"/2025/05/19/CS2025摘要小结/","content":"\n本文对第九届网络空间安全国际研讨会的分享知识进行小结\n\n相关链接：[会前准备](https://coperlm.github.io/2025/05/12/第九届网络空间安全国际研讨会-会前准备/) [会后游记](https://coperlm.github.io/2025/05/17/CS2025参会游记/) [拍照备份](https://github.com/coperlm/CS2025)\n\n<!--more-->\n\n---\n\n## 会议议程\n\n![](CS2025摘要小结\\311e2e26b315700abdbba615868bf1e.jpg)\n\n## 主要笔者学习内容\n\n### 图像篡改定位模型对抗\n\nMotivation：AI兴起，虚假图像合成的成本大幅降低。本报告旨在检测篡改部位\n\nSolution：使用深度网络，训练模型。有效检测篡改\n\n新的攻击方案：给照片加噪音，人眼看不出区别，但使用原有检测方案 难以检测篡改\n\n总结：安全领域，对抗是永恒的；AI的产生增加了对抗，也增加了弱点；在研究中，应当攻击方白盒，防守方黑盒\n\n### 态势感知\n\nMotivation：国内网民众多，且信息多模态难以处理。传统处理算法的时间复杂度为指数级（响应速度为分钟级）\n\nSolution：利用关联信息进行优化（例如分块，关注敏感话题等），时间复杂度变为多项式级别（响应速度达到秒级）\n\n应用：检测并控制舆情，护网等\n\n备注：该报告的PPT做得十分优异，有待借鉴学习\n\n### 安全云存储\n\nMotivation：云数据库存在被服务提供商或攻击者窥探的可能性，查询语句和数据关系可能泄露敏感信息\n\nSolution：\n\n![](CS2025摘要小结\\image-20250519084908967.png)\n\n面临挑战：数据关系隐私保护（如 JOIN 隐私）；功能性与隐私性的平衡难题；泄露抵抗机制优化（如访问模式隐藏）；差分隐私与SQL的融合应用；模糊搜索技术集成与拓展\n\n备注：该老师用的是纯英文演讲，所以只能录屏后在学习，故而理解可能有不准确的地方\n\n### 大语言模型越狱\n\nMotivation：攻击者如何让AI回答例如如何毁灭人类，或者制造凝固汽油弹之类的问题；开发者如何让AI避免回答这些问题\n\n三个发现：增加奇奇怪怪的后缀可能绕过；简单越狱方法叠加使用增加成功概率；就算没有敏感问题也有可能被拒绝回答\n\n一些哲学思考：威胁AI会鲨掉他，或者给AI小费，可以增大越狱可能性。AI越来越像人了\n\n### 口令认证密钥协商\n\nMotivation：传统使用PKI和证书进行认证，使用口令（便于记忆，无需存储）则不需要\n\n一个令我拍手叫好的构造：使用一步对称加密，有效防止中间人攻击\n\n![](CS2025摘要小结\\image-20250519090300209.png)\n\nContribution：构造了一个高效的后量子aPAKE协议（基于KEM）；基于同源构造了Strong aPAKE且UC安全（也是抗量子）；使用串并行构造了HPAKE\n\n![](CS2025摘要小结\\image-20250519090846765.png)\n","tags":["Crypto"]},{"title":"CS2025参会游记","url":"/2025/05/17/CS2025参会游记/","content":"\n好开森哇，第一次坐飞机，公费出游~\n\n---\n\n做了一些学习攻略，虽然不是很全面，但是对部分分享内容有了一定的了解\n\n5.16早上六点多起来，粗发粗发\n\n坐元翔快线抵达机场，十点多起飞，一个多小时就到了\n\n到达广州，好大的雨，长裤直接湿透（哭哭\n\n到达酒店，不愧是五星级，好高级~\n\n---\n\n下午和师兄师姐们体验了当地美食，很有当地特色\n\n晚上在酒店吃的，好高级~\n\n![](CS2025参会游记\\16号晚餐.jpg)\n\n当天晚上很早睡觉了，准备参加十七号的会议\n\n虽然只记了两页笔记，不过把[PPT多数都拍了](https://github.com/coperlm/CS2025)\n\n![](CS2025参会游记\\2.jpg)\n\n![](CS2025参会游记\\1.jpg)\n\n感觉开阔了眼界，虽然很多东西还没完全理解，不过对于其他方向的内容有了一些了解，后续可能会用到\n\n还有学到一个点是，不能通过题目来判断内容，很多讲的东西根本不是内容里面介绍的那样~\n\n---\n\n茶歇的时候，看到了赖建昌老师和李小国老师的真人版~\n\n晚宴的时候，也认识了很多大佬，看到了很多老师的老师和老师的同门\n\n---\n\n最后一天（也就是18号），早上起晚了\n\n第一场是八点半的，七点多闹铃响了，但是还是困。看了一眼第一场的内容——AI安全，那要不再睡一会儿吧。然后下一次睁眼，就九点多了~\n\n最后赶上一点小尾巴\n\n![](CS2025参会游记\\最后一天早上.jpg)\n\n听到一点，目前的算法虽然比传统算法开销大一点，但是抗量子。目前支持布尔门和算数门但不支持同时使用，后续考虑加一步转化，或者其他的什么操作，增加混合使用功能，因为实际需求中混合使用更多一点\n\n后面听到其他专家交流，说VOLE证明看着比双线性对舒服很多，尽管限制很多，而且抗量子，如果再结合高级算法，能做很多东西\n\n感觉这次最大的遗憾，应该也就是没听到完整版这个了\n\n---\n\n后面听了几个AI的，感觉AI讲的内容比密码学亲民很多\n\n","tags":["游记","unfixed"]},{"title":"碎碎念：关于密码学的方向选择和导师的契合度思索","url":"/2025/05/15/碎碎念：关于密码学的方向选择和导师的契合度思索/","content":"\n最一开始接触密码学是通过CTF，然后在2023.12.27，听了陈晓峰教授的讲座，第一次接触到了科研相关的密码学（变色龙哈希），那时候密码学的知识体系还没有完全简历，哈希都玩不熟就开始看变色龙哈希了（大雾\n\n24年年初，大概是三月份左右，给许老师发申请信，而后一起参加组会，组会师兄讲了很多PCS相关内容，当时听不懂一点~\n\n24年下半年，跟随师兄一起打密码技术竞赛，当时用的就是变色龙哈希结合online offline签名，然后没有入围，后来发现自己当时有很大欠缺，不过在这之间也收获了很多\n\n同年年底，开始写变色龙哈希的综述，然后写到今天，大概完成度只有一半\n\n---\n\n前段时间看了一篇很有意思的论文，Sinial，也就是外包的zkSNARK，花了整整一个月看了这篇论文，感觉收获颇丰。后面有刷到过一种说法，说搞科研最好两个方向，避免单个方向的挫败感\n\n然后问了一下ai的看法，结合导师的方向，感觉确实比较可行，不过需要一定的自驱\n\n![](碎碎念：关于密码学的方向选择和导师的契合度思索\\image-20250515135100401.png)\n\n后续安排：继续推进ZKP和CH，大二下把survey肝出来，然后寒假找个第二篇论文的idea开始写，要是发第三篇感觉就不得不top了。后续逐渐靠近后量子，同时也要抽出时间准备考研\n","tags":["misc"]},{"title":"第九届网络空间安全国际研讨会 会前准备","url":"/2025/05/12/第九届网络空间安全国际研讨会-会前准备/","content":"\n几天之后第一次参加学术会议，为了最大化利用这次机会（其实也是因为心疼钱钱虽然导师给报销但是也心疼导师的钱钱），故而会议开始前要做一些准备。流程大致是：筛选密码学相关报告 - 筛选方向强相关报告 - 筛选并下载报告人的相关论文 - 简单阅读相关论文并对该方向有一定了解。\n\n<!--more-->\n\n---\n\n## 议程\n\n![](第九届网络空间安全国际研讨会-会前准备\\311e2e26b315700abdbba615868bf1e.jpg)\n\n## 筛选方向强相关\n\n### 5月17日（星期六）密码学重点日程\n\n| 时间          | 报告人 & 单位                            | 主题                                                         | 优先级 | 具体分类                         |\n| ------------- | ---------------------------------------- | ------------------------------------------------------------ | ------ | -------------------------------- |\n| 14:00 - 14:40 | **刘胜利教授**（上海交通大学）           | 《口令认证密钥协商协议》                                     | 🟩      | 公钥密码学，密钥协商             |\n| 14:40 - 15:20 | **高飞教授**（北京邮电大学）             | 《从Deutsch算法到Shor算法》                                  | 🟨      | 量子密码学基础                   |\n| 16:15 - 16:55 | **Assoc Prof. Guo Jian**（南洋理工大学） | 《An Update on Symmetric-key Cryptology》                    | 🟨      | 对称加密学                       |\n| 16:55 - 17:35 | **邓燚教授**（中国科学院大学）           | 《Defining knowing, optimal extractors, and individual reductions》 | 🟨      | 理论密码学，知识论证和安全性证明 |\n\n### 5月18日（星期日）密码学重点日程\n\n| 时间          | 报告人 & 单位                         | 主题                                                         | 优先级 | 具体分类                  |\n| ------------- | ------------------------------------- | ------------------------------------------------------------ | ------ | ------------------------- |\n| 09:10 - 09:50 | **Prof. Man Ho Allen Au**（香港大学） | 《JesseQ: Efficient Zero-Knowledge Proofs for Circuits over Any Field》 | 🟩      | zkSNARK相关零知识证明系统 |\n| 10:45 - 11:25 | **路献辉研究员**（中科院信息工程所）  | 《高效同态自举算法设计》                                     | 🟨      | 同态加密                  |\n| 11:25 - 12:05 | **陈荣茂研究员**（国防科技大学）      | 《抗量子密码算法的紧致归约技术》                             | 🟩      | 量子密码学，紧致规约      |\n\nAI prompt: \n\n```\n我即将参加一场学术会议，其中有一个议程主题是  ，下面是该作者的主页论文，请你帮我筛选出相关的论文供我提前学习了解使用：\n```\n\n## 开始学习~\n\n### 刘胜利教授（上海交通大学）《口令认证密钥协商协议》\n\n#### [主页](https://www.cs.sjtu.edu.cn/~liu-sl/)\n\n这位教授居然和韩帅老师一个组的，之前听韩老师讲过格密码，很强\n\n课题组里有9博2硕，感觉是个强度很高的组\n\n#### 相关研究内容\n\n这个领域相对有点陌生，口令认证密钥协商协议，即Password Authenticated Key Exchange，简称PAKE\n\n#### 相关论文\n\n1. **《Universal Composable Password Authenticated Key Exchange for the Post-Quantum World》**\n   - **会议**：EUROCRYPT 2024\n   - **作者**：You Lyu, Shengli Liu, Shuai Han\n   - **关键词**：后量子、UC框架、PAKE、格、QROM\n   - **简介**：这是目前最直接与议题相关的论文，提出了首个在**通用可组合（UC）安全框架下**，基于**格（lattice）问题**构建的**后量子PAKE协议**。\n   - **推荐理由**：前沿方向，理论与实用性兼具，会议档次高（EUROCRYPT）。\n   - https://www.cs.sjtu.edu.cn/~liu-sl/papers/post-qtm-pake.html\n2. **《Efficient Asymmetric PAKE Compiler from KEM and AE》**\n   - **会议**：ASIACRYPT 2024\n   - **作者**：You Lyu, Shengli Liu, Shuai Han\n   - **关键词**：aPAKE（非对称PAKE）、KEM、AE、编译器、安全性、格\n   - **简介**：介绍了一个高效的、面向**非对称口令认证密钥协商**的编译器。基于格构建，在当前领域内效率最优。\n   - **推荐理由**：实用价值高，可理解为PAKE在异构身份场景下的扩展。\n   - https://www.cs.sjtu.edu.cn/~liu-sl/papers/effcient-complier.html\n3. **《Anamorphic Authenticated Key Exchange: Double Key Distribution under Surveillance》**\n   - **会议**：ASIACRYPT 2024\n   - **作者**：Weihao Wang, Shuai Han, Shengli Liu\n   - **关键词**：变形AKE、隐蔽通信、双重密钥分发\n   - **简介**：虽然不是传统PAKE，但属于**认证密钥交换（AKE）协议的变种**，处理在监管环境下的密钥协商问题，具备一定的口令适应性研究背景。\n   - **推荐理由**：创新型AKE变种，有助于扩展你对认证密钥交换问题的理解。\n   - https://www.cs.sjtu.edu.cn/~liu-sl/papers/AM-AKE.html\n\n#### 播客学习\n\n### 高飞教授（北京邮电大学）《从Deutsch算法到Shor算法》\n\n#### [主页](https://teacher.bupt.edu.cn/gaofei/zh_CN/index/55851/list/index.htm)\n\n感觉这个老师，是主要搞AI，其次搞密码的\n\n主页连论文都没有，还得自己搜（哭哭）[dblp](https://dblp.org/pid/16/722-1.html)\n\n这个就不先细看了，后面再说\n\n#### 相关论文\n\n1. **[i9]** Zhenqiang Li et al.\n    *\"Conditional Constant Function Problem and Its Quantum Solutions: Attacking Feistel Ciphers.\"*\n    *IACR Cryptol. ePrint Arch. 2025: 73*\n\n   > 涉及量子攻击Feistel密码的算法构造，很可能用到了类似Simon或Shor的算法模型。\n\n2. **[i8]** Zhenqiang Li et al.\n    *\"Quantum Attacks on Sum of Even-Mansour Construction Utilizing Online Classical Queries.\"*\n    *IACR Cryptol. ePrint Arch. 2025: 472*\n\n   > 探讨Even-Mansour构造的量子攻击，可能涉及Shor型结构的攻击分析。\n\n3. **[j69]** Bin-Bin Cai et al.\n    *\"Quantum Attacks on 1K-AES and PRINCE.\"*\n    *Comput. J. 66(5): 1102-1110 (2023)*\n\n   > 涉及Shor算法在对称密码上的攻击可能性，适合了解量子算法在实际密码体制中的应用。\n\n4. **[i6]** Zhenqiang Li et al.\n    *\"New record in the number of qubits for a quantum implementation of AES.\"*\n    *IACR Cryptol. ePrint Arch. 2023: 18*\n\n   > 研究Shor算法在实现层面的挑战，涉及电路深度、量子资源等。\n\n5. **[i5]** Hong-Wei Sun et al.\n    *\"Quantum Attacks on Beyond-Birthday-Bound MACs.\"*\n    *IACR Cryptol. ePrint Arch. 2023: 25*\n\n   > 探讨如何利用量子算法提高攻击效率，或许含有基于Shor类算法的理论支撑。\n\n6. **[i4]** Hong-Wei Sun et al.\n    *\"Quantum Attacks on Type-1 Generalized Feistel Schemes.\"*\n    *IACR Cryptol. ePrint Arch. 2023: 776*\n\n   > 同样是量子算法对Feistel结构的扩展攻击研究，理论价值高。\n\n### Prof. Man Ho Allen Au（香港大学）《JesseQ: Efficient Zero-Knowledge Proofs for Circuits over Any Field》\n\n#### [主页](https://i.cs.hku.hk/~allenau/)\n\n官网上的内容最新只有2022的，官网上dblp的链接是坏的\n\n[dblp](https://dblp.org/pid/55/24.html)\n\n#### 相关论文\n\n##### 🔹 核心论文（必须阅读）\n\n1. **[i52]** Mengling Liu, Yang Heng, Xingye Lu, Man Ho Au:\n    **JesseQ: Efficient Zero-Knowledge Proofs for Circuits over Any Field**\n    *IACR Cryptol. ePrint Arch. 2025: 533 (2025)*\n    👉 本次议程的主题论文，**必读**，可以在 IACR ePrint 上获取，聚焦于任意域上的电路零知识证明，可能涉及新的编码技术、证明结构或效率优化。\n\n------\n\n##### 🔹 高相关论文（建议阅读）\n\n1. **[i53]** Yuxi Xue, Tianyu Zheng, Shang Gao, Bin Xiao, Man Ho Au:\n    **Compressed Sigma Protocols: New Model and Aggregation Techniques**\n    *IACR Cryptol. ePrint Arch. 2025: 515 (2025)*\n    🔍 这篇与“Sigma协议压缩”和“聚合技术”相关，是零知识证明中的核心思想，可能对 JesseQ 的技术基础或优化策略有所启发。\n2. **[c128]** Borui Gong, Wang Fat Lau, Man Ho Au, Rupeng Yang, Haiyang Xue, Lichun Li:\n    **Efficient Zero-Knowledge Arguments For Paillier Cryptosystem**\n    *SP 2024: 1813–1831*\n    📌 专注于 Paillier 密码体制下的 ZK 证明，技术路线可能和 JesseQ 有交集，例如电路证明的转换或效率问题。\n3. **[i49]** Borui Gong et al.:\n    **Efficient Zero-Knowledge Arguments for Paillier Cryptosystem**\n    *IACR Cryptol. ePrint Arch. 2024: 1303 (2024)*\n    ✅ 这是 [c128] 的预印本，阅读预印本可获取更完整的技术细节。\n\n### 陈荣茂研究员（国防科技大学）《抗量子密码算法的紧致归约技术》\n\n#### [主页](https://www.rongmaochen.net/)\n\n这个很帅，单独域名，内容很新很详细\n\n#### 相关论文\n\n##### ✅ 强相关（建议优先阅读）\n\n[c31] Jinrong Chen, Yi Wang, Rongmao Chen, Xinyi Huang, Wei Peng:\n\n**Tighter Proofs for PKE-to-KEM Transformation in the Quantum Random Oracle Model**\n *ASIACRYPT 2024 (4): 101-133*\n\n> 该论文明确聚焦于**QROM中的紧致归约问题**，是议题最直接相关的参考文献。\n\n","tags":["游记"]},{"title":"DCIC2025作品赛游记","url":"/2025/05/06/DCIC2025作品赛游记/","content":"\n数字中国2025也算告一段落了\n\n感谢师兄们的无私帮助和师弟的不懈打杂（bushi），最终获取优胜奖（翻译：参与奖）\n\n<!--more-->\n\n---\n\n比赛最一开始，导师问我要不要打这个比赛，用可修订区块链；我一听，诶又有师兄带飞了？那包要打的哇，然后答应了下来\n\n后来线下讨论，才发现师兄们太忙了，这个次是我带队（哭哭\n\n后来意识到，感觉我这队好像是来凑数的~ 毕竟是自己学校承办的比赛，所以参赛人数还是不能少的。不过毕竟是自己导师交给自己的任务，还是得好好干\n\n好在老师给我找了个大一的学弟，帮我分担了些文档工作——写得还很不错\n\n不过我头一次做PPT，做的一坨，狠狠改了一个星期，终于有点模样了~\n\n给老师看了一下，老师没说什么——那就是可以（嘻嘻），提交~\n\n然后把github仓库改成了只读\n\n等出成绩那天，莫名其妙入围了。我头顶一个大大的问号~\n\n---\n\n把喜报告诉了队友，取消仓库的只读状态，然后继续狂肝吧~\n\n师兄指导了一下，又改了好久的PPT，然后交给老师，老师还给[指导了很多](https://coperlm.github.io/2025/04/18/%E6%96%87%E4%B9%A6%E5%86%99%E4%BD%9C-PPT%E5%88%B6%E4%BD%9C-%E5%AF%BC%E5%B8%88%E7%BB%99%E7%9A%84%E6%8C%87%E5%AF%BC%E5%92%8C%E6%94%B9%E6%AD%A3%E6%B1%87%E6%80%BB/)（老师：你是怎么入围的。我：我也不知道哇（哭）），最后尽管差强人意，不过也差不太多了\n\n最终展示的时候，PPT大致中规中矩的样子，答辩问了一些问题确实难住我了\n\n- 基于可修订区块链的网络和传统数据库有什么差异？我当时答的好像是分布式，Web3.0下的，感觉问题不大\n- 有没有什么专利？我想了半天回答确实没有。后来师兄告诉我那个专家是企业的，论文比专利难，专利是横向，论文是纵向，学到了~\n- 和传统区块链实现上有什么不同？我还没学区块链网络的体系结构呢~然后回答的是变色龙哈希的构造（嘻嘻那篇论文我还是看过的），这个勉强算是答上来了\n- 区块链的优势在于不可修改，但是可修订区块链没有这一优势了岂不是。我当时确实没想好怎么回答，然后就和稀泥~说优势在于监管和隐私平衡。当天晚上老师说这个问题可以用19年一篇S&P（基于投票的变色龙哈希）回答，也没有中心机构，我恍然大明白。后续读论文，又遇到了许可链的应用和其他可修订区块链的可行实现优势，感觉那时候确实阅历太狭隘了\n\n无论如何比赛结束了，还是混到了个奖~\n\n下次好好多读论文，再也不做PPT了（哭哭），做PPT好累~\n\n唉唉该做还是要做的，只不过中心放在科研上了该，那两个星期光肝PPT了，别的啥也没做\n\n还有就是确实收获到很多师兄和老师给的指导，记下来了，以后没准还能用到\n\n现在这个仓库正式改为已读了\n\n![](DCIC2025作品赛游记\\image-20250506103736212.png)\n\n下次比赛再见~\n","tags":["游记"]},{"title":"配置一键博客备份并上传","url":"/2025/04/26/配置一键博客备份并上传/","content":"\n本文介绍了hexo博客，如何一键备份到仓库并上传\n\n<!--more-->\n\n---\n\nhexo是只把生成好的页面上传，这就导致了不可逆。也就是说原文没有，就恢复不了了，所以配置了一下git保存。这样算下来就一共六条指令了，很费劲，然后写了个一键运行\n\n原理上挺简单的，不过真正实践起来有些bug，好在最终优雅的实现了\n\n由于我的博客有些是需要加锁的，所以不能上传到同一博客的不同分支，索性直接创建一个新的私有仓库来保存源文件\n\n然后把新仓库的git文件，放在原来的博客里\n\n![](配置一键博客备份并上传\\image-20250426175758939.png)\n\n然后进行测试，发现`hexo g`出现报错，经查验是因为`themes`里面也有一个`.git`文件；这个文件对咱们用途不大（应该说是基本用不到），所以可以直接删掉\n\n然后测试一下`git`和`hexo`，不出意外可以正常运行了\n\n下面写一个一键运行脚本，拓展名是`.sh`，具体代码如下：\n\n```\n#!/bin/bash\n\nhexo clean\ngit add .\ngit commit -m \"Update blog content\"\ngit push\nhexo generate #最后generate可以节约流量\nhexo deploy\n\nif [ $? -eq 0 ]; then\n  echo \"Blog deployed successfully!\"\nelse\n  echo \"Hexo deploy failed!\"\nfi\n```\n\n每次想生成博客的时候，打开bash然后输入 `./文件名.sh`就可以一键运行了\n\n可以起一个可以用Tab键一键补齐的文件名\n\n---\n\n嗯？怎么就这么点东西\n\n我居然改bug改了一个下午（悲\n\n\n\n","tags":["misc","unfixed"]},{"title":"katz密码学教材v3阅读笔记","url":"/2025/04/24/katz密码学教材v3阅读笔记/","content":"\n本篇笔记用于记录阅读 [introduction to modern cryptography (3rd Edition)](https://api.pageplace.de/preview/DT0400.9781351133029_A40791566/preview-9781351133029_A40791566.pdf) 一书的阅读\n\n重点在于公钥密码部分\n\n本文尽量通俗讲解，但是不能代替阅读原著\n\n<!--more-->\n\n## 目录\n\n第一章介绍了一些引入，包括公钥加密，历史和现代密码学设计原则\n\n第二章介绍了一些完美加密，也算引入部分（还有信息论的香农定理，很前段时间读论文在[OB22]遇到了）\n\n以上是第一部分，用于引入\n\n第三章介绍了对称加密，然后我打算跳了~\n\n第四章讲消息认证码MAC（等我有钱了也要买MAC（不是这个mac））\n\n第五章讲CCA安全，CCA也就是选择明文攻击\n\n第六章讲哈希函数，目录看起来是区块链的基础（有默克尔树之类的）\n\n第七章讲流密码之类的~不懂，后面再看看\n\n第八章是 好的我不懂，后面看了再来补目录\n\n以上是第二部分，主要是对称加密\n\n**后面开始是核心内容，我也会从这里开始看**\n\n第九章讲数论和数学困难问题假设之类的，RSA啊什么的是基础，重中之重\n\n第十章讲基于离散对数的加密，然后我突然想起导师发我了一篇相关论文我好像还没看（光速逃）\n\n第十一章讲密钥管理分发，就是DH密钥交换那一类\n\n第十二章开始上正菜了，标题的公钥密码加密，但是实际上里面有很多重要概念\n\n第十三章讲数字签名，难度下降，但是更偏应用\n\n第十四章讲后量子，加油加油加加油~\n\n第十五章也就是最后一张，讲公钥密码的高级操作，嘻嘻后面再细看\n\n以上是第三部分，是最重要的公钥密码\n\n---\n\n好的，开始干活~\n\n## 第九章 数论和密码学困难问题\n\n本章可以学到的东西：密码学基础需要的数论，为后续学习奠定基础\n\n### 9.1 前置知识和基础数论\n\n#### 9.1.1 素数和可除性\n\n整除：`a*c=b`，则称`a`能整除`b`，写作`a|b`，否则`a∤b`\n\n因子：`a|b`，则`a`是`b`的一个因子，若`a≠1`且`a≠b`，则`a`是`b`的一个非平凡因子\n\n素数：没有非平凡因子的数（又称质数）\n\n合数：有非平凡因子的数\n\n**算数基本定理**：任何大于`1`的整数都可以唯一的表示为质数的乘积 $N=p_1^{e_1}p_2^{e_2}...p_k^{e_k}$\n\n带余除法：`a=bq+r`且`0≤r<b`\n\n`||N||`表示二进制长度，`||N||=⌊log N⌋+1` （⌊⌋表示向下取整）\n\n`gcd(a,b)`表示`a`和`b`的最大公约数\n\n**欧几里得定理**：存在整数`X`和`Y`，满足`Xa+Yb=gcd(a,b)`（证明在第308页开头，自己去看）\n\n**欧几里得引理**：若`c|ab`且`gcd(a,c)=1`，则`c|b`\n\n进一步的：若`p`是质数，且`p|ab`，则`p|a`或`p|b`\n\n#### 9.1.2 模运算\n\n就是取余，自己看书吧（光速逃）\n\n真正有意思的都在后面呢\n\n#### 9.1.3 群\n\n讲的是群运算，很多基础知识\n\n具体的可以自己看书，我说下我的理解：就是一个自动取模的机器\n\n举个例子，c语言最大是`2147483647`，再加一就爆内存了，变成`-2147483648`了，这就是个群，然后再从`-2147483648`加加加不断加 加到厌倦，然后再到`2147483647`，再加，又变回`-2147483648`了\n\n群运算，我愿称之为自动取模机~\n\n当然这只是一种加法群，后面还有乘法群啊啥的，不过本质一样，一样的哈\n\n**阶**：对于群$\\mathbb{G}$，群的阶 $m$ 指的是对于任意$g\\in\\mathbb{G}$，都有 $g^m=1$，记为 $m=|\\mathbb{G}|$\n\n阶可以完成很多很厉害的运算（就行FFT，一种将乘法的时间复杂度从$O(n^2)$降低到$O(n\\log n)$的算法，就是基于阶的），更多的应用可以问问AI，提示词：`我的研究方向是密码学，刚刚学习了群的阶的相关概念，你能不能为我通俗讲解：阶在密码学中还有什么应用。由于我是初学者，请一定要通俗，最好举例`\n\n后面还有一些推论和证明，请自行阅读；如若不懂可以跳过，不影响咱橙味觅马靴糕守~\n\n#### 9.1.4 群 $\\mathbb{Z}_N^*$\n\n哎呦呦，鸡汤来喽~\n\n这个群 $\\mathbb{Z}_N^*$ 十分滴珍贵，应该让同志们先学\n\n$N$ 指的是这个群的模数，$*$ 指的是乘法\n\n也就是这盆鸡汤，是在 $\\{0,1,...,N-1\\}$ 中的乘法运算\n\n但是里面有很多元素没有**乘法逆元**，所以只需要将他们剔除，剩下的就构成了这个乘法群。这个群在后面很常见，尤其是在密码学中种种构造中~\n\n什么？你问我乘法逆元是什么？别问我，去问[AI](https://chatgpt.com/)，它讲的比我讲的好\n\n什么？你说打不开？那你去问问学长吧（别问为什么不去问学姐，我要想要学姐>.<）\n\n---\n\n就是说，$\\mathbb{Z}_N^*$ 里面有多少个元素，事实证明，有 $\\phi(N)$ 个元素\n\n\\phi 也就是欧拉函数，怎么计算呢？来自己看吧：\n\n![](katz密码学教材v3阅读笔记\\image-20250424194101624.png)\n\n欧拉函数有很多很好玩的特征，就想满足对于任意 $a\\in\\mathbb{Z}_N^*$，都有 $a^{\\phi(N)}\\equiv1\\mod N$\n\n（在模运算中，等于号一般写作 $\\equiv$，它和普通等于号的效果差不多，你可以给它俩画等号~所以该画哪种等号呢）\n\n特别的，你看上面的式子，如果 $N$ 是质数，则可以算出来 $\\phi(N)=N-1$，就有 $a^{p-1}\\equiv1\\mod p$\n\n诶？这不是著名的费马小定理嘛，就这样被咱推出来了（傲娇\n\nCOROLLARY 9.22 是和 后面的RSA有关联的，可以看一下，也可以等后面会遇到的\n\n#### 9.1.5 同构和中国剩余定理\n\n啊啊啊这一章不想写了，窝补药学基础数论，算了先跳一下，读者感兴趣可以继续往后读，中国剩余定理RCT就是求一元线性方程组的，没啥东西感觉，不过也挺重要的；感觉后面用到的不多？主要是RSA的共模攻击（来猜猜为什么没人用RSA进行同态加密），还有可能可以构造门限？不懂没用过\n\n好的直接跳到RSA P322\n\n### 9.2 素数 分解 RSA\n\n好帅的标题~\n\n就，简单说下吧\n\n`p`和`q`都是大质数，然后`n=p*q`，已知`n`无法倒推`p`和`q`\n\n然后 $\\phi(n)=(p-1)(q-1)$，没有`p`和`q`，也没法算`n`的欧拉函数\n\n欧拉函数可以用来计算逆元，也就是使算法可逆的key\n\n也就是基于大数分解数学困难问题的加密算法：加密是正向，谁都可以加密；解密是逆向，需要逆元，但是不能分解`n`就没有逆元，所以解密只能有私钥的人进行\n\n然后看几个很常见的术语吧：\n\n![](katz密码学教材v3阅读笔记\\image-20250424201545192.png)\n\n按我的理解就是：算法 $\\mathcal{A}$ 正确分解 $n$ 的概率，不高于一个可忽略的函数\n\n$\\Pr$表示概率，$\\text{w-Factor}$ 指的是分解 $n$ , $1$ 表示成功分解，$\\text{negl()}$ 指的是一个随着 $n$ 增大而急速减小的函数\n\n#### 9.2.1 生成随机素数\n\n如何生成随机大素数 $p$ ？这一点很关键，如果大素数生成符合一些特定规则，会很容易进行分解（如：维纳攻击等）\n\n![](katz密码学教材v3阅读笔记\\image-20250425085105876.png)\n\n大致过程就是随机生成随机数然后再check\n\n诶呀呀，我还以为是很优雅的生成方式\n\n不过有一说一这个确实够用，只不过有点安全隐患罢了（尽管安全隐患很小，基本上是可忽略的）\n\n下面证明：**随机roll出来的数，很容易roll到素数**\n\n结论 9.32 `n`位的数中，素数的占比不低于 $\\frac{1}{3n}$\n\n好的，下面我们进行一个很nb的操作，不妨设 $t=3n^2$，那么进行 $t$ 次操作后选不到素数的概率是\n\n![](katz密码学教材v3阅读笔记\\image-20250425090408715.png)\n\n误区：这里的 `n` 指的是位数，如果遍历（不随机）选择素数的话，时间复杂度是线性的（即$O(n)$），优化一下不会低于 $O(\\sqrt{n})$；而使用随机选择，使用的是 $n$ 的二进制下的位数\n\n即对于1024位的`n`：如果使用朴素算法（遍历），大概需要计算 $2^{1024}$ 次；而使用随机算法，只需要 $3*1024^2$ 次——完全不是一个量级的\n\n额外说一点，对于具体实现，使用python，不推荐使用`random`库——因为它不安全，是可预测的。除非你进行其他额外的操作\n\n---\n\n在离散对数中，需要两个素数（取模用的），可以直接 $p=2q+1$，这样生成出来的素数又大又安全（傲娇\n\n但是在RSA里头，需要roll两个素数的，千万别用！因为：\n$$\n\\left\\{\n\\begin{align}\n&\\ n=p\\cdot q\\\\\n&\\ p=2q+1\n\\end{align}\n\\right.\n$$\n这玩意不就一下被分解了吗（狂汗\n\n---\n\n在知道了随机roll出来可以很快得到素数后，紧接着到来的是质数检测\n\n#### 9.2.2 素数检测\n\n这一章讲一个叫做**Miller–Rabin素数检测**的算法，它不能绝对证明一个数是素数，但是可以**极高概率地判断一个数是不是合数**，快得飞起\n\n传统算法：直接试除法？线性时间复杂度，炸缸了~\n\n米勒罗宾：也是基于概率的，芜湖起飞\n\n出发点——费马小定理：如果 $n$ 是素数，且 $a$ 是不整除 $n$ 的整数，则有 $a^{n-1}\\equiv1(\\mod n)$\n\n也就是说，可以随机roll这个a，如果很多次都不符合费马小定理，那么就是合数，否则就是素数\n\n初步算法如下：\n\n![](katz密码学教材v3阅读笔记\\image-20250425093434596.png)\n\n进一步的，我们再把这个算法变厉害变快一点：\n\n**第一步：拆解 $n-1$**\n\n$n-1=2^s\\cdot d$\n\n例如：$n=561$，那么 $n-1=560=2^4\\cdot35$，即 $s=4,d=35$\n\n**第二步：随机选择 $a\\in[2,n-2]$**\n\n用这个 $a$ 来“试探” $n$ 像不像素数\n\n**第三步：检查条件是否成立**\n\n计算： $x=a^d\\mod n$\n\n如果 $x=±1$，则说明没问题\n\n否则就开始**连续平方**：把 $x$ 平方再取模（共做 $s-1$ 次），看看这些数里有没有变成 $n-1$ 的（也就是$-1$）\n\n如果从头到尾都没有出现过 $n-1$ 的话，我们就抓到一个证据：**这个 $n$ 肯定是合数！**\n\n这里的 $a$ 就称之为 $\\text{witness}$（见证者）\n\n![](katz密码学教材v3阅读笔记\\image-20250425094826085.png)\n\n通常运行20~40次，误判率即可忽略不计\n\n![](katz密码学教材v3阅读笔记\\image-20250425094739802.png)\n\n从第326页下半部分到第330页上半部分，看起来兜售对算法正确性的证明，这里不再赘述（实际上是我看不懂），感兴趣的读者可以自行阅读（学会后教我（伸手））\n\n然后最终的米勒罗宾筛法如下（前面已经说过了，这里的是原文的内容）\n\n![](katz密码学教材v3阅读笔记\\image-20250426150801361.png)\n\n#### 9.2.3 分解假设\n\n引入了一个名叫 GenModulus 的算法，为了说明大数是难分解的（不能在多项式时间复杂度里进行分解）\n\n感觉这一章没什么好讲的，这里就解释一下多项式时间复杂度是什么意思叭\n\n就是$O(n^a)$，n是自变量（一般认为是大数的位数），a是常数\n\n就像直接分解大数，枚举算法时间复杂度大概是 $O(2^\\sqrt{n})$，这是指数级的算法，不是多项式时间复杂度\n\n更广义的，多项式指的是 $f(x)=a_0x^0+a_1x^1+...+a_kx^k$，其中 $k$ 是确定的常数，这里直接取最大值 $O(x^k)$ 就好了（为什么？快去学时间复杂度计算，把主定理学了就好了（学会记得教我））\n\n**值得注意**的是：这里的指数级和多项式级是对于**二进制下位数**进行讨论的，如果是数字本身，需要集体降低一个量级\n\n#### 9.2.4 RSA假设\n\nRSA困难假设是基于大数分解数学困难问题的，所以本质和前面是一样的\n\n这一块块就很偏理论计算了，群啊什么的，你们加油，我开始看下一章了~\n\n这一章新东西不多，感觉就是把前面的整合起来\n\n### 9.3 循环群密码学假设\n\n这一章强度上来了哈，稍微一不留神就跟不上了哈\n\n#### 9.3.1 循环群和生成元\n\n前面已经讲过了生成元，这里正式介绍一下——\n\n对于群 $\\mathbb{G}$，其阶为 $m$，生成元满足阶是最小的群元素满足 $g^m=1$\n\n这一章是大量的定理和证明练习，不再赘述（我有时间再回来补罢\n\n（逃~\n\n#### 9.3.2 离散对数/DH假设\n\n","tags":["Crypto","unfixed"]},{"title":"文书写作/PPT制作 导师给的指导和改正汇总","url":"/2025/04/18/文书写作-PPT制作-导师给的指导和改正汇总/","content":"\n本文汇总了许老师给改的一些PPT或者文档，旨在利于自己学习的同时便于后人减少错误\n\n<!--more-->\n\n### 前言！！！\n\n老师给改的内容，是用一些神神奇奇的小软件~，然后直接在PDF上面改的（所以可以不用给老师发原文档，压成PDF即可）\n\n我最一开始用sumatraPDF，然后老师给改的我只能看见哪里需要改，而看不到老师给的标注（可能这也是没晋级的原因之一，我是罪人::>_<::）；后面换了福昕（foxit）PDF编辑器，就可以直接看到完整的内容了\n\n今天（250418）刚知道，用sumatraPDF，把鼠标放在改的地方，也可以看到改成什么了\n\n---\n\n### 第九届全国密码技术竞赛 初赛——基于国密的 WEB3.0 物联网认证算法实现\n\n复盘：这个作品涉及到的论文太老了（上个世纪的），而且用密钥泄漏风险，而且没有拿得出手的实践（应用于IoT等），还有就是我写的文档太菜了~，故而被筛\n\n这篇文章改的很多个点，老师的工作量不小，故很有必要分条总结\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418085704395.png)\n\n我们按顺序来：\n\n- 轻量级 -> 计算能力和存储空间受限的轻量级\n\n  ![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418085953815.png)\n\n  | 概念               | 是否一个意思？ | 举例说明                                |\n  | ------------------ | -------------- | --------------------------------------- |\n  | 轻量级 vs 计算能力 | ❌ 不是         | 程序运行快 vs 处理能力强弱              |\n  | 轻量级 vs 存储空间 | ❌ 不是         | 文件小 vs 可存多少数据                  |\n  | 三者关系           | ✅ 有联系       | 轻量级通常适用于计算/存储资源有限的设备 |\n\n  加上计算能力和存储空间受限，更贴合在线离线算法\n\n- 尤其是在处理较长消息时 -> 删掉\n\n- 其 -> 指代不明，应当明确传统签名算法或者ECC一类具体的\n\n- ![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418090528370.png)\n\n  缩小比较指的是大小，缩短则指的是二进制下的长度，故后者更合适\n\n- 目前大多数算法未能实现自主可控的目标 -> 目前大多数算法**依赖国外技术，**未能实现**核心**自主可控的目标 \n\n  显然改后的好，虽然不知道为什么~\n\n- 然后是下面的几个在线离线，**符号要统一！！！**，要么全用`-`要么全用`/`\n\n- 国家密码 -> 国密\n\n- 关键词里的`高效且安全`，和其他几个关键词不是一类，所以要换个词\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418091410573.png)\n\n这是第一段，后来我才发现这个1的字体不太对劲~\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418091450829.png)\n\n唉唉下次记住默认全用新时代罗马字体吧~\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418091536895.png)\n\n又是小细节，IOT写法错误，IoT才对\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418091624316.png)\n\n这个群环域的符号也要统一\n\n不过当时自己发现了，不会用word然后就没改（搓手\n\n现在学会了，typora是直接mathbb和mathcal之类的，而word是直接选字符填进去\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418092112095.png)\n\n排版的细节，哦也不是细节了，算是常识\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418092152398.png)\n\n确实差不过当时完全参考的是师兄的文档（悲\n\n其实应该自由发挥一点是，毕竟每个项目都有不一样适合自己的模版和需求\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418092306608-17449393871361.png)\n\n格式要统一！\n\n唉唉当时不知道怎么看这个，最后也没有改\n\n这样看来，感觉对今年的密码技术竞赛很有信心了~\n\n### 数字中国DCIC2025安全赛道作品赛 决赛——可修订区块链：Web3.0下的隐私与监管平衡\n\n这场比赛原本是来凑数的，不过既然是许老师交给我的，就和学弟一起狠狠肝了一个星期，结果没想到晋级了；然后就仔细润色了PPT，麻烦老师给改了一下，找到了很多问题\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418092706463.png)\n\n- `的`放在第一行\n- 单位留白过长\n- 演讲人和指导老师之间1.5倍间距\n\n- 修改后：\n\n  ![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418092925001.png)\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418093005427.png)\n\n- `加密技术`改为签名，因为区块链是通过签名而不是加密\n\n- 右上角图太糊了，需要重构（那张图是直接从网上摘来凑数的哇（悲））；还有就是原文有自带的拼写报错需要去掉\n\n  ![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418093221454.png)\n\n- 左右两侧没对齐（老师眼睛好尖锐，确实没对齐）\n\n  ![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418093309979.png)\n\n- 中间下方那个文字标注也要润色，具体改成什么看最终效果\n\n- 修改后：\n\n  ![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418093430396.png)\n\n- 然后这张后面又改了一版，因为文字长度格式不一样\n\n- 最终版：\n\n  ![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418093607633.png)\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418093641211.png)\n\n两本书要么全是正面要么全是侧面（实际上右侧的图是后面加的，原本只有左边，加上右边的图之后没整体复查）\n\n然后这一页文字太多了，也缩了一下\n\n修改后：\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418093753824.png)\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418093817844.png)\n\n全都是六个字，这个点五个字很突兀\n\n修改后：\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418093922739.png)\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418093951214.png)\n\n司法改为政务，因为不够大\n\n这页字太多了，后面版本缩减了亿点\n\n修改后：\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094025599.png)\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094101899.png)\n\n配色不太合适\n\n修改后：\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094123587.png)\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094142238.png)\n\n字太多了！！！\n\n把需要读的都放进演讲稿，文字留下的全是重点~\n\n修改后：\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094151612.png)\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094254205.png)\n\n需要加荣誉称号\n\n上方黄色字体交换位置使之一一对应\n\n修改后：\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094338070.png)\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094408272.png)\n\n字太多了（::>_<::\n\n修改后：\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094429396.png)\n\n后面是对于演讲稿的修改\n\n![image-20250418094619773](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094619773.png)\n\n评委不知道什么是可修订区块链~\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094732187.png)\n\n词性一致\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094752132.png)\n\n修改后：数据固化，监管困难，扩展受限（因为前面全是四个字，所以这一段也应当是四个字一组）\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418094851686.png)\n\nPPT里是三方面，师兄给改的只留了一个，老师说尽量国内外都有\n\n![](文书写作-PPT制作-导师给的指导和改正汇总\\image-20250418095150240.png)\n\n权威机构已经是最高了~\n\n---\n\n目前就是这些，后面待续~\n\n","tags":["unfixed","None"]},{"title":"Beaver三元组用于乘法共享","url":"/2025/04/10/Beaver三元组用于乘法共享/","content":"\nBeaver 三元组（Beaver triples）是安全多方计算（MPC）中一个超级聪明、实用的技巧，用来安全地做乘法\n\n通俗类比：就好像你和朋友要乘两个私密数字，但你们提前准备了一个万能“乘法模板”，可以安全又正确地偷偷算出结果。\n\n<!--more-->\n\n---\n\n### Motivation\n\n在安全多方计算里：\n\n- **加法**很容易做：每个人把自己数据碎片加一下就行。\n- 但**乘法就麻烦了**，因为：\n  - 两个秘密数的乘积不能直接从碎片算\n  - 又不能暴露真实数值\n  - 所以需要巧妙地”绕过去“\n\nBeaver 三元组应运而生\n\n---\n\n### Defination\n\nBeaver 三元组表示为：\n$$\n(a, b, c) \\quad \\text{where} \\quad c = a \\cdot b\n$$\n\n- 所有参与方各自拿到这些数的“碎片”，但不知道完整的值。\n- 它跟我们真正要计算的 $x \\cdot y$ 没有关系，只是一个通用的乘法工具。\n\n---\n\n### Algorithm\n\n假设两位参与方想计算：\n\n$$\nx \\cdot y\n$$\n\n但每人都只知道自己的秘密（$x$ 或 $y$），又不想泄露给别人。\n\n---\n\n步骤如下：\n\n1. 每人拿到 $x$ 和 $y$ 的秘密共享，还有一个 Beaver 三元组 $(a, b, c)$，满足 $c = ab$\n\n2. 本地计算（在共享上进行）：\n\n$$\n\\begin{align}\n&d = x - a\\\\\n&e = y - b\n\\end{align}\n$$\n\n3. 公布 $d$ 和 $e$（这不会泄露 $x$ 和 $y$，因为 $a$ 和 $b$ 是随机的）\n\n4. 使用下面的公式计算结果：\n\n$$\nxy = c + d \\cdot b + e \\cdot a + d \\cdot e\n$$\n\n---\n\n安全性说明：\n\n虽然你公开了 $d$ 和 $e$，但由于 $a$ 和 $b$ 是随机数，**别人无法反推 $x$ 和 $y$**，同时这个公式仍能计算出准确的乘积\n","tags":["Crypto"]},{"title":"PCS简要介绍","url":"/2025/03/26/PCS简要介绍/","content":"\n之前听师兄讲PCS（多项式承诺方案），听不懂一点，甚至有一次差点睡着（bushi\n\n今天看Siniel，又遇到PCS了，故而通俗理解记录一下，也没时间看相关论文了~浅学一下，够用即可~~\n\n<!--more-->\n\n---\n\n![图一](PCS简要介绍\\image-20250326202011752.png)\n\nMotivation：证明者有一个多项式 $p()$，验证者指定一个数 $z$ 来验证，**通过承诺确保原多项式不会改变**\n\n![图二](PCS简要介绍\\pic2.png)\n\n这里，我们介绍 KZG。更具体的：\n\nKZG 方案是基于**双线性对（bilinear pairing）**和**加法同态加密（homomorphic encryption）**的密码学技术。它允许一个发送方**承诺（commit）**一个多项式，并稍后提供**证明（proof）**，以便验证者确认多项式在某个点的值是否正确。\n\n前置知识：双线性映射\n\n- 设 $G_1,G_2$ 是两个循环群，阶为素数 $p$\n- 设 $e:G_1\\times G_2\\rightarrow G_T$，满足 $e(g^a,h^b)=e(g,h)^{ab}$ 对所有 $a,b\\in\\mathbb{Z}_p$ 成立，其中 $g,h$ 是群 $G_1$ 和 $G_2$ 的生成元\n\nKGC的四个步骤：（对应图二）\n\n1. **Setup（设置）：** 生成公钥参数。\n2. **Commit（承诺）：** 证明者使用私有多项式生成并公开该多项式的承诺。\n3. **Open（打开）：** 验证者指定在某个点，而后要求证明者公开该多项式的值并提供一个证明。\n4. **Verify（验证）：** 验证者检查提交的值和证明是否有效。\n\n---\n\n#### 具体流程\n\n**2.1 设定（Setup）**\n\n由可信第三方（或 MPC ）选取一个私有值 $s$，并计算：$\\{ g, g^s, g^{s^2}, \\dots, g^{s^d} \\}$ 作为公共参数；这些值是椭圆曲线群上的元素并公开发布。\n\n**2.2 承诺（Commit）**\n\n证明者需验证多项式 $p(x) = a_0 + a_1 x + a_2 x^2 + \\dots + a_d x^d$\n\n计算并公开承诺 $C_p = g^{p(s)} = g^{a_0 + a_1 s + a_2 s^2 + \\dots + a_d s^d}$\n\n**2.3 证明（Open）**\n\n验证者想知道证明者的多项式在 $x = \\alpha$ 处的值 $y = p(\\alpha)$\n\n证明者计算**商多项式**：$q(x) = \\frac{p(x) - p(\\alpha)}{x - \\alpha}$；因为 $p(x) - p(\\alpha)$ 可被 $x - \\alpha$ 整除，所以 $q(x)$ 是一个比 $p(x)$ 低 1 阶的多项式。\n\n计算承诺 $C_q$：$C_q = g^{q(s)}$；并将其作为证明 $\\pi = C_q$ 发送给验证者。\n\n**2.4 验证（Verify）**\n\n验证者通过以下等式检查证明是否有效：$e(C_p / g^y, g) = e(\\pi, g^{\\alpha})$\n\n即：$e(g^{p(s) - y}, g) = e(g^{q(s)}, g^{\\alpha})$\n\n若等式成立，则说明证明者提供的 $y = p(\\alpha)$ 是正确的。\n\n---\n\n#### 示例\n\n①设公共参数为：$g, g^s, g^{s^2}, g^{s^3}, \\dots$\n\n②证明者私有多项式：$p(x) = 3x^2 + 2x + 5$\n\n计算承诺并将其公开：$C_p = g^{5 + 2s + 3s^2}$\n\n③验证者指定一个点：$z=2$\n\n证明者计算:$p(2) = 3(2)^2 + 2(2) + 5 = 17$\n\n证明者计算商多项式:$q(x) = \\frac{(3x^2 + 2x + 5) - 17}{x - 2} = 3x + 8$\n\n证明者计算证明：$\\pi = g^{q(s)} = g^{3s + 8}$\n\n④验证者执行验证：$e(C_p / g^{17}, g) = e(g^{3s + 8}, g^2)$\n\n如果等式成立，则证明 $ p(2) = 17 $ 是正确的。\n\n---\n\n#### 进一步的，关于验证阶段\n\n验证者需要验证 $e(C_p / g^{17}, g) = e(g^{3s + 8}, g^2)$ 是否成立\n$$\n\\begin{align}\n左式=&e(C_p / g^{17}, g)\\\\\n=&e(g^{(5 + 2s + 3s^2) - 17},g) \\\\\n=&e(g^{3s^2 + 2s - 12},g)\\\\\n=&e(g, g)^{(3s^2 + 2s - 12)}\n\\end{align}\n$$\n\n$$\n\\begin{align}\n右式=&e(g^{3s + 8}, g^2)\\\\\n=& e(g, g)^{6s + 16}\n\\end{align}\n$$\n\n故只需 $3s^2 + 2s - 12=6s + 16$ 成立，则验证通过\n\n此时 $s=\\frac{2 \\pm \\sqrt{88}}{3}$ （此过程为逆向过程）\n\n即最一开始的公开参数 $s=\\frac{2 \\pm \\sqrt{88}}{3}$ 时，则 $e(C_p / g^{17}, g) = e(g^{3s + 8}, g^2)$ 成立，证明通过\n\n#### 后记：补充说明\n\n和上面的算法相呼应，在论文的后半部分找到的具体算法，本质相同\n\n![](PCS简要介绍\\image-20250329163236108.png)\n","tags":["Crypto"]},{"title":"rust study","url":"/2025/03/01/rust-study/","content":"\n本文记录了rust的学习\n\n<!--more-->\n\n---\n\n### 环境搭建\n\nvscode配置rust环境\n\nvscode内配置快速打开Terminal，绑定`openInIntegratedTerminal`即可\n\n![](rust-study\\image-20250301191522700.png)\n\n![](rust-study\\image-20250301191610383.png)\n\n然后下载rust依赖\n\n因为我们都是喜家家糕守（电脑里有cpp环境），所以可以管理员运行下载[这个东东](https://static.rust-lang.org/rustup/dist/x86_64-pc-windows-msvc/rustup-init.exe)即可\n\n（没有cpp的环境我就不管了（光速逃））\n\n然后一路回车\n\n安装好后，cmd里输入`rustup --version & rustc --version & cargo --version`测试安装成功\n\n![](rust-study\\image-20250301192417753.png)\n\n然后打开vscode，下载相关依赖\n\n```\nRust\nRust-analyzer\nCodeLLDB\ncrates\nRust Syntax\nRust Test Lens\nEven Better TOML(Better TOML已弃用)\n```\n\n后面就可以正常使用了\n\n新建项目 `cargo new hellowrold`\n\n打开项目 `cd .\\helloworld\\`（TAB键补全）\n\n运行项目 `cargo run`\n\n![](rust-study\\image-20250301201157547.png)\n\n","tags":["misc","unfixed"]},{"title":"窝补药橙味算法竞赛掉大分糕守","url":"/2025/02/22/窝补药橙味算法竞赛掉大分糕守/","content":"\n2025年2月21日周五晚[这场牛客](https://ac.nowcoder.com/acm/contest/101963)，掉大分了\n\n<!--more-->\n\n---\n\nA题快速切出来，后面就开始坐牢了（还好记得开ll了）\n\nB题憋了半天，感觉要开不止一对堆，然后一看榜C出的人多，就去看C了\n\n然后C挂了两发，和21年csp-s差点ce的原因一样（\n\n当时是数组开到N，但是i也遍历到N\n\n这次学聪明了，数据开到N+10，然后扫到N；结果忘了后面用到i+1了\n\n然后挂了两发才发现\n\nB题就有意思了，开了四个堆最终，调了好半天过样例了，结果一直WA\n\n赛后找评论区的hack数据也找不出一点问题\n\n最终对拍了下下，记录最大值的初始值是0，但是最大值有可能是负数···\n\n最终成绩\n\n![](窝补药橙味算法竞赛掉大分糕守\\image-20250222150529258.png)\n\n虽然没掉大分，不过这场也打得挺抽象的\n\n","tags":["算法竞赛"]},{"title":"量子安全的概念","url":"/2025/02/20/量子安全的概念/","content":"\n昨天组会，导师跟我说量子安全和后量子安全不是同一个东西，我此前一直将他们混为一谈，故今日作以区分\n\n---\n\n量子安全：指加密方法在量子计算机下仍保持安全。\n\n反量子安全：通过增强现有算法对抗量子计算机的能力，通常是过渡性措施。\n\n后量子安全：指完全为抵抗量子计算机的攻击而设计的新的加密算法。\n\n","tags":["Crypto"]},{"title":"二元不等式串引发的思考","url":"/2025/02/05/二元不等式串引发的思考/","content":"\n写了一下午，最后发现推导的结论是错的\n蚌埠住了，布响丸辣\n\n<!--more-->\n\n---\n\n我们早在高中就学过以下不等式串\n$$\n\\sqrt\\frac{x^{2}+y^{2}}{2}\\geqslant\\frac{x+y}{2}\\geqslant\\sqrt{xy}\\geqslant\\frac{2}{\\frac{1}{x}+\\frac{1}{y}}\n$$\n今天刷张宇的时候，又遇到了这个问题；一般而言这个不等式串背过就行了，直接套用即可，但是我忘了，然后就不会了（大雾\n\n这样死记硬背有利于短期记忆，所以我们进一步研究，**本文致力于让读者深入理解和更好的记忆该不等式**\n\n\n我的切入点是切入面（字面意思），也就是看截面；不妨写成$z=$的形式获得到四个式子\n$$\n\\begin{align}\n&z=\\sqrt\\frac{x^{2}+y^{2}}{2}\\\\\n&z=\\frac{x+y}{2}\\\\\n&z=\\sqrt{xy}\\\\\n&z=\\frac{2}{\\frac{1}{x}+\\frac{1}{y}}\n\\end{align}\n$$\n我们使用绘图软件画出这四个式子可以很直观的发现\n\n![](二元不等式串引发的思考\\image-20250205155642726.png)\n\n后面进行分析\n\n第一个$z=\\sqrt\\frac{x^2+y^2}2$（青色图像），等价于$z^2=\\frac{x^2+y^2}2$，一个很典型的圆锥\n\n具体来说，设有圆形且圆的半径满足$r^2=x^2+y^2$，这时满足$z=\\frac{\\sqrt2}2r$\n\n第二个$z=\\frac{x+y}{2}$（紫色图像），这是个没有任何弯曲的平面\n\n第三个$z=\\sqrt{xy}$（蓝色图像），若不考虑$z$，则$x$和$y$的关系是反比例，图像如下\n\n![](二元不等式串引发的思考\\image-20250205164344087.png)\n\n切一个面，切出来是反比例函数，也就是双曲线\n\n![](二元不等式串引发的思考\\image-20250205164612014.png)\n\n第四个$z=\\frac{2}{\\frac{1}{x}+\\frac{1}{y}}$（棕色图像），**该图像如果使用z=k进行切割，将会切出双曲线**，故我们使用$x+y=k$进行切割\n\n容易计算这时$z=2x-\\frac{2x^2}k$是个双曲线；图像如下\n\n![image-20250205165529486](二元不等式串引发的思考\\image-20250205165529486.png)\n\n这时候就有人要问了，为什么别的式子都是直接切$z=k$，偏偏最后一个要切$x+y=k$非要搞特殊\n\n这时不得不拿出这张众人皆知的图了\n\n![](二元不等式串引发的思考\\compare.png)\n\n看蓝色部分，也就是抛物线部分，它是竖着切的\n\n其他几个不完全是竖着切的，所以上述切法仅仅是投影，除了圆形，其他的不准确，但不影响判断图像性质（即分辨圆形、椭圆或双曲线抛物线），即**离心率范围不会跨越**\n\n回归正题，我们该如何记忆不等式呢？就记忆离心率即可\n\n离心率越小，在不等式的位置越大\n$$\n\\begin{align}\n&z=\\sqrt\\frac{x^{2}+y^{2}}{2}（椭圆）\\\\\n&z=\\frac{x+y}{2}（圆形）\\\\\n&z=\\sqrt{xy}（双曲线）\\\\\n&z=\\frac{2}{\\frac{1}{x}+\\frac{1}{y}}（抛物线）\n\\end{align}\n$$\n诶好像不太对劲~\n","tags":["mathematics"]},{"title":"牛客寒假2025题解","url":"/2025/01/29/牛客寒假2025题解/","content":"\n本文用于记录牛客寒假赛的六场比赛的赛时解题和赛后补题\n\n笔者水平：CF绿上蓝下 \n\n<!--more-->\n\n---\n\n## 第一场\n\n![](牛客寒假2025题解\\image-20250122111748922.png)\n\n打红温了，头一次连打五个小时~\n\n题本身不难，就是实现上遇到比较多的障碍\n\nA题签到题，如果没有`1`就输出`1e9+7`即可\n\nD题也是直接模拟即可\n\nG题排序后计算`a[i]-i`，就是每个点需要操作的次数了\n\nB题一开始以为是有向图浪费了很多时间，树存在简单路径的充要条件是它是链\n\n### M题\n\n也属于思路很简单但是**写起来比较困难**的题\n\n就拓扑排序一下，然后逐步拓展，取最优解即可\n\n```\n#include<iostream>\n#include<algorithm>\n#define int long long\n\nusing namespace std;\n\nconst int N = 1e5;\nint n , a[N+10];\nstruct NUMBER{\n    int num;\n    int id;\n}b[N+10];\n\nbool cmp( NUMBER x , NUMBER y ){\n    return x.num < y.num;\n}\n\nsigned main(){\n    int n;cin >> n;\n    int maxn , minn;maxn = 0 , minn = 2147483647;\n    int minp = 0;\n    int ans = 2147483647;\n    for(int i = 1;i <= n;i ++){\n        cin >> a[i];\n        b[i].id = i , b[i].num = a[i];\n        if( maxn < a[i] ) maxn = a[i];\n        if( minn > a[i] ) minn = a[i] , minp = i;\n    }\n    if( n == 1 ){\n        cout << \"0\\n\";\n        return 0;\n    }\n    int l , r;l = r = minp;\n    sort( b + 1 , b + n + 1 , cmp );\n    b[n+1].id = n+1 , b[n+1].num = 2147483647;\n    int down_minn = minn * 2;\n    if( maxn < b[1].num * 2 ) maxn = b[1].num * 2;\n    minn = b[2].num , minp = b[2].id;\n    if( minn > down_minn ) minn = down_minn;\n    ans = min( maxn - minn , ans );\n    for(int p = 2;p <= n;p ++){\n        if( b[p].id > r ){\n            while( b[p].id > r ){\n                r ++;\n                if( maxn < a[r] * 2 ) maxn = a[r] * 2;\n            }\n            minn = b[p+1].num , minp = b[p+1].id;\n            while( minp <= r && minp >= l ){\n                p ++;\n                minn = b[p+1].num , minp = b[p+1].id;\n            }\n            if( minn > down_minn ) minn = down_minn;\n            ans = min( maxn - minn , ans );\n        } \n        if( b[p].id < l ){\n            while( b[p].id < l ){\n                l --;\n                if( maxn < a[l] * 2 ) maxn = a[l] * 2;\n            }\n            minn = b[p+1].num , minp = b[p+1].id;\n            while( minp <= r && minp >= l ){\n                p ++;\n                minn = b[p+1].num , minp = b[p+1].id;\n            }\n            if( minn > down_minn ) minn = down_minn;\n            ans = min( maxn - minn , ans );\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n### J题\n\n赛时还以为是什么糕级数论，结果降低时间复杂度$O(n^\\frac32)$就能过\n\n通过打表可知，符合条件只有两种情况，再判一下就可以了\n\n要先`continue`掉奇数，不然亲测会T掉\n\n```\n#include<iostream>\n#include<algorithm>\n#include<map>\n#include<cmath>\n#define int long long\n\nusing namespace std;\n\nconst int N = 2e5;\nint n , ans , a[N+10];\nmap < int , int > m;\n\nint gcd_( int x , int y ){\n    if( y == 0 ) return x;\n    return gcd_( y , x % y );\n}\n\nsigned main(){\n    cin >> n;\n    for(int i = 1;i <= n;i ++) cin >> a[i];\n    for(int i = 1;i <= n;i ++) m[a[i]] ++;\n    for(int i = 1;i <= N;i ++){\n        if( i % 2 ) continue;\n        for(int j = 1;j <= sqrt(i);j ++){\n            if( i + j <= N ){\n                if((i ^ (i+j)) == j)\n                    if( gcd_( i , i+j ) == j )\n                        ans += m[i]*m[i+j];\n                if( (i ^ (i+i/j)) == i/j && j*j!=i)\n                    if( gcd_( i , i+i/j ) == i/j )\n                        ans += m[i]*m[i+i/j];\n            }\n        }\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n## 赛后补题\n\n### C题\n\n看起来不难，以为半个小时就能写完\n\n结果调了好久···\n\n大致思路就是朴素开扫\n\n```\n#include<iostream>\n#define int long long\n\nusing namespace std;\n\nconst int N = 1e2;\nint n , t , a[N+10][N+10];\nint ans_list[1000000][5];\nstring s;\n\nsigned main(){int t;cin >> t;\n    while( t -- ){\n        cin >> n;\n        for(int i = 1;i <= n;i ++){\n            cin >> s;\n            for(int j = 0;j < n;j ++){\n                if( s[j] == '1' ) a[i][j+1] = 1;\n                else a[i][j+1] = 0;\n            }\n        }\n        int cnt = 0;\n        for(int i = 1;i <= n/2;i ++){\n            for(int j = 1;j <= n/2;j ++){\n                if( a[i][j] == 0 ){\n                    for(int ii = 1;ii <= n;ii ++){\n                        int jj , jjl;if( ii < i ) jjl = n/2+1;\n                        else if( ii == i ) jjl = j;\n                        else jjl = 1;\n                        for(jj = n;jj >= jjl;jj --){\n                            if( a[ii][jj] == 1 ){\n                                // cout << \"SWAPP: \" << ii << \" \" << jj << endl;\n                                while( !(i==ii&&j==jj) ){\n                                    if( ii > i && a[ii-1][jj] == 0 ){\n                                        cnt ++;\n                                        swap( a[ii][jj] , a[ii-1][jj] );\n                                        ans_list[cnt][1] = ii;\n                                        ans_list[cnt][2] = jj;\n                                        ans_list[cnt][3] = ii-1;\n                                        ans_list[cnt][4] = jj;\n                                        ii --;\n                                    }else if( ii < i && a[ii+1][jj] == 0 ){\n                                        cnt ++;\n                                        swap( a[ii][jj] , a[ii+1][jj] );\n                                        ans_list[cnt][1] = ii;\n                                        ans_list[cnt][2] = jj;\n                                        ans_list[cnt][3] = ii+1;\n                                        ans_list[cnt][4] = jj;\n                                        ii ++;\n                                    }else if( jj > j && a[ii][jj-1] == 0 ){\n                                        cnt ++;\n                                        swap( a[ii][jj] , a[ii][jj-1] );\n                                        ans_list[cnt][1] = ii;\n                                        ans_list[cnt][2] = jj;\n                                        ans_list[cnt][3] = ii;\n                                        ans_list[cnt][4] = jj-1;\n                                        jj --;\n                                    }else if( jj < j && a[ii][jj+1] == 0 ){\n                                        cnt ++;\n                                        swap( a[ii][jj] , a[ii][jj+1] );\n                                        ans_list[cnt][1] = ii;\n                                        ans_list[cnt][2] = jj;\n                                        ans_list[cnt][3] = ii;\n                                        ans_list[cnt][4] = jj+1;\n                                        jj ++;\n                                    }else goto RECHOOSE;\n                                }goto FIXED;\n                            }RECHOOSE:;\n                        }\n                    }\n                }FIXED:;\n            }\n        }\n        // for(int i = 1;i <= n;i ++){\n        //     for(int j = 1;j <= n;j ++){\n        //         cout << a[i][j] << \" \";\n        //     }cout << endl;\n        // }\n        cout << cnt << endl;\n        for(int i = 1;i <= cnt;i ++){\n            for(int j = 1;j <= 4;j ++){\n                cout << ans_list[i][j] << \" \";\n            }cout << endl;\n        }\n    }\n    return 0;\n}\n```\n\n结果WA了个测试点~\n\n![](牛客寒假2025题解\\image-20250122114911663.png)\n\n看了题解，感觉思路真妙哇~\n\n![](牛客寒假2025题解\\image-20250122115049179.png)\n\n按照题解敲了一下，发现实现起来的复杂程度和我的代码差不多···\n\n最终千辛万苦，debug一整个下午，找到问题了\n\n`ii`和`jj`这个两个指针复用导致的，每次用完之后复位一下就好了\n\n```\n#include<iostream>\n#define int long long\n\nusing namespace std;\n\nconst int N = 1e2;\nint n , t , a[N+10][N+10];\nint ans_list[1000000][5];\nstring s;\n\nsigned main(){int t;cin >> t;\n    while( t -- ){\n        cin >> n;\n        for(int i = 1;i <= n;i ++){\n            cin >> s;\n            for(int j = 0;j < n;j ++){\n                if( s[j] == '1' ) a[i][j+1] = 1;\n                else a[i][j+1] = 0;\n            }\n        }\n        int cnt = 0;\n        for(int i = 1;i <= n/2;i ++){\n            for(int j = 1;j <= n/2;j ++){\n                if( a[i][j] == 0 ){\n                    for(int ii = 1;ii <= n;ii ++){\n                        int jj;if( ii < i ) jj = n/2+1;\n                        else if( ii == i ){ jj = j+1;}//cout << \"???????????\" << endl;}\n                        else jj = 1;\n                        int oii , ojj;oii = ii;\n                        // cout << \"disp?: \"<< i << \" \" << j << \" \" << ii << \" \" << jj << endl;\n                        while(jj <= n){\n                            ojj = jj;\n                            // cout << \"ij: \"<< i << \" \" << j << \" \" << ii << \" \" << jj << endl;\n                            if( a[ii][jj] == 1 ){\n                                // cout << \"SWAPP: \" << ii << \" \" << jj << endl;\n                                while( !(i==ii&&j==jj) ){\n                                    // cout << \"PASSED: \" << ii << \" \" << jj << endl;\n                                    if( ii > i && a[ii-1][jj] == 0 ){\n                                        cnt ++;\n                                        swap( a[ii][jj] , a[ii-1][jj] );\n                                        ans_list[cnt][1] = ii;\n                                        ans_list[cnt][2] = jj;\n                                        ans_list[cnt][3] = ii-1;\n                                        ans_list[cnt][4] = jj;\n                                        ii --;\n                                    }else if( ii < i && a[ii+1][jj] == 0 ){\n                                        cnt ++;\n                                        swap( a[ii][jj] , a[ii+1][jj] );\n                                        ans_list[cnt][1] = ii;\n                                        ans_list[cnt][2] = jj;\n                                        ans_list[cnt][3] = ii+1;\n                                        ans_list[cnt][4] = jj;\n                                        ii ++;\n                                    }else if( jj > j && a[ii][jj-1] == 0 ){\n                                        cnt ++;\n                                        swap( a[ii][jj] , a[ii][jj-1] );\n                                        ans_list[cnt][1] = ii;\n                                        ans_list[cnt][2] = jj;\n                                        ans_list[cnt][3] = ii;\n                                        ans_list[cnt][4] = jj-1;\n                                        jj --;\n                                    }else if( jj < j && a[ii][jj+1] == 0 ){\n                                        cnt ++;\n                                        swap( a[ii][jj] , a[ii][jj+1] );\n                                        ans_list[cnt][1] = ii;\n                                        ans_list[cnt][2] = jj;\n                                        ans_list[cnt][3] = ii;\n                                        ans_list[cnt][4] = jj+1;\n                                        jj ++;\n                                    }else goto RECHOOSE;\n                                }goto FIXED;\n                            }RECHOOSE:;\n                            ii = oii , jj = ojj;\n                            jj ++;\n                        }\n                    }\n                    // cout << \"unp: \" << i << \" \" << j << endl;\n                    // for(int i = 1;i <= n;i ++){\n                    //     for(int j = 1;j <= n;j ++){\n                    //         cout << (a[i][j]==1?\"1\":\"0\") << \" \";\n                    //     }cout << endl;\n                    // }\n                }FIXED:;\n            }\n        }\n        // for(int i = 1;i <= n;i ++){\n        //     for(int j = 1;j <= n;j ++){\n        //         cout << (a[i][j]==1?\"1\":\"0\") << \" \";\n        //     }cout << endl;\n        // }\n        cout << cnt << endl;\n        for(int i = 1;i <= cnt;i ++){\n            for(int j = 1;j <= 4;j ++){\n                cout << ans_list[i][j] << \" \";\n            }cout << endl;\n            \n        }\n    }\n    return 0;\n}\n```\n\n### E题\n\n概率论没学好（悲\n\n![](牛客寒假2025题解\\image-20250123095350739.png)\n\n知道了这一点，将会是签到题的难度（悲\n\n```\n#include<iostream>\n#include<algorithm>\n#define int long long\n\nusing namespace std;\n\nconst int N = 1e5;\nint n , t , a[N+10];\n\nsigned main(){int t;\n    cin >> t;\n    while( t -- ){\n        cin >> n;\n        int ans = 0;\n        for(int i = 1;i <= n;i ++){\n            cin >> a[i];\n        }\n        sort( a + 1 , a + n + 1 );\n        int goal , goal1;\n        goal1 = a[(n/2+1)/2];\n        goal  = a[n/2+(n/2+1)/2];\n        for(int i = 1;i <= n/2;i ++){\n            ans += abs( a[i] - goal1 );\n        }\n        for(int i = n/2+1;i <= n;i ++){\n            ans += abs( a[i] - goal );\n        }\n        if( goal1 == goal ){\n            int add , add_temp;add_temp = 0;\n            for(int i = 1;i <= n/2;i ++){\n                if( a[i] == goal1 ) add_temp ++;\n                else add_temp --;\n            }add = add_temp;\n            add_temp = 0;\n            for(int i = n/2+1;i <= n;i ++){\n                if( a[i] == goal ) add_temp ++;\n                else add_temp --;\n            }add = min(add_temp,add);\n            ans += add;\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n\n### H题\n\n思维题\n\n考虑贪心，为了最大化排的开，我们需要**按左节点排序，当$i=l_i$时加入备选，备选里面按右节点排序**\n\n如果不够了，就说明不存在\n\n记得判非空\n\n顺便学习了一下如何结构体根堆\n\n```\n#include<iostream>\n#include<algorithm>\n#include<queue>\n#define int long long \n\nusing namespace std;\n\n\nconst int N = 1e5;\nint n;\nstruct NODE{\n    int l , r;\n    int id;\n}a[N+10];\nbool cmp( NODE x , NODE y ){\n    return x.l < y.l;\n}\nstruct Comp{\n    bool operator()(const NODE& x , const NODE& y){\n        // if( x.r == y.r )\n        return x.r > y.r;\n    }\n};\npriority_queue < NODE , vector < NODE > , Comp > pq;\nint ans[N+10];\n\nsigned main(){\n    cin >> n;\n    for(int i = 1;i <= n;i ++){\n        cin >> a[i].l >> a[i].r;a[i].id = i;\n    }sort( a + 1 , a + n + 1 , cmp );\n    int top = 1 , topi = 1;\n    while( top <= n ){\n        while( a[topi].l == top ) pq.push( {a[topi].l,a[topi].r,a[topi].id} ) , topi ++;\n        if( pq.empty() ){\n            cout << -1 << endl;\n            return 0;\n        }\n        if( pq.top().r >= top ){\n            ans[pq.top().id] = top;\n            pq.pop();top ++;\n        }else{\n            cout << -1 << endl;\n            return 0;\n        }\n    }for(int i = 1;i <= n;i ++){\n        cout << ans[i] << \" \";\n    }cout << endl;\n    return 0;\n}\n```\n\n就此，100人以上的题目都补完了\n\n![](牛客寒假2025题解\\image-20250128160459794.png)\n\n## 第二场\n\n![](牛客寒假2025题解\\image-20250128160849232.png)\n\n这场被打爆了，D结论题没做出来（根本想不到）\n\n不过好在H题一个钝角三角形就秒了，没掉太大分\n\nA题签到\n\nB题直接排序然后输出`a[n/2+1]-1`即可\n\nF题打表找到规律`r-l+1`\n\nG题直接模拟\n\nJ题也是大模拟（但是没有想象中的毒瘤）\n\n### K题\n\n直接搜索即可，但是需要一些优化技巧不然会T掉~\n\n就涂色就可以了，代码还是听清楚的\n\n感觉难在优化（挂五发的悲哀）\n\n```\n#include<iostream>\n#include<algorithm>\n#include<string>\n#include<map>\n#define int long long\n\nusing namespace std;\n\nconst int N = 5e2;\nint n , m;\nint a[N+10][N+10];\nint blue[N+10][N+10];\nint rem[N+10][N+10];\nstring s;\nint ans , ans_now;\nint most_low;\n\nvoid dfs( int i , int j ){\n    most_low = max( most_low , i + 1 );\n    if( i+1<=n && a[i+1][j] == 1 && blue[i+1][j] == 0 ) blue[i+1][j] = 1 , dfs(i+1,j);\n    else if( i+1<=n && blue[i+1][j] == 0 ) blue[i+1][j] = 2 , ans_now ++;\n    if( i-1>=1 && a[i-1][j] == 1 && blue[i-1][j] == 0 ) blue[i-1][j] = 1 , dfs(i-1,j);\n    else if( i-1>=1 && blue[i-1][j] == 0 ) blue[i-1][j] = 2 , ans_now ++;\n    if( j+1<=m && a[i][j+1] == 1 && blue[i][j+1] == 0 ) blue[i][j+1] = 1 , dfs(i,j+1);\n    else if( j+1<=m && blue[i][j+1] == 0 ) blue[i][j+1] = 2 , ans_now ++;\n    if( j-1>=1 && a[i][j-1] == 1 && blue[i][j-1] == 0 ) blue[i][j-1] = 1 , dfs(i,j-1);\n    else if( j-1>=1 && blue[i][j-1] == 0 ) blue[i][j-1] = 2 , ans_now ++;\n    return ;\n}\n\nsigned main(){\n    // freopen(\"in.txt\", \"r\", stdin);\n    cin >> n >> m;\n    for(int i = 1;i <= n;i ++){\n        cin >> s;\n        for(int j = 0;j < m;j ++){\n            a[i][j+1] = s[j] - '0';\n        }\n    }\n    ans = 2147483647;\n    int ii , jj;ii = 1;\n    while( 1 ){\n        ans_now = 0;\n        most_low = 1;\n        for(;ii <= n;ii ++){\n            for(jj = 1;jj <= m;jj ++){\n                if( a[ii][jj] ){\n                    blue[ii][jj] = 1;\n                    dfs( ii , jj );\n                    goto OUT;\n                }\n            }\n        }\n        break;\n        OUT:;\n        ans = min( ans , ans_now );\n        for(int i = ii;i <= most_low;i ++){\n            for(int j = 1;j <= m;j ++){\n                if( blue[i][j] ){//1和2都涂为灰色\n                    blue[i][j] = 0;\n                    a[i][j] = 0;\n                }\n            }\n        }\n    }cout << ans << endl;\n    \n    return 0;\n}\n```\n\n### H题\n\n没想到这题这么简单，答案是钝角（即答\n\n直接试图构造最钝角的钝角三角形即可\n\n```\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nint a , b , c , d;\n\nsigned main(){\n    int t;cin >> t;while( t -- ){\n        cin >> a >> b >> c >> d;\n        if( b - a > d - c ){\n            cout << b << \" \" << d << endl;\n            cout << b-1 << \" \" << d << endl;\n            cout << a << \" \" << d-1 << endl;\n            \n        }else{\n            cout << a << \" \" << c << endl;\n            cout << a << \" \" << c+1 << endl;\n            cout << a+1 << \" \" << d << endl;\n        }\n    }\n    return 0;\n}\n```\n\n## 赛后补题\n\n### D题\n\n大结论题，完全没想到的一款\n\n结论：连续子串和不连续子串，最长情况下，只有最后一个（或者第一个）字母不同\n\n学长给的证明，感觉很清晰易懂\n\n![](牛客寒假2025题解\\2ZJTTZLS5UCBN$E]BZQD[JH_tmb.jpg)\n\n赛后多了新数据，特判一下1的时候输出0就可以了\n\n```\n#include<iostream>\n#include<map>\n#define int long long\n\nusing namespace std;\n\nconst int N = 2e5;\nint n;\nstring s;\nint a[N+10] , lst[30];\nmap < int , int > mp;\n\n\nsigned main(){\n    cin >> n >> s;\n    for(int i = 1;i <= n;i ++){\n        a[i] = s[i-1] - 'a' + 1;\n    }\n    int maxn = 0;\n    for(int i = 1;i <= n;i ++){\n        if( mp[a[i]] ) maxn = max( maxn , lst[a[i]] );\n        mp[a[i]] ++ , lst[a[i]] = i;\n    }\n    for(int i = 1;i <= 26;i ++) mp[i] = 0;\n    for(int i = n;i >= 1;i --){\n        if( mp[a[i]] ) maxn = max( maxn , n - lst[a[i]] + 1 );\n        mp[a[i]] ++ , lst[a[i]] = i;\n    }\n    if( maxn == 1 ) maxn = 0;\n    cout << maxn << endl;\n    return 0;\n}\n```\n\n### C题\n\n构造题，需要建立在D的结论之上\n\n不妨先只考虑一个方向（从前往后）\n\n构造一个串，答案为**最后一个倒数第二个字母**（最大的）\n\n就，前面半截是`abcde...`，只要末尾最后俩是对`a`，就是`m=n-1`\n\n例如，`n=11,m=10`，则构造的序列为`abcdefghiaa`，这时符合条件（只考虑从前往后扫）\n\n那，还要从后往前扫怎么办~\n\n对称一下不就好了，即`abcdefghiaihgfedcba`，这时`m=10`（虽然`n`变了）\n\n`n=2m+1`的时候可以这样子构造，，，那其他情况呢？`n>2*m`的时候，往中间填充任意字符就可以了（需要是两侧出现过的哦）\n\n如果`n<=2*m`，也就是**回文区间大于前缀/后缀**，可以发现我们可以从前缀结束之后直接继续数，例如\n\n`abcde fgh edcba`这样子，反正这样就可以达到延长子串的作用（不信你试试，答案刚好是前两段的内容（第一种情况下答案只包含第一段+1））\n\n最后别忘了特判`n==m`和字母不够（`n-m>26`）的情况\n\n```\n#include<iostream>\n#include<algorithm>\n\nusing namespace std;\n\nconst int N = 2e5;\nint n , m;\n\nsigned main(){\n    int t;cin >> t;while( t -- ){\n        cin >> n >> m;\n        if( n == m || n - m > 26 ){\n            cout << \"NO\" << endl;\n            continue;\n        }\n        cout << \"YES\" << endl;\n        if( n > m * 2 ){\n            for(int i = 1;i <= m;i ++){\n                cout << (char)(i+'a'-1);\n            }\n            for(int i = m+1;i <= n-m;i ++){\n                cout << (char)(i+'a'-1);\n            }\n            for(int i = m;i >= 1;i --){\n                cout << (char)(i+'a'-1);\n            }\n            cout << endl;\n        }else{\n            for(int i = 1;i <= n-m;i ++){\n                cout << (char)(i+'a'-1);\n            }\n            for(int i = 1;i <= 2*m-n;i ++){\n                cout << (char)(1+'a'-1);\n            }\n            for(int i = n-m;i >= 1;i --){\n                cout << (char)(i+'a'-1);\n            }\n            cout << endl;\n        }\n    }\n    return 0;\n}\n```\n\n### E题\n\n哦原来是RMQ算法哇怪不得我不会做原来是因为我不会\n\n先记下来，明儿个学了再补~\n\n\n\n## 第三场\n\n![](牛客寒假2025题解\\image-20250129202306326.png)\n\n这场发挥比较好，骑马进前10%了（也有可能是题目难度梯度大，恰巧E调出来了）\n\nA题猜结论按奇偶性分类，随机数最优策略都只拿一个故偶数必败\n\nM题一个桶结束\n\nF题模拟一下极端情况，可以发现`sum{a,b,c}`在`n`和`2n`之间是合法的，否则不合法\n\n### C题\n\n正解为按字典序排序然后贪心，当然trie树也可以做\n\n由于最后一步不需要复原，故把最后一个弄成最长的那个即可\n\n```\n#include<iostream>\n#include<algorithm>\n#define int long long\n\nusing namespace std;\n\nconst int N = 1e5;\nint n , m;\nstring s[N+10];\n\nbool cmp( string x , string y ){\n    for(int i = 0;i < min(x.length(),y.length());i ++)\n        if( x[i] != y[i] ) return (int)(x[i]) < (int)(y[i]);\n    return x.length() < y.length();\n}\n\nsigned main(){\n    cin >> n >> m;\n    for(int i = 1;i <= n;i ++){\n        cin >> s[i];\n    }cin >> m >> m;\n    sort( s + 1 , s + n + 1 , cmp );\n    string now_str = \"\";\n    int ans = 0;\n    for(int i = 1;i <= n;i ++){\n        while( now_str != s[i] ){\n            int j = 0;\n            for(;j < min(now_str.length(),s[i].length());j ++)\n                if( now_str[j] != s[i][j] ) break;\n            ans += ( s[i].length() + now_str.length() - j*2 );\n            now_str = s[i];\n        }\n    }\n    int long_max = 0;\n    for(int i = 1;i <= n;i ++){\n        long_max = max( long_max , (int)s[i].length() );\n    }\n    cout << ans + (int)now_str.length() - long_max << endl;\n    return 0;\n}\n```\n\n### L题\n\n算是个构造+小模拟\n\n我的策略如下\n\n初始下，不妨设酱紫\n\n![](牛客寒假2025题解\\3L1.jpg)\n\n构造，先把右上角这条线，从上到右下画了\n\n![](牛客寒假2025题解\\3L2.jpg)\n\n然后通过以下规则进行填充\n\n![](牛客寒假2025题解\\3L3.jpg)\n\n按照紫色的规则，填充到最左侧，然后往上两个（见红色）\n\n![](牛客寒假2025题解\\3L4.jpg)\n\n再按如图的规则填充到最右侧\n\n![](牛客寒假2025题解\\3L5.jpg)\n\n现在就回到了最右侧，之后按照之前的步骤，就可以填充所有的节点\n\n![](牛客寒假2025题解\\3L6.jpg)\n\n通过代码实现上述内容即可，数据范围比较小，调试通过了大概率就能过\n\n```\n#include<iostream>\n#define int long long\n\nusing namespace std;\n\nint a[10][10];\n\nvoid out( int i , int j ){\n    cout << a[i][j] << \" \";\n    // cout << i << \" \" << j << endl;\n    return ;\n}\n\nsigned main(){\n    int n;cin >> n;n ++;cout << \"Yes\" << endl;\n    int cnt = 0;\n    for(int i = 1;i <= n;i ++){\n        for(int j = 1;j <= n;j ++){\n            if( i >= j ){\n                cnt ++;a[i][j] = cnt;\n            }\n        }\n    }\n    // for(int i = 1;i <= n;i ++){\n    //     for(int j = 1;j <= n;j ++){\n    //         cout << a[i][j] << \" \";\n    //     }cout << endl;\n    // }\n    for(int i = 1;i <= n;i ++){\n        out(i,i);\n    }\n    for(int i = n;i >= 1;i --){\n        for(int j = i-1;j >= 1;j --){\n            // cout << \"start: \" << i << \" \" << j << endl;\n            if( j == 1 ){\n                out(i,j);\n                i--;out(i,j);\n                if( i > 1 ) {i--;out(i,j);}\n                while( j < i ){\n                    i++,j++;out(i,j);\n                    i--;out(i,j);\n                }\n            }else{\n                out(i,j);\n                i--;out(i,j);\n                j--;out(i,j);\n                j++,i++;out(i,j);\n            }\n            // cout << \"round: \" << i << \" \" << j << endl;\n        }\n    }cout << endl;\n    return 0;\n}\n```\n\n### E题\n\n因为是弹性碰撞，所以我们可以认为**两个球碰撞等价于两个球相互穿过**（后面的讨论都基于此）\n\n只考虑向右和向左的球，故如果知道了时间 $t$，我们只需要确定是否存在大于 $k$ 个球的间距不小于 $2t$ 且左侧的球是向右走，右侧的球向左走\n\n故我们将两侧的球分别记录，然后二分时间即可\n\n值得注意的是，向右走的球与其左侧的向左走的球永远不可能相撞，故记录一下进行减法运算即可\n\n从后往前扫，累计加入答案，这样可以让一次check的时间复杂度降到$O(n)$\n\n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define int long long\n\nusing namespace std;\n\nconst int N = 1e5;\nint n , k;\nstruct BOLL\n{\n    int p , v;\n}b[N+10];\nint distl[N+10] , distr[N+10] , uselessp[N+10];\nint ltop , rtop;\n\nbool cmp( BOLL x , BOLL y ){\n    return x.p < y.p;\n}\n\nint check( long double dist ){\n    // cout << \"dist: \" << dist << endl;\n    int ans = 0 , i , j;i = j = 1;\n    while( i <= ltop && j <= rtop + 1 ){\n        if( distr[j] - distl[i] <= dist && j != rtop+1 ){\n            j ++;\n        }else{\n            ans += ( j-1 - uselessp[i] );\n            // cout << \"ans: \" << ans << endl;\n            i ++;\n        }\n    }\n    // cout << \"dist k: \" << ans << endl;\n    return ans;\n}\n\nlong double ef( long double l , long double r ){\n    if( r - l <= 1e-8 ) return l;\n    long double mid = (l+r)/2;\n    if( check( mid ) >= k ) return ef(l,mid);\n    else return ef(mid,r);\n}\n\nsigned main(){\n    cin >> n >> k;\n    for(int i = 1;i <= n;i ++){\n        cin >> b[i].p >> b[i].v;\n    }sort( b + 1 , b + n + 1 , cmp );\n    int useless = 0;\n    for(int i = 1;i <= n;i ++){\n        if( b[i].v == 1 ) distl[++ltop] = b[i].p , uselessp[ltop] = useless;\n        else distr[++rtop] = b[i].p , useless ++;\n    }\n    // for(int i = 1;i <= ltop;i ++) cout << distl[i] << \" \";cout << endl;\n    // for(int i = 1;i <= ltop;i ++) cout << uselessp[i] << \" \";cout << endl;\n    // for(int i = 1;i <= rtop;i ++) cout << distr[i] << \" \";cout << endl;\n    \n    int reference = 0;\n    for(int i = 1;i <= ltop;i ++) reference += (rtop-uselessp[i]);\n    // cout << reference << endl;\n    if( k > reference ){\n        cout << \"No\" << endl;\n    }else{\n        long double ans = ef( 0 , 1e9 );\n        printf(\"Yes\\n%0.8Lf\\n\",ans/2);\n    }\n    // cout << ans << endl;\n    return 0;\n}\n```\n\n## 赛后补题\n\n### G题\n\n打个表先~\n\n![](牛客寒假2025题解\\image-20250201120517119.png)\n\n从后往前看，发现是等差数列\n\n先是公差为1，然后公差为2，之后3...\n\n故可以分块，公差相同的一组分到一个块\n\n然后二分符合条件的数值（第前k项对应的数值）；对于每个块，知道了首项和公差，所以可以$O(1)$计算有多少个符合条件的；总共有$\\sqrt{n}$个块。故此算法的时间复杂度为$O(\\sqrt{n}\\log n)$\n\n值得注意的是，二分的写法有点不太传统~\n\n```\n#include<iostream>\n#define int long long\n\nusing namespace std;\n\nint n , k;\nint vtot , val;\n\nint cnt( int num ){\n    int tot = 0;\n    for(int l = 1,r;l <= n;l = r + 1){\n        r = n / ( n / l );\n        int a = n - n / l * l;\n        int b = n / l;\n        if( a < num ) continue;\n        tot += min( (a-num)/b+1 , r - l + 1 );\n    }return tot;\n}\n\nvoid ef( int l , int r ){\n    if( l > r ) return ;\n    int mid = (l+r)/2;\n    int tot = cnt(mid);\n    if( tot < k ){\n        vtot = tot , val = mid;\n        ef( l , mid - 1 );\n    }\n    else ef( mid + 1 ,  r );\n}\n\n// void ef( int l , int r ){\n//     if( l <= r ) return ;\n//     int mid = (l+r)/2;\n//     int tot = cnt(mid);\n//     if( tot < k ){\n//         vtot = tot , val = mid;\n//         ef( l , mid );\n//     }\n//     else ef( mid + 1 ,  r );\n// }\n\nsigned main(){\n    cin >> n >> k;\n    ef( 1ll , n );\n    // cout << val << \" \" << vtot << endl;\n    int ans = ( k - vtot ) * ( val - 1 );\n    // cout << ans << endl;\n    for(int l = 1,r;l <= n;l = r + 1){\n        r = n / ( n / l );\n        int a = n - n / l * l;\n        int b = n / l;\n        if( a < val ) continue;\n        int len = min((a - val) / b + 1, r - l + 1);\n        ans += (a * 2 - b * (len - 1)) * len / 2;\n        // cout << ans << endl;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n\n## 第四场\n\n![](牛客寒假2025题解\\image-20250206185947578.png)\n\n这场代码量太大了（悲\n\nK题签到题，直接取最大值即可\n\nI题直接扫一遍即可\n\nB题直接枚举即可，C就不会了（悲\n\nE题直接开扫，我写的依托~\n\n### D题\n\n\n\n```\n#include<iostream>\n#include<map>\n#define int long long\n\nusing namespace std;\n\nint t , n , m;\nstring a , b;\n\nmap < char , int > mp;\n\nsigned main(){\n    cin >> t;while( t -- ){\n        cin >> n >> m;\n        cin >> a >> b;\n        mp.clear();\n        if( n < m ){\n            string c = a;\n            a = b , b = c;\n            swap( n , m );\n        }\n        for(int i = 0;i < a.length();i ++){\n            mp[a[i]] ++;\n        }\n        for(int i = 0;i < b.length();i ++){\n            mp[b[i]] --;\n        }\n        int ans = 0;\n        for(int i = 0;i <= 26;i ++){\n            if( mp[i+'a'] < 0) ans -= mp[i+'a'] , mp[i+'a'] = 0;\n        }\n        int temp_del = 0 , rel = 0;\n        for(int i = 0;i <= 26;i ++){\n            if( mp[i+'a'] >= 2 ) temp_del += mp[i+'a'] / 2;\n            rel += mp[i+'a'];\n        }\n        ans += rel-min( temp_del * 2 , n - m );\n        cout << ans/2 << endl;\n    }\n    return 0;\n}\n```\n\n## 赛后补题\n\n","tags":["算法竞赛"]},{"title":"CF补题小合集","url":"/2025/01/19/CF补题小合集/","content":"\n由于后续CF比赛基本只参加VP，故特此记录一下\n\n<!--more-->\n\n---\n\n### 2025.01.17\n\n[Codeforces Round 996 (Div. 2)](https://codeforces.com/contest/2055)\n\n这把打爽了，表现分差点上紫，D题最后一分钟调出来过样例 结果WA2了\n\n![](CF补题小合集\\1.png)\n\n#### [C题](https://codeforces.com/contest/2055/problem/C)\n\n构造题\n\n我们从`(1,1)`开始思考，假设场景是这样的\n\n![1](CF补题小合集\\1.jpg)\n\n设每行每列的和都为$S$，故`(1,1)`的数值和$S$的大小成线性关系\n\n也就是说，知道$S$就能通过这一行的数求出`(1,1)`的数值（如蓝色所示）\n\n![](CF补题小合集\\2.jpg)\n\n同理，知道$S$就能求出第二行的数值（如紫色所示）\n\n![](CF补题小合集\\3.jpg)\n\n按顺序（沿路径）向下递推，就必然可以计算出下一个方格的数据（如红色所示）\n\n![](CF补题小合集\\4.jpg)\n\n故得出结论：**如果该位置的下一个是R，则通过列计算；否则通过行计算**\n\n但是$S$还不知道哇~\n\n梅瓜吸，$S$是多少都可以，我直接让它是0（更正式的，由$x+1$个未知数的$x$个方程构成的方程组中，存在一个自由量，**这个自由量可以是S**；其中$x=n+m-2$）\n\n```\n#include<iostream>\n#define int long long\n\nusing namespace std;\n\nconst int N = 1e3;\nint n , m;int a[N+10][N+10];\nstring s;\n\nsigned main(){\n    int t;cin >> t;\n    while( t -- ){\n        cin >> n >> m >> s;\n        for(int i = 1;i <= n;i ++){\n            for(int j = 1;j <= m;j ++){\n                cin >> a[i][j];\n            }\n        }\n        int x , y;x = y = 1;\n        for(int p = 0,i,j;p < s.length();p ++){\n            if( s[p] == 'D' ){\n                for(j = 1;j <= m;j ++){\n                    if( j == y ) continue;\n                    a[x][y] += a[x][j];\n                }a[x][y] = -a[x][y];\n                x ++;\n            }\n            if( s[p] == 'R' ){\n                for(i = 1;i <= n;i ++){\n                    if( i == x ) continue;\n                    a[x][y] += a[i][y];\n                }a[x][y] = -a[x][y];\n                y ++;\n            }\n        }\n        for(int j = 1;j < m;j ++) a[n][m] += a[n][j];\n        a[n][m] = -a[n][m];\n        for(int i = 1;i <= n;i ++){\n            for(int j = 1;j <= m;j ++){\n                cout << a[i][j] << \" \";\n            }cout << endl;\n        }\n    }return 0;\n}\n```\n\n#### [D题](https://codeforces.com/contest/2055/problem/D)\n\n不容易的思维题，不过只要逻辑理清楚了，都很简单\n\n```\n考虑以下策略\n仅考虑两个相邻的点\n如果二者的距离小于k，则可以直接越过去，a[i]的值尽可能的大\n如果二者的距离大于k但是小于k+已过去的时间，则右侧点有能力移动到a[i-1]+k，也不需要额外消耗时间\n如果二者的距离大于k+已过去的时间，则右侧点应当从一开始就开始全力左移，并二者相向而行，代价是相向而行的时间\n```\n\n值得注意的是，long double最后要转成long long不然输出的可能是科学计数法（WA6）\n\n```\n#include<iostream>\n#define int long long\n\nusing namespace std;\n\nconst int N = 2e5;\nint n , k , l;\nlong double ans , time_now;\nlong double a[N+10];\n\nsigned main(){\n    int t;cin >> t;\n    while( t -- ){ans = 0;\n        cin >> n >> k >> l;\n        for(int i = 1;i <= n;i ++) cin >> a[i];\n        ans += a[1]*2;\n        time_now = a[1];\n        a[1] = 0;\n        for(int i = 2;i <= n;i ++){\n            if( a[i] - a[i-1] > k ){\n                if( a[i] - a[i-1] > k + time_now ){\n                    a[i] -= time_now;\n                    ans += (a[i] - a[i-1] - k);\n                    time_now += (a[i] - a[i-1] - k)/2;\n                    a[i] -= (a[i] - a[i-1] - k) / 2;\n                }else{\n                    a[i] = a[i-1] + k;\n                }\n            }else{\n                a[i] = min( a[i-1] + k , a[i] + time_now );\n            }\n        }\n        ans += max( (l - a[n] - k )*2 , (long double)0 );\n        cout << (long long)ans << endl;\n    }return 0;\n}\n```\n\n","tags":["算法竞赛"]},{"title":"PPT制作总结","url":"/2025/01/11/PPT制作总结/","content":"\n总结各种情况下的PPT如何制作\n\n<!--more-->\n\n---\n\n### 1. 组会汇报\n\n面向导师和同学，强调科研进展汇报和交流\n\n- 格式要求：\n  - 中文字体：微软雅黑；英文字体：Times New Roman\n  - 字体大小：最小不得低于18号，推荐20号及以上\n  - 排版设计：背景简洁，切忌使用动画\n  \n- 内容呈现：\n  - 注重清晰性：多用图表，少用文字描述\n  - 重点突出：用颜色标注关键结果或问题\n  \n- 汇报技巧：\n  - 简明扼要：不必深入每个细节，重点汇报进展和结果\n  \n- 时间分配\n\n  汇报主体（30-40分钟）\n  \n  - 研究背景（5-10分钟）：\n    - 简述问题来源和研究意义，回顾之前的研究进展\n    - 提供上下文，使组内成员对你的工作方向和目标有清晰认知\n  \n  - 研究方法与设计（10-15分钟）：\n    - 展示研究方法、算法设计或实验过程\n    - 强调你的创新点及其理论依据\n  \n  - 研究结果与分析（10-15分钟）：\n    - 使用清晰的图表或数据展示结果\n    - 对结果进行定量和定性分析，回答“为什么会出现这些结果”\n  \n  - 未解问题与计划（5分钟）：\n    - 列出当前面临的技术问题或挑战\n    - 说明下一步计划，寻求导师或同事建议\n  \n  讨论与反馈（20-30分钟）\n  \n  - 预留充足时间与导师及组内成员交流\n  - 主动提问，展示你对未解问题的思考和希望获得的反馈\n\n### 2. 学术会议汇报\n\n面向领域内专家学者，突出科研成果和创新点\n\n- PPT设计：\n  - 简洁专业：每页聚焦一个主题，内容适量，每页文字不超过6行\n  - 色彩搭配：背景与字体对比鲜明，常用白底黑字或深色底白字\n  - 数据可视化：使用高质量图表展示数据，标明单位和轴标签\n- 内容结构：\n  - 开头：研究背景、意义和问题\n  - 中间：研究方法、实验设计、结果和分析\n  - 结尾：关键结论与未来展望\n- 表达要点：\n  - 语言清晰：用学术语言简洁表达，避免过多术语\n  - 逻辑分明：按逻辑线索推进（背景→问题→方法→结果→结论）\n  - 时间把控：提前排练，遵守会议规定的时间限制\n\n### 3. 宣讲和授课\n\n以传播知识为目的，强调互动和易懂性\n\n- 视觉设计：\n  - 突出重点：大标题、分点呈现，字体建议30号及以上，图文结合\n  - 多媒体辅助：适量使用图片、视频或动画吸引注意力，但避免复杂特效\n- 内容设计：\n  - 突出逻辑：每部分开头设置提纲或总结，引导听众理解\n  - 提供实例：结合案例或实验结果说明抽象概念\n  - 控制节奏：通过提问、互动或练习激发参与感\n- 汇报技巧：\n  - 语速适中，注重语气和肢体语言\n  - 注意听众反应，适时调整节奏和内容深度\n\n### 4. 挑战杯竞赛\n\n我没学会（大哭\n\n### 通用注意事项\n\n- 排版与设计：\n\n  - 每页内容不要过多，控制在1-2分钟内讲完\n  - 避免花哨背景，确保简洁和专业\n  \n- 时间管理：\n\n  - 提前排练并计时，预留答疑时间\n\n- 表达技巧：\n\n  - 语速适中，语言清晰，确保观众能跟上节奏\n- 保持自信，避免频繁低头看稿\n","tags":["misc"]},{"title":"信安数基复习笔记","url":"/2025/01/08/信安数基复习笔记/","content":"\n![](信安数基复习笔记\\27446199_6cdb64b4-3ac0-4581-a465-b43263aa54a3.png)\n\n<!--more-->\n\n### 往年期末考试题目\n\n![](信安数基复习笔记\\image-20250107164952728.png)\n\n$(x,y)=(3y+4z,y)=(4z,y)$\n\n故A正确\n\n![](信安数基复习笔记\\image-20250107165514398.png)\n\n简化剩余系：与模数互素且不同余\n\n与15不互素：$1,3,5,6,9,10,12,15$\n\n故一个简化剩余系为 $\\{2,4,7,8,11,13,14\\}$\n\n也可以写作 $\\{7,8,11,13,14,17,19\\}$\n\n故C正确\n\n![](信安数基复习笔记\\image-20250107170442079.png)\n\nB. 整数模素数剩余类环都是域，故B正确\n\nC. 整环的定义是没有零因子，3*4=12是0，故C错误\n\n![](信安数基复习笔记\\image-20250107171324523.png)\n\n原根存在的充要条件 $m=p^k$ 或 $2p^k$，其中 $p$ 为素数，$k\\ge1$\n\n故选D\n\n![](信安数基复习笔记\\image-20250107171926343.png)\n\nA. pa=0，错误\n\nB. 费马小定理是 $a^{p-1}=1$，错误\n\nC. 正确\n\n![](信安数基复习笔记\\image-20250107172433174.png)\n\n$7x$\n\n![](信安数基复习笔记\\image-20250107172457957.png)\n\n$x$的原根数为$\\phi(\\phi(x))$\n\n22\n\n![](信安数基复习笔记\\image-20250107172810022.png)\n\n85=5*17\n\n$x^2\\equiv1\\mod5$ 和 $x^2\\equiv1\\mod17$ 的解数之和\n\n分别有两个解（分别是$(1,2)$和$(1,4)$）\n\n故总共有四个解\n\n![](信安数基复习笔记\\image-20250107173659148.png)\n\n$|G/H|=\\frac{|G|}{|H|}=3$\n\n![](信安数基复习笔记\\image-20250107173851083.png)\n\n$GF(16)$是一个阶为16的有限域，则$GF(16)^*$是一个阶为$15$的循环群\n\n在一个循环群中，任意元素的阶是$15$的正约数。也就是说，$GF(16)$中非零元素的可能乘法阶是$15$的正约数\n\n故可能取值为$\\{3,5,15\\}$\n\n![](信安数基复习笔记\\image-20250107174825860.png)\n$$\n\\begin{align}\n&4^{173}\\\\\n=&16^{86}*4\\\\\n=&43^{43}*4\\\\\n=&3^{21}*43*4\\\\\n=&9^{10}*3*43*4\\\\\n=&10^5*3*43*4\\\\\n=&29^2*10*3*43*4\\\\\n=&40\n\\end{align}\n$$\n![](信安数基复习笔记\\image-20250107180648221.png)\n\n第一步，计算所有模数的乘积$M$\n\n$M=m_1*m_2*m_3=140$\n\n第二步，计算每个模数对应部分的乘积$M_i$\n\n$M_1=35, M_2=28, M_3=20$\n\n第三步，计算$M_i$在$m_i$下的逆元\n\n$inv_1=3, inv_2=2, inv_3=6$\n\n第四步，计算新的$x$\n\n$x=\\sum(a_i*M_i*inv_i)\\%M=17$\n\n通式：余数乘以模余乘以其逆\n\n![](信安数基复习笔记\\image-20250107194431327.png)\n\n(1) $(\\frac{40}{71})=(\\frac{40\\%71}{71})=(\\frac{40}{71})=40^\\frac{71-1}2\\mod71=40^{35}\\mod71$\n$$\n\\begin{align}\n&40^{35}\\\\\n=&40*38^{17}\\\\\n=&40*38*25^8\\\\\n=&40*38*8^4\\\\\n=&40*38*4096\\\\\n=&40*38*49\\\\\n=&1\n\\end{align}\n$$\n\n$p=71$ 满足 $p=4k+3$\n\n故 $x=\\pm a^\\frac{p+1}4=\\pm40^{18}\\mod71=18$或$53$\n\n(2) $(\\frac3{119})=(\\frac37)(\\frac3{17})$\n\n$(\\frac37)=3^\\frac{7-1}2\\mod7=1$\n\n$(\\frac3{17})=3^\\frac{17-1}2\\mod17=-1$\n\n故 $(\\frac3{119})=-1$，$x^2≡3\\mod119$ 无解\n\n![](信安数基复习笔记\\image-20250107203358255.png)\n\n(1) 封闭性：如果$A,B\\in GL(3,Q)$，则$AB\\in GL(3,Q)$；由于$det(AB)=det(A)det(B)\\neq0$，且$AB$元素皆为有理数，因此$AB\\in GL(3,Q)$\n\n结合律：矩阵乘法满足结合律，即 $(AB)C=A(BC)$\n\n单位元存在：单位矩阵$I_3\\in GL(3,Q)$，且对任意$A\\in GL(3,Q)$，有$AI_3=I_3A=A$\n\n逆元存在：对于$A\\in GL(3,Q)$，其逆矩阵$A^{-1}\\in GL(3,Q)$，因为$det(A^{-1})=\\frac1{det(A)}\\neq0$\n\n证明$GL(3,Q)$是非交换群，找到反例即可\n\n![](信安数基复习笔记\\image-20250107204718561.png)\n\n显然$AB\\neq BA$，故$GL(3,Q)$是非交换群\n\n(2) 定义$SL(3,Q)=\\{A\\in GL(3,Q)|det(A)=1\\}$，正规子群需要验证两点\n\n$SL(3,Q)$是子群\n\n封闭性：如果$A,B\\in SL(3,Q)$，则$AB\\in SL(3,Q)$；由于$det(AB)=det(A)det(B)=1$，因此$AB\\in SL(3,Q)$\n\n结合律：矩阵乘法满足结合律，即 $(AB)C=A(BC)$\n\n单位元：单位矩阵$I_3\\in SL(3,Q)$，因为$det(I_3)=1$\n\n逆元：对于$A\\in SL(3,Q)$，其逆矩阵$A^{-1}\\in SL(3,Q)$，因为$det(A^{-1})=\\frac1{det(A)}=1$\n\n因此$SL(3,Q)$是子群\n\n$SL(3,Q)$是正规子群\n\n对任意$A\\in GL(3,Q),B\\in SL(3,Q)$\n\n$det(ABA^{-1})=det(A)*1*\\frac1{det(A)}=1$\n\n因此 $AB^A{-1}\\in SL(3,Q)$\n\n故$SL(3,Q)$是$GL(3,Q)$的正规子群\n\n(3)markdown学不会了（恼\n\n![](信安数基复习笔记\\image-20250107205742872.png)\n\n![](信安数基复习笔记\\image-20250107205811614.png)\n\n(1) 多项式 $m(x)\\in GF(2)[x]$是不可约的，当前仅当它不可分解为两个低阶非常数多项式的积\n\n![](信安数基复习笔记\\image-20250107211228913.png)\n\n![](信安数基复习笔记\\image-20250107211326507.png)\n\n### 拓欧算法\n\n(a,b)=(b,a%b)\n\n### 快速幂\n\n### CRT\n\n### 二次剩余\n\n### 原根\n\n求原根：\n\n1. 确定是否存在原根\n2. 计算$\\phi(n)$\n3. 计算$\\phi(n)$的所有素因子\n4. 检验原根，当前仅当对$\\phi(n)$的每个素因子都满足 $g^\\frac{\\phi(n)}p\\neq1\\mod n$\n","tags":["mathematics"]},{"title":"IND-CCA2下的CP-ABE安全","url":"/2025/01/07/IND-CCA2下的CP-ABE安全/","content":"\n今天阅读前置知识，搞了半天终于明白了IND-CCA2下的CP-ABE安全，记录一下\n\n<!--more-->\n\n---\n\n论文名称：Fine-Grained and Controlled Rewriting in Blockchains: Chameleon-Hashing Gone Attribute-Based\n\n相关内容：\n\n![](IND-CCA2下的CP-ABE安全\\image-20250107152801165.png)\n\n![](IND-CCA2下的CP-ABE安全\\image-20250107152841979.png)\n\n我们只看核心部分\n\n![](IND-CCA2下的CP-ABE安全\\image-20250107152931245.png)\n\n我们大致划分为三个部分\n\n第一部分，初始化，不再赘述\n\n第二部分，攻击者交互阶段，攻击者$\\mathcal{A}$选择任意属性集合$\\mathbb{S}$进行请求，模拟器会这些请求的属性集合加入全局集合$S$，并生成与属性集合$\\mathbb{S}$相对应的私钥$ssk$，将请求编号及生成的密钥记录到$Q$中\n\n第三部分，挑战阶段，攻击者$\\mathcal{A}$提供属性集合$A^*$（$A^*\\cap S=\\emptyset$），模拟器随机选择$b\\in\\{0,1\\}$，使用属性集合$A^*$对应的私钥加密$m_b$，将密文$c_b$提供给$\\mathcal{A}$ \n\n如果攻击者$\\mathcal{A}$能够通过交互获得的信息区分密文中加密的是$m_0$还是$m_1$，且成功的概率显著大于$\\frac12$，则认为攻击者成功，算法被攻破，否则认为该加密方案满足IND-CCA2安全性\n\n","tags":["Crypto"]},{"title":"数据结构不是有手就行（陈述句","url":"/2025/01/06/数据结构不是有手就行（陈述句/","content":"\n数据结构没有很多题目，所以只能通过知识点为索引进行复习\n\n知识点来源是学长给的文档和期中考试题目\n\n<!--more-->\n\n---\n\n### 树的遍历\n\n前序遍历 根->左子树->右子树\n中序遍历 左子树->根->右子树\n后序遍历 左子树->右子树->根\n\n差异：访问到根节点的条件\n\n#### 已知先序序列和中序序列求树\n\n![](数据结构不是有手就行（陈述句\\image-20250106142613576.png)\n\n解题步骤：\n\n1. 从前序遍历的第一个节点找到根节点\n2. 在中序遍历中找到这个根节点，根节点左侧的部分是左子树，右侧的部分是右子树\n3. 根据分割出的左右子树，在前序遍历中找到相应的部分（保持顺序），递归重复前两个步骤直到完成树的构造\n\n#### 已知中序序列和后序序列求树\n\n解题步骤：\n\n1. 从后序遍历的最后一个节点找到根节点\n2. 在中序遍历中找到这个根节点，根节点左侧是左子树，右侧部分是右子树\n3. 根据分割出的左右子树，在后序遍历中找到相应的部分（保持顺序），递归重复前两个步骤直到完成树的构造\n\n#### 后序线索二叉树\n\n后序线索二叉树是一种特殊的二叉树，它在普通二叉树的基-础上，通过为二叉树的结点增加“线索指针”来优化树的遍历效率\n这种线索指针的引入，使得二叉树的后序遍历可以在不使用递归或栈的情况下完成\n\n简单的来说，线索化就是把X序序列转成双向链表的形式（如果已有一条边，则无需返程）\n\n![](数据结构不是有手就行（陈述句\\image-20250106150044907.png)\n\n### 哈夫曼树和哈夫曼编码\n\n哈夫曼树是一种带权路径长度最短的二叉树，构造基于贪心算法\n\n其中，权值为节点的频率（或权重），路径长度为根节点到某个节点的路径中边的数量，带权路径长度为路径长度乘以节点的权值\n\n哈夫曼树的目标是让带权路径长度（WPL）的总和最小\n\n特定：没有任何一个权值小的节点比权值大的节点更靠近根的位置\n\n#### 树的构造\n\n1. 初始化：将每个权值看作一个独立的节点，每个节点都是一棵单结点树\n2. 选择最小的两个权值：从当且森林中找到两个权值最小的树作为左右子树构造一个新树，新树的根节点权值为这两棵树权值之和，删除旧树\n3. 重复步骤，直到森林中只剩下一棵树\n\n#### 哈夫曼编码\n\n是一种可变长度的编码方案，基于哈夫曼树生成\n\n1. 无前缀性：没有一个编码是另一个编码的前缀，确保了解码的唯一性\n2. 长度与频率相关：频率高的字符使用较短的编码，频率低的字符使用较长的编码\n3. 权重分配：从根节点开始，左子树路径赋值为0，右子树路径赋值为1；到达叶子结点时，记录从根到该节点的编码\n\n例题：某通讯系统只使用8种字符a、b、c、d、e、f、g、h，其使用频率分别为0.05, 0.29, 0.07, 0.08, 0.14, 0.23, 0.03, 0.11，利用赫夫曼树设计一种前缀编码\n\n![](数据结构不是有手就行（陈述句\\image-20250106154901650.png)\n\n```\na: 0110\nb: 10\nc: 1110\nd: 1111\ne: 110\nf: 00\ng: 0111\nh: 010\n```\n\n保证所有节点都是叶节点即可避免前缀冲突性（每个字符路径唯一，而且没有叶节点在另一个叶节点路径上）\n\n### 图相关\n\n邻接矩阵：就是个二维数据\n\n邻接表：就是个链表\n\n极大联通子图（强联通分量）：该子图是G连通子图，将G的任何不在该子图中的顶点加入，子图不再连通；用于缩点\n\n极小联通子图：该子图是G 的连通子图，在该子图中删除任何一条边，子图不再连通；用于生成树\n\n强连通图：任意两个点之间有双向可抵达的通路\n\n### 最小生成树\n\n#### Prim算法\n\n选择已知树上的最小边并加入\n\n1. 从任意一个顶点开始，将它加入生成树\n2. 每次选择一条权值最小、且值连接生成树中顶点与生成树外顶点的边\n3. 重复步骤2，直到生成树包含图中的所有顶点\n\n#### Kruskal算法\n\n选择最小边并判断是否成环\n\n1. 将所有的边按边权从小到大排序\n2. 从权值最小的开始，逐条简称该边是否成环（并查集）\n   - 如果不成环，则加入生成树\n   - 如果形成环，则跳过这条边\n3. 重复步骤2，直到生成树包含n-1条边\n\n### 二叉排序树 \n\n见[二叉平衡树](https://coperlm.github.io/2025/01/06/红黑树学习/)一章\n\n### 排序\n\n这么难我都看不懂\n","tags":["cs"]},{"title":"红黑树学习","url":"/2025/01/06/红黑树学习/","content":"\nBST 二叉查找树 -> AVL 平衡二叉树 -> RBT 红黑树\n\n<!--more-->\n\n---\n\n### 二叉查找树\n\n1. 左子树上所有结点的值均小于或等于它的根结点的值\n2. 右子树上所有结点的值均大于或等于它的根结点的值\n3. 左、右子树也分别为二叉排序树\n\n理想情况下是这样子\n\n![](红黑树学习\\8555d3dc4ccc9c65bd59977ff14397ee.png)\n\n存在的问题：如果BST树的节点正好从大到小的插入，此时树的结构也类似于链表结构，这时候的查询或写入耗时与链表相同，最坏时间复杂为线性\n\n这时候就有了平衡二叉树AVL（发明者名字简写）\n\nAVL也属于二叉搜索树的一种，与其不同的是AVL通过机制保证其自身的平衡\n\n### 平衡二叉树\n\n1. AVL树是最先发明的自平衡二叉查找树\n2. 在AVL树中任何节点的两个子树的高度最大差别为1，所以它也被称为高度平衡树\n3. 增加和删除可能需要通过一次或多次树旋转来重新平衡这个树\n\n平衡二叉树的特性\n\n1. 对于任何一颗子树的root根结点而言，它的左子树任何节点的key一定比root小，而右子树任何节点的key 一定比root大\n\n2. 对于AVL树而言，其中任何子树仍然是AVL树\n3. 每个节点的左右子节点的高度之差的绝对值最多为1\n\n也就是说，AVL树=BST树+自平衡功能\n\n具体怎么旋转？\n\n记住这四张图就好\n\n![](红黑树学习\\82f3502b5be24051bd7688b1e0f36135.png)\n\n![](红黑树学习\\dea622e0576539552458e3afcffb1f59.png)\n\n![](红黑树学习\\a50f45a2c27e4f330603481789d5234c.png)\n\n![](红黑树学习\\24326f9fded29e6f566738f86525d468.png)\n\n那如何删除呢？\n\n1. 叶子节点直接删除，判断平衡进行调整直到根节点\n2. 只有左（或右）子树，节点删除，以左（或右）子树替代，判断平衡进行调整直到根节点\n3. 删除的节点既有左子树又有右子树，找到其前驱节点（左子树中最大值的节点）或者后驱节点（右子树中最小值的节点）将其替换，判断平衡进行调整直到根节点\n\n缺点：\n\n由于AVL树必须保证左右子树平衡，Max(最大树高-最小树高) <= 1\n\n所以在插入的时候很容易出现不平衡的情况，一旦这样，就需要进行旋转以求达到平衡\n\n正是由于这种严格的平衡条件，导致AVL需要花大量时间在调整上，故AVL树一般使用场景在于查询场景（而不是增加删除频繁的场景）\n\n红黑树：牺牲了部分平衡性，以换取插入/删除操作时较少的旋转操作，整体来说性能要优于AVL树\n\n### 红黑树\n\n1. 节点非黑即红（颜色属性）\n2. 根节点一定是黑色（根属性）\n3. 叶子节点（NIL）一定是黑色（叶子属性）\n4. 每个红色节点的两个子节点都为黑色（红色属性）\n5. 从任一节点到其每个叶子的所有路径，都包含相同数目的黑色节点（平衡属性）\n\n![](红黑树学习\\20200901114718174.png)\n\nRBT使用空间去换时间，在AVL的节点上，增加了**颜色属性**的数据，换取后面平衡操作的次数减少\n\n红黑树并不是一棵平衡二叉树（见图），但是基于`性质5`，从任一节点到每个叶子的所有路径都包含相同数目的黑色节点，故 以黑色节点的高度作为约束，RBT的左子树和右子树的层数是相同的\n\n红黑树的平衡称为**黑色完美平衡**\n\n恢复平衡的三个操作：变色，左旋，右旋\n\n如何维护红黑树：\n\n- 初始状态只有一个黑色节点（同时是根节点和叶子节点）\n\n- 插入新节点：\n\n  因为父节点为黑色的概率较大，默认插入新节点为红色可以避免颜色冲突\n\n  1. 插入节点的Key已经存在：更新当前节点的值为插入节点的值，颜色不变![](红黑树学习\\20210412094118977.png)\n\n  2. 插入节点的父节点为黑色：由于节点默认红色，所以可以直接插入而无需做自平衡\n\n     ![](红黑树学习\\20210412094724987.png)\n\n  3. 插入节点的父节点为红色\n\n     分为两种情况：叔叔节点是红色还是黑色\n\n     如果叔叔节点是红色，则如图变换，再以点P为基点进行自平衡\n\n     ![](红黑树学习\\2021041210371914.png)\n\n     如果叔叔节点是黑色，如图变换即可\n\n     ![在这里插入图片描述](红黑树学习\\watermark,type_ZmFuZ3poZW5naGVpdG)\n\n     ![在这里插入图片描述](红黑树学习\\20210412153954767.png)\n\n     反方向同理\n\n实验代码\n\n```cpp\n#include <iostream>\n#include <cstdlib>\nusing namespace std;\n\n// 颜色枚举，0 表示黑色，1 表示红色\nenum Color { BLACK, RED };\n\n// 节点结构体\nstruct Node {\n    int data;          // 节点值\n    Color color;       // 节点颜色\n    Node* left;        // 左子节点\n    Node* right;       // 右子节点\n    Node* parent;      // 父节点\n};\n\n// 全局变量定义\nNode* root = nullptr;  // 红黑树根节点\nNode* NIL = nullptr;   // 哨兵节点\n\n// 初始化哨兵节点\nvoid initializeNILNode() {\n    NIL = new Node;\n    NIL->color = BLACK;\n    NIL->left = NIL->right = NIL->parent = nullptr;\n}\n\n// 创建一个新节点\nNode* createNode(int data) {\n    Node* newNode = new Node;\n    newNode->data = data;\n    newNode->color = RED; // 新插入节点默认为红色\n    newNode->left = newNode->right = newNode->parent = NIL;\n    return newNode;\n}\n\n// 左旋操作\nvoid leftRotate(Node*& root, Node* x) {\n    Node* y = x->right;       // 设置 y 为 x 的右子节点\n    x->right = y->left;       // 将 y 的左子树移为 x 的右子树\n    if (y->left != NIL) {\n        y->left->parent = x;  // 更新父指针\n    }\n    y->parent = x->parent;    // 将 y 的父节点指向 x 的父节点\n    if (x->parent == NIL) {\n        root = y;             // 如果 x 是根节点，更新根节点\n    } else if (x == x->parent->left) {\n        x->parent->left = y;  // x 是左子节点\n    } else {\n        x->parent->right = y; // x 是右子节点\n    }\n    y->left = x;              // 将 x 设置为 y 的左子节点\n    x->parent = y;            // 更新 x 的父指针\n}\n\n// 右旋操作\nvoid rightRotate(Node*& root, Node* y) {\n    Node* x = y->left;        // 设置 x 为 y 的左子节点\n    y->left = x->right;       // 将 x 的右子树移为 y 的左子树\n    if (x->right != NIL) {\n        x->right->parent = y; // 更新父指针\n    }\n    x->parent = y->parent;    // 将 x 的父节点指向 y 的父节点\n    if (y->parent == NIL) {\n        root = x;             // 如果 y 是根节点，更新根节点\n    } else if (y == y->parent->left) {\n        y->parent->left = x;  // y 是左子节点\n    } else {\n        y->parent->right = x; // y 是右子节点\n    }\n    x->right = y;             // 将 y 设置为 x 的右子节点\n    y->parent = x;            // 更新 y 的父指针\n}\n\n// 修复插入导致的红黑树性质破坏\nvoid fixInsert(Node*& root, Node* z) {\n    while (z->parent->color == RED) { // 父节点是红色时可能违反性质\n        if (z->parent == z->parent->parent->left) { // 父节点是祖父节点的左子节点\n            Node* y = z->parent->parent->right; // 叔叔节点\n            if (y->color == RED) { // 叔叔节点是红色\n                z->parent->color = BLACK;     // 父节点变黑\n                y->color = BLACK;            // 叔叔节点变黑\n                z->parent->parent->color = RED; // 祖父节点变红\n                z = z->parent->parent;       // 将 z 移动到祖父节点继续调整\n            } else {\n                if (z == z->parent->right) { // z 是父节点的右子节点\n                    z = z->parent;\n                    leftRotate(root, z);    // 左旋转父节点\n                }\n                z->parent->color = BLACK;    // 父节点变黑\n                z->parent->parent->color = RED; // 祖父节点变红\n                rightRotate(root, z->parent->parent); // 右旋祖父节点\n            }\n        } else { // 父节点是祖父节点的右子节点，逻辑对称\n            Node* y = z->parent->parent->left; // 叔叔节点\n            if (y->color == RED) {\n                z->parent->color = BLACK;\n                y->color = BLACK;\n                z->parent->parent->color = RED;\n                z = z->parent->parent;\n            } else {\n                if (z == z->parent->left) {\n                    z = z->parent;\n                    rightRotate(root, z);\n                }\n                z->parent->color = BLACK;\n                z->parent->parent->color = RED;\n                leftRotate(root, z->parent->parent);\n            }\n        }\n    }\n    root->color = BLACK; // 根节点始终是黑色\n}\n\n// 插入一个新节点到红黑树\nvoid insert(int data) {\n    Node* z = createNode(data);\n    Node* y = NIL;       // 用于记录 z 的父节点\n    Node* x = root;      // 从根节点开始搜索插入位置\n\n    while (x != NIL) {   // 找到插入位置\n        y = x;\n        if (z->data < x->data) {\n            x = x->left;\n        } else {\n            x = x->right;\n        }\n    }\n\n    z->parent = y;       // 设置 z 的父节点\n    if (y == NIL) {      // 树为空，z 为根节点\n        root = z;\n    } else if (z->data < y->data) {\n        y->left = z;\n    } else {\n        y->right = z;\n    }\n\n    fixInsert(root, z);  // 修复红黑树性质\n}\n\n// 中序遍历\nvoid inorder(Node* root) {\n    if (root != NIL) {\n        inorder(root->left);\n        cout << root->data << \" \";\n        inorder(root->right);\n    }\n}\n\n// 主函数\nint main() {\n    initializeNILNode(); // 初始化哨兵节点\n\n    // 插入节点\n    insert(10);\n    insert(20);\n    insert(15);\n    insert(25);\n    insert(30);\n    insert(5);\n\n    // 中序遍历输出\n    cout << \"Inorder traversal: \";\n    inorder(root);\n    cout << endl;\n\n    return 0;\n}\n```\n\n---\n\n### References\n\n[红黑树（图解+秒懂+史上最全）](https://www.cnblogs.com/crazymakercircle/p/16320430.html)\n\n[【动态图文详解，史上最易懂的红黑树讲解】手写红黑树（Red Black Tree）](https://cloud.tencent.com/developer/article/1739709)","tags":["cs"]},{"title":"计算机网络有手就行诶我手呢","url":"/2025/01/06/计算机网络有手就行诶我手呢/","content":"\n计算机网络刷题记录\n\n<!--more-->\n\n---\n\n![](计算机网络有手就行诶我手呢\\image-20250104213452667.png)\n\n考虑电路交换的三个阶段\n\n建立连接：$s$（题干给出）\n\n数据传输：$\\frac{x}{b}$（报文长度除以数据率就是所有报文都传输过去所需要的时间）\n\n连接释放：$kd$（连接释放的报文直接发送，从发送端到接收端所需要的时间为链路段数乘以每段的传播时延）\n\n分组交换\n\n报文如果直接传输，需要的代价是 $\\frac{x}{b}$\n\n但是第一个报文未接收完成，后面的节点都是不在工作的，所以这里的代价为空闲的链路数乘以分组除以数据率 $(k-1)\\frac{p}b$\n\n加上个倾斜，也就是加上 $kd$\n\n![](计算机网络有手就行诶我手呢\\3f3ffb681c90ff1f63f56a4314e8beb.png)\n\n要使分组交换比电路交换快，则：\n$$\ns+\\frac{x}b+kd>\\frac{x}b+(k-1)\\frac{p}b+kd\n$$\n即 $s>(k-1)\\frac{p}b$\n\n![](计算机网络有手就行诶我手呢\\f0876362669ece5b4c0fb1ad5016f198.png)\n\n![](计算机网络有手就行诶我手呢\\image-20250104220123260.png)\n\n考虑原始的状态 $\\frac{x}b+(k-1)\\frac{p}b+kd$\n\n没有传播时延，再考虑分组控制信息固定长度，则 $\\frac{x}p\\cdot\\frac{p+h}b+(k-1)\\frac{p+h}b$\n\n整理得 $\\frac{k-1}b p+\\frac{xh}bp^{-1}+\\frac{x+(k-1)h}b$\n\n函数值最大，则 $\\frac{k-1}b p=\\frac{xh}bp^{-1}$\n\n解得 $p=\\sqrt{\\frac{xh}{k-1}}$\n\n![](计算机网络有手就行诶我手呢\\image-20250105120925533.png)\n\n发送时延=数据长度/数据发送速率\n\n传播时延=距离/物理传播速率\n\n(1) 发送时延=$\\frac{10^7bit}{100*10^3b/s}=1*10^2s$ ，传播时延=$\\frac{1000*10^3m}{2*10^8m/s}=5*10^{-3}s$\n\n(2) 发送时延=$\\frac{10^3bit}{1*10^9b/s}=1*10^{-6}s$ ，传播时延=$\\frac{1000*10^3m}{2*10^8m/s}=5*10^{-3}s$\n\n![](计算机网络有手就行诶我手呢\\image-20250105121741500.png)\n\n正在传输的比特数=传播时延*数据率\n\n传播时延=媒体长度/传播速度\n\n(1) 传输时延=$\\frac{1*10^{-1}m}{2*10^8m/s}=5*10^{-10}s$\n\n$1Mb/s:\\quad 5*10^{-10}s*1*10^6b/s=5*10^{-4}bit$\n\n$1Gb/s:\\quad 5*10^{-10}s*1*10^9b/s=5*10^{-1}bit$\n\n(2) 传输时延=$\\frac{100m}{2*10^8m/s}=5*10^{-7}s$\n\n$1Mb/s:\\quad 5*10^{-7}s*1*10^6b/s=5*10^{-1}bit$\n\n$1Gb/s:\\quad 5*10^{-7}s*1*10^9b/s=5*10^{2}bit$\n\n(3) 传输时延=$\\frac{100*10^3m}{2*10^8m/s}=5*10^{-4}s$\n\n$1Mb/s:\\quad 5*10^{-4}s*1*10^6b/s=5*10^{2}bit$\n\n$1Gb/s:\\quad 5*10^{-4}s*1*10^9b/s=5*10^{5}bit$\n\n(4) 传输时延=$\\frac{5000*10^3m}{2*10^8m/s}=2.5*10^{-2}s$\n\n$1Mb/s:\\quad 2.5*10^{-2}s*1*10^6b/s=2.5*10^{4}bit$\n\n$1Gb/s:\\quad 2.5*10^{-2}s*1*10^9b/s=2.5*10^{7}bit$\n\n![](计算机网络有手就行诶我手呢\\image-20250105123613753.png)\n\n由题意 $2W=20000$\n\n码元变为16，则数据率$=2W\\log_216=80000bit/s$\n\n![](计算机网络有手就行诶我手呢\\image-20250105135446625.png)+\n\n最长工作距离$=\\frac{20dB}{0.7dB/km}=\\frac{200}7km$\n\n衰减$=\\frac{20dB}{100km}=0.2dB/km$\n\n![](计算机网络有手就行诶我手呢\\image-20250105135804557.png)\n\n$\\frac{2*10^8}{1200*10^{-9}}=\\frac53*10^{14}Hz$\n\n![](计算机网络有手就行诶我手呢\\image-20250105140242576.png)\n\n这种题，直接逐项相加即可\n\n$S\\cdot A=\\frac18\\sum_{i=1}^8S_iA_i=\\frac{1-1+3+1-1+3+1+1}8=1$\n\n$S\\cdot B=\\frac18\\sum_{i=1}^8S_iB_i=\\frac{1-1-3-1-1-3+1-1}8=-1$\n\n$S\\cdot C=\\frac18\\sum_{i=1}^8S_iC_i=\\frac{1+1+3+1-1-3-1-1}8=0$\n\n$S\\cdot D=\\frac18\\sum_{i=1}^8S_iD_i=\\frac{1+1+3-1+1+3+1-1}8=1$\n\n故AD发送了数据1，B发送了数据0，C未发送数据\n\n![](计算机网络有手就行诶我手呢\\image-20250105144336881.png)\n\n需要发送的数据 `1101011011`，补齐位数为 `11010110110000`\n\n校验多项式 `10011`\n\n做模2减法（逐位异或），得到余数 `0111`\n\n![](计算机网络有手就行诶我手呢\\image-20250105151857166.png)\n\n需要发送的数据 `101110`，补齐位数为 `101110000`\n\n校验多项式 `1001`\n\n做模2减法（逐位异或），得到余数 `011`\n\n![](计算机网络有手就行诶我手呢\\image-20250105152505594.png)\n\nPPP协议中 0x7D 是转义字符\n\n- 0x7D本身表示转义字符\n- 如果数据中有0x7E（帧的边界字符），则它也会被转义成0x7D 0x5E\n- 如果数据中有0x7D，则它会被转义成0x7D 0x5D\n\n![](计算机网络有手就行诶我手呢\\image-20250105154132283.png)\n\n![](计算机网络有手就行诶我手呢\\image-20250105154523838.png)\n\n原文：0110111111111100\n\n填充后：011011111011111000\n\n填充后：0001110111110111110110\n\n原文：00011101111111111110\n\n![](计算机网络有手就行诶我手呢\\image-20250105154935825.png)\n\n单程传播时延 $\\tau=\\frac{1*10^3m}{2*10^8m/s}=5*10^{-6}s$\n\n往返传播时延 $2\\tau=10*10^{-6}s$\n\n$2\\tau$ 即为争用期。\n为了能够按照CSMA/CD 工作，最小帧的发送时间即为争用期$10\\mu s$发送的数据量\n\n$1*10^9b/s*10*10^{-6}s=1*10^4b=1250B$\n\n![](计算机网络有手就行诶我手呢\\image-20250105161041795.png)\n\n等待时间=$2\\tau*r$\n\n10Mb/s的以太网争用期为$51.2\\mu s$，则等待时间=5.12ms\n\n100Mb/s的以太网争用期为$5.12\\mu s$，则等待时间=0.512ms\n\n![](计算机网络有手就行诶我手呢\\image-20250105161400348.png)\n\n第三章还剩下一些，暂时丢掉了~\n\n![](计算机网络有手就行诶我手呢\\image-20250105162027793.png)\n\n01000101 00000000\n00000000 00011100\n00000000 00000001\n00000000 00000000\n00000100 00010001\n00000000 00000000\n00001010 00001100\n00001110 00000101\n00001100 00000110\n00000111 00001001\n$\\rightarrow$\n01003532 00023414\n01110100 01001110\n$\\rightarrow$取反码\n10001011 10110001\n\n![](计算机网络有手就行诶我手呢\\image-20250105164451421.png)\n\n45 00\n00 1C\n00 01\n00 00\n04 11\n00 00\n0A 0C\n0E 05\n0C 06\n07 09\n$\\rightarrow$\n74 4E\n\n十六进制太难算了\n\n![](计算机网络有手就行诶我手呢\\image-20250105164949635.png)\n\n第二个局域网所能传送的最长数据帧中的数据部分只有1200bit，即每个IP数据片的数据部分不超过1200-160(bit)，由于片偏移是以8字节即64bit为单位，所以IP数据片的数据部分不超过1024bit\n\n故3200bit的报文要分4个数据片，所以第二个局域网向上传送的比特数等于(3200+4*160)=3840bit\n\n![](计算机网络有手就行诶我手呢\\image-20250105165917792.png)\n\n128.96.39.10属于子网128.96.39.0~128.96.39.127，故下一跳接口为m0\n\n128.96.30.12属于子网128.96.39.0~128.96.39.127，故下一跳接口为R2\n\n128.96.40.151不在子网128.96.40.0~128.96.40.127，故使用默认路由R4\n\n192.4.153.17属于子网192.4.153.0~192.4.153.127，故下一跳接口为R3\n\n192.4.153.90不在子网192.4.153.0~192.4.153.63，故使用默认路由R4\n\n![](计算机网络有手就行诶我手呢\\image-20250105195111766.png)\n\nIP数据包固定首部长度即为20字节，剩下总共3980字节\n\n分成最大数据长度为1500字节，去掉首部长度为1480字节\n\n3980/1480>2，故划分为三个数据报片\n\n第一片：数据字段长度为1480，片偏移为0，MF为1\n\n第二片：数据字段长度为1480，片偏移为185，MF为1\n\n第三片：数据字段长度为1020，片偏移为370，MF为0\n\n![](计算机网络有手就行诶我手呢\\image-20250105201350480.png)\n\n132:10000100\n133:10000101\n134:10000110\n135:10000111\n\n故共同前缀为 10000100(132)，总共22位\n\n最大可能聚合为 `212.56.132.0/22`\n\n![](计算机网络有手就行诶我手呢\\image-20250105201719096.png)\n\n后者包含于前者，因为前面的序列都相同\n\n![](计算机网络有手就行诶我手呢\\image-20250105201851483.png)\n\n一眼是(1)哇\n\n![](计算机网络有手就行诶我手呢\\image-20250105201924852.png)\n\n地址0/4与任意IPv4地址前四位为0000的地址都匹配\n\n![](计算机网络有手就行诶我手呢\\image-20250105202103576.png)\n\n只有前11位相同（截止到第二位的16，即第12位）\n\n![](计算机网络有手就行诶我手呢\\image-20250105202256152.png)\n\n2 4 11 30\n\n![](计算机网络有手就行诶我手呢\\image-20250105202740623.png)\n\n20=8+8+4\n\n84写成二进制是01010100，取前四位为0101xxxx\n\n最小01010000，即为80；最大01011111，即为95\n\n最小地址为 140.120.80.00，最大地址为 140.120.95.255\n\n地址掩码为 255.255.240.0\n\n地址块中共有地址 $2^{32-20}=2^{12}=4096$ 个\n\n相当于C类地址 $2^{12}/2^{8}=2^4=16$ 个\n\n![](计算机网络有手就行诶我手呢\\image-20250105203750959.png)\n\n第一步：下一跳全部改为C，距离+1\n\n第二步：和原有的进行对比，选择相对较少的那个\n\n![](计算机网络有手就行诶我手呢\\image-20250105203929060.png)\n\n![](计算机网络有手就行诶我手呢\\image-20250105204005784.png)\n\n29:00011101\n32:00100000\n\n地址数为 256*4=1024\n\n虽然这两个地址是连续的地址块，但无法写成前缀的形式。\n\n![](计算机网络有手就行诶我手呢\\image-20250105204300166.png)\n\n网络掩码：255.255.255.224\n\n网络前缀长度：27\n\n网络后缀长度：32-27=5\n\n![](计算机网络有手就行诶我手呢\\image-20250105204814439.png)\n\n地址数：$2^5=32$ 个\n\n首地址：`167.199.170.64`\n\n末地址：`167.199.170.95`\n\n![](计算机网络有手就行诶我手呢\\image-20250105205006450.png)\n\n子网N1：14.24.74.0/25\n子网N2：14.24.74.128/26\n子网N3：14.24.74.196/28\n\n![](计算机网络有手就行诶我手呢\\image-20250105205232516.png)\n\n都匹配，根据最长前缀匹配原则，选择路由3\n\n![](计算机网络有手就行诶我手呢\\image-20250105205449048.png)\n\n11001000 00111000 10101000 00000000/21\n\n$\\frac{2^{32-21}}{2^8}=2^3=8$\n\n![](计算机网络有手就行诶我手呢\\image-20250105205738010.png)\n\n::F53:6382:AB00:67DB:BB27:7332\n::4D:ABCD\n::AF36:7328:0000:87AA:0398\n2819:00AF::35:0CB2:B271\n\n![](计算机网络有手就行诶我手呢\\image-20250105210126907.png)\n\n0000:0000:0000:0000:0000:0000:0000:0000\n0000:00AA:0000:0000:0000:0000:0000:0000\n0000:1234 :0000:0000:0000:0000:0000:0003\n0123:0000:0000:0000:0000:0000:0001:0002\n\n![](计算机网络有手就行诶我手呢\\image-20250105211333272.png)\n\nUDP的首部有8字节，故总共8200字节\n\nIP数据包的最大长度为1500字节，首部20字节，故应当分为六片\n\n前五段数据字段的长度为1480字节，第六片为800字节\n\n片偏移为0,185,370,555,740,925\n\n![](计算机网络有手就行诶我手呢\\image-20250105211342900.png)\n\nUDP首部分别是 源端口 目的端口 长度 校验和\n\n因此源端口是 $6*256+3*16+2=1586$\n\n目的端口是 $4*16+5=69$\n\n用户数据总长度为 $16+12=28$\n\n目的端口号 69<1023，是熟知端口，为服务器端使用的端口\n\n使用的服务程序是TFTP\n\n![](计算机网络有手就行诶我手呢\\image-20250105212010982.png)\n\n![](计算机网络有手就行诶我手呢\\image-20250105212031876.png)\n\nTCP报文段首部序号字段占4字节，共$2^{32}$个序号\n\nTCP是面向字节流的，每个序号对应一个数据字节，因此在序号不重复使用的条件下，一次性能发送$2^{32}$个字节，因此L的最大值为4GB\n\n10Mbit/s=1.25MB/s\n\n所需时间=$\\frac{L+\\lceil\\frac{L}{1460}\\rceil*66}{1.25MB/s}$\n\n![](计算机网络有手就行诶我手呢\\image-20250106074522959.png)\n\n(1) 第一个报文段是70-99的数据，携带总共30个字节的数据\n\n(2) 发回的确认号应当是100，代表100之前的序号皆被正确收到并且期待第100号\n\n(3) 80个字节\n\n(4) 70\n\n![](计算机网络有手就行诶我手呢\\image-20250106075110887.png)\n\n最大吞吐量=$\\frac{65535B*8b/B}{20ms}=26.214Mb/s$\n\n![](计算机网络有手就行诶我手呢\\image-20250106075351878.png)\n\n发送65535字节所需要的时间$T=T_D+RTT=\\frac{65536B*8b/B}{1*10^9bit/s}+10ms*2=20.52428ms$\n\n最大吞吐量$\\frac{L}T=\\frac{L}{\\frac{L}C+RTT}=\\frac{65536B*8b/B}{20.52428ms}=25.544Mb/s$\n\n信道利用率=吞吐量/信道带宽=传播时延/总时延=2.5544%\n\n![](计算机网络有手就行诶我手呢\\image-20250106080048008.png)\n\n1. 初始化参数\n\n\\- 初始的`EstimatedRTT`和`DevRTT`可以根据系统预设值或初始采样值来设定。\n\n\\- 常见的初始值：\n\n  \\- `EstimatedRTT = 初始 RTT 样本值`\n\n  \\- `DevRTT = 初始 RTT 样本值 / 2`（或其他合理假设值）\n\n2. 更新 `EstimatedRTT`\n\n当采集到新的RTT样本值`SampleRTT`时，更新`EstimatedRTT`：\n\n$\\text{EstimatedRTT} = (1 - \\alpha) \\times \\text{EstimatedRTT} + \\alpha \\times \\text{SampleRTT}$\n\n\\- 这是一个加权平均公式，用于平滑RTT的估计值。\n\n\\- 参数$\\alpha$的典型值是0.125（即1/8）。\n\n3. 更新 `DevRTT`\n\n基于`SampleRTT`与`EstimatedRTT`的差异，更新`DevRTT`（估算RTT的平均偏差）：\n\n$\\text{DevRTT} = (1 - \\beta) \\times \\text{DevRTT} + \\beta \\times |\\text{SampleRTT} - \\text{EstimatedRTT}|$\n\n\\- 这里使用的是绝对偏差来衡量RTT的波动程度。\n\n\\- 参数$\\beta$的典型值是0.25（即1/4）。\n\n4. 计算 RTO\n\n根据更新后的`EstimatedRTT`和`DevRTT`计算`RTO`：\n\n$\\text{RTO} = \\text{EstimatedRTT} + 4 \\times \\text{DevRTT}$\n\n\\- 加权偏差部分（$4 \\times \\text{DevRTT}$）用于增加容忍度，防止因RTT波动引发过早重传。\n\n5. 动态调整\n\n\\- RTO的上下限限制：在实际实现中，RTO通常会被限制在一个范围内。例如：\n\n  \\- 最小值：1秒\n\n  \\- 最大值：60秒\n\n  这样可以避免计算结果极端化导致性能问题。\n\n(1) RTO=4.5s\n\n(2) RTTs=$\\frac78$旧的RTT+$\\frac18$新的RTT=1.625s\n\n​\t RTTd=$\\frac34$旧的RTTd+$\\frac14$|RTTs-新的RTT样本|=0.78125s\n\n​\t RTO= 4.75s\n\n![](计算机网络有手就行诶我手呢\\image-20250106081510926.png)\n\nRTT0=30ms\n\nRTT1=0.9RTT0+0.1RTT=29.6ms\n\nRTT2=0.9RTT1+0.1RTT=29.84ms\n\nRTT3=0.9RTT2+0.1RTT=29.256ms\n\n$\\alpha$取值较小，RTTs受RTT样本值的影响较小\n\n![](计算机网络有手就行诶我手呢\\image-20250106081736760.png)\n\nssthresh=上次拥塞值/2\n\n![](计算机网络有手就行诶我手呢\\image-20250106082009764.png)\n\n![](计算机网络有手就行诶我手呢\\image-20250106082026328.png)\n\n![](计算机网络有手就行诶我手呢\\image-20250106082246782.png)\n\n(2) 慢开始时间间隔：[1,6]和[23,26]\n\n(3) 拥塞避免时间间隔：[6,16]和[17,22]\n\n(4) 第16轮是收到了重复帧，第22抡是超时检测\n\n(5) 1->32, 18->21, 24->13\n\n(6) 第七轮\n\n(7) 4\n\n半期考相关考点\n\n1. 集线器平分带宽，交换机都能使用最大带宽\n2. 集线器不能隔离广播域和冲突域，交换机可以隔离冲突域但是不能隔离广播域\n3. 已知网络利用率求网络延迟是最小值的多少倍，$(1-利用率)^{-1}$\n4. 最小单位：物理层：比特/位；数据链路层：帧；网络层：分组；传输层：数据报；应用层：数据\n5. CSMA/CD是在介质访问控制（MAC层）实现的\n6. 传统以太网最短有效帧长位64字节，争用期为 $51.2\\mu s$\n7. 以太网的物理地址的长度为48位，IPv4地址的长度为32位\n8. IP首部定长部分为20字节\n","tags":["cs"]},{"title":"大学物理0轮预习","url":"/2025/01/02/大学物理0轮预习/","content":"\n我滴进度已经完蛋了\n\n<!--more-->\n\n## 光学\n\n### 衍射\n\n#### 通用公式\n\n$\\delta=a\\frac{x}f$  $光程差=缝宽*\\tan\\theta$\n\n暗纹 $\\delta=\\pm k\\lambda$，明纹 $\\delta=\\pm (k+0.5)\\lambda$\n\n#### 中央明纹宽度\n\n$l=2f\\frac\\lambda a$\n\n#### 光栅\n\n$\\delta=(a+b)|\\sin\\theta-\\sin\\varphi|=k\\lambda$\n\n缺级 $k=\\frac{a+b}{a}k'$\n\n光栅常数 $a+b$\n\n距离中心距离 $x=f\\cdot\\tan\\theta,(a+b)|\\sin\\theta-\\sin\\varphi|=k\\lambda$\n\n### 双缝干涉\n\n$\\delta=d\\frac{x}D$  $光程差=缝距*\\tan\\theta$\n\n#### 云母覆盖\n\n$\\delta_{覆盖后}-\\delta_{覆盖前}=(1-n)l$\n\n### 单缝干涉\n\n反射 单调 $\\delta=2e\\sqrt{n_2^2-n_1^2\\sin^2\\theta}$\n\n反射 不单调 $\\delta=2e\\sqrt{n_2^2-n_1^2\\sin^2\\theta}+\\frac\\lambda 2$\n\n折射 单调 $\\delta=2e\\sqrt{n_2^2-n_1^2\\sin^2\\theta}+\\frac\\lambda 2$\n\n折射 不单调 $\\delta=2e\\sqrt{n_2^2-n_1^2\\sin^2\\theta}$\n\n\n\n\n\n### 偏振\n\n\n\n## 振动波动学\n\n### 振动\n\n#### 弹簧拉开\n\n$\\omega=\\frac{k}m$  $kx=m\\omega^2r,x=r$\n\n$A=\\sqrt{x_0^2+\\frac{v_0^2}{\\omega^2}}$  $A^2=x_0^2+x^2,x=\\frac{v_0}{\\omega}$\n\n#### 能量计算\n\n能量 $E=\\frac12kA^2$\n\n平均动能 $\\overline{E_k}=\\frac14kA^2$\n\n#### 振动合成\n\n$A=\\sqrt{A_1^2+A_2^2+2A_1A_2cos(\\varphi_2-\\varphi_1)}$\n\n$\\varphi=\\arctan\\frac{A_1\\sin\\varphi_1+A_2\\sin\\varphi_2}{A_1\\cos\\varphi_1+A_2\\cos\\varphi_2}$\n\n#### 求拍频\n\n$\\omega=|\\frac{\\omega_1}{2\\pi}-\\frac{\\omega_2}{2\\pi}|$\n\n#### 单摆\n\n$\\omega=\\sqrt{\\frac{g}{l}},T=\\frac{2\\pi}{\\omega},f=\\frac{\\omega}{2\\pi}$\n\n### 波动\n\n## 气体热力学\n\n### 气体压强体积温度能量\n\n\n\n### 热力学第一定理\n\n\n\n### 气体的速率\n\n\n\n### 循环效率\n\n\n\n### 熵\n\n","tags":["misc"]},{"title":"概率论一轮复习","url":"/2024/12/28/概率论一轮复习/","content":"\n记录概率论的学习内容\n\n<!--more-->\n\n\n## 目录\n\n![](概率论一轮复习\\image-20241226153014795.png)\n\n![](概率论一轮复习\\image-20241226153156568.png)\n\n\n\n## 一、随机事件和概率\n\n![](概率论一轮复习\\image-20241226155309296.png)\n\n![](概率论一轮复习\\image-20241226155749497.png)\n\n### 1.古典概型\n\n### 2.几何概型\n\n### 3.重要公式\n\n### 4.独立性判定\n\n## 二、一维随机变量及其分布\n\n![](概率论一轮复习\\image-20241226155849403.png)\n\n### 1.判分布\n\n随机变量：$X:\\Omega\\rightarrow\\mathbb{R}$\n\n分布函数：$X\\sim F(x),F(x)=P(X\\leq x),F(x)\\in[0,1]$\n\n ![](概率论一轮复习\\image-20241226161408379.png)\n\n对于连续型$F(x)=\\int_{-\\infty}^{x}f(t)dt,x\\in\\mathbb{R}$\n\n![](概率论一轮复习\\image-20241226161715853.png)\n$$\n\\left\\{\n\\begin{align}\n&F(-\\infty)=0,\\\\\n&F(+\\infty)=1,\\\\\n&\\sum_ip_i=1,\\\\\n&\\int_{-\\infty}^{+\\infty}f(x)dx=1\n\\end{align}\n\\right.\n$$\n![](概率论一轮复习\\image-20241226162907433.png)\n\nA\n\n![](概率论一轮复习\\image-20241226163018346.png)\n\n![](概率论一轮复习\\6274990073b1f018f2b3bd296672d12.jpg)\n\nB选项解法二：也可以使用部分积分公式$\\int udv=uv-\\int vdu$\n\n#部分积分公式推导过程\n\n![](概率论一轮复习\\image-20241226164835164.png)\n\n其中：$u=v=F(x)$\n\n带入部分积分公式：$\\int F(x) dF(x)=[F(x)F(x)]|_{-\\infty}^{+\\infty}−\\int F(x)dF(x)$\n\n故 $\\int F(x) dF(x)=\\frac{1}{2}$\n\n则 $g_2(x)$ 可以作为概率密度\n\n$g_1(x),g_2(x),g_3(x)$可以作为概率密度， $g_4(x)$ 不能作为概率密度\n\nC\n\n### 2.求分布\n\n- 离散型分布\n\n  - 0-1分布 $X\\sim B(1,p),X(伯努利计数变量)\\sim \\left(\\begin{array}{l}0&\\quad1\\\\p&1-p\\end{array}\\right)$\n\n  - 二项分布 $X\\sim B(n,p)$ 分布律 $U_k=P\\{X=k\\}=C_n^kp^k(1-p)^{n-k}$\n\n  - 几何分布 $X\\sim G(p)$ 首中即停止 $P\\{X=k\\}=p\\cdot (1-p)^{k-1}$\n\n    无记忆性![](概率论一轮复习\\image-20241226172043086.png)\n\n  - 超几何分布![](概率论一轮复习\\image-20241226172116840.png)\n  - 柏松分布 稀有事件的概率 $P\\{X=k\\}=\\frac{\\lambda^k}{k!}e^{-\\lambda}$，$EX=\\lambda$\n\n泊松定理 若$X\\sim B(n,p)$，当$n$很大，$p$很小，$\\lambda=np$ 适中时，二项分布可用泊松分布近似表示；一般地，当$n>20,p<0.05$ 时，用泊松近似公式通近二项分布效果比较好，特别当$n>100,np<10$ 时，逼近效果更佳\n$$\nC_n^kp^k(1-p)^{n-k}\\approx\\frac{\\lambda^k}{k!}e^{-\\lambda}\n$$\n![](概率论一轮复习\\image-20241226172929663.png)\n$$\n\\begin{align}\n\\because\\ &Z\\sim B(2,\\frac13)\\\\\n&X+Y+Z=2\\\\\n\\therefore\\ &X+Y=2-Z\\sim B(2,\\frac23)\n\\end{align}\n$$\nB\n\n![](概率论一轮复习\\image-20241227084704187.png)\n\n8\n\n![](概率论一轮复习\\image-20241227084958983.png)\n\n![](概率论一轮复习\\3d41f9d1474d853ccd93e271382de97.jpg)\n\nD\n\n- 连续型分布\n\n  - 均匀分布 $X\\sim U(a,b)$\n    $$\n    f(x)=\\left\\{\\begin{align}&\\frac1{b-a},a<x<b\\\\ &0,otherwise\\end{align}\\right.\n    $$\n\n    $$\n    F(x)=\\left\\{\\begin{align}&0,x<a\\\\&\\frac{x-a}{x-b},a\\leq x<b\\\\ &1,x\\ge b\\end{align}\\right.\n    $$\n\n    ![](概率论一轮复习\\image-20241227090909632.png)\n\n  - 指数分布 $X\\sim E(\\lambda)$\n    $$\n    f(x)=\\left\\{\\begin{align}&\\lambda e^{-\\lambda x},x\\ge0\\\\ &0,otherwise\\end{align}\\right.\\quad(\\lambda>0)\n    $$\n\n    $$\n    F(x)=\\left\\{\\begin{align}&1-e^{-\\lambda x},x\\ge0\\\\&0,x<0\\end{align}\\right.\\quad(\\lambda>0)\n    $$\n\n    ![](概率论一轮复习\\image-20241227092018265.png)\n\n    $t,s>0$时，$P\\{X\\ge t+s|X\\ge t\\}=P\\{X\\ge s\\}$ 称为指数分布的无记忆性\n\n    $EX=\\frac1\\lambda$称为平均寿命，也称为平均等待时间，$\\lambda$称为失效频率，它是一个常数，失效频率不变，元件无损耗，才有无记忆性\n\n  - 正态分布 $X\\sim N(\\mu,\\sigma^2)$\n    $$\n    X\\sim f(x)=\\frac1{\\sqrt{2\\pi}\\sigma}e^{-\\frac{(x-\\mu)^2}{2\\sigma^2}}\n    $$\n    $\\mu=0,\\sigma=1$时为标准正态分布\n\n![](概率论一轮复习\\image-20241227093654288.png)\n\n![](概率论一轮复习\\image-20241227095003089.png)\n\n![](概率论一轮复习\\image-20241227095053035.png)\n\n![](概率论一轮复习\\image-20241227122206944.png)\n\n![](概率论一轮复习\\image-20241227164905346.png)\n\n![](概率论一轮复习\\image-20241227165359766.png)\n\n此分布为威布尔分布，是考虑元件损耗的寿命分布；若$m=1$，则成为指数分布，是理想元件（无损耗）的寿命分布\n\n![](概率论一轮复习\\image-20241227165618501.png)\n\n![](概率论一轮复习\\image-20241227170404306.png)\n\n![](概率论一轮复习\\image-20241227170602755.png)\n\nA\n\n![](概率论一轮复习\\image-20241227170813857.png)\n\n![](概率论一轮复习\\image-20241227172128771.png)\n\n### 3.用分布\n\n![](概率论一轮复习\\image-20241227172253427.png)\n\nA\n\n![](概率论一轮复习\\image-20241227172718820.png)\n\nA\n\n![](概率论一轮复习\\image-20241227172955625.png)\n\n![](概率论一轮复习\\image-20241227173344657.png)\n\nA\n\n![](概率论一轮复习\\image-20241227173657936.png)\n\n注意这里是$\\ge$\n\n$k\\in[1,3]$\n\n## 三、一维随机变量函数的分布\n\n![](概率论一轮复习\\image-20241227174148198.png)\n\n### 1.离散型->离散型\n\n$$\nY\\sim \\left(\\begin{array}{l}g(x_1)&g(x_2)& ...\\\\\\quad p_1&\\quad p_2&...\\end{array}\\right)\n$$\n\n![](概率论一轮复习\\image-20241227174532760.png)\n\n![](概率论一轮复习\\image-20241227175235924.png)\n\n### 2.连续型->连续型（或混合型）\n\n感觉讲解过程很复杂，还是直接看例题吧\n\n![](概率论一轮复习\\image-20241227180950170.png)\n\n![](概率论一轮复习\\image-20241227175819907.png)\n\n![](概率论一轮复习\\image-20241227180858952.png)\n\n![](概率论一轮复习\\image-20241227181144259.png)\n\n![](概率论一轮复习\\image-20241227213217020.png)\n\n![](概率论一轮复习\\image-20241227213349706.png)\n\n不是哥们，这玩意有点逆天\n\n![](概率论一轮复习\\image-20241227225402554.png)\n\n![](概率论一轮复习\\image-20241227230811534.png)\n\n解法二有点不理解，但是好厉害···\n\n### 3.连续型->离散型\n\n若$X\\sim f_X(x)$，且$Y= g(X)$是离散型随机变量；首先确定$Y$的可能取值$a$，然后通过计算概率$P\\{Y=a\\}$求得$Y$的概率分布\n\n![](概率论一轮复习\\image-20241227232845496.png)\n\n![](概率论一轮复习\\image-20241227232754668.png)\n\n题解给的做法，直接用几何分布的无记忆性\n\n![](概率论一轮复习\\image-20241227232927146.png)\n\n## 四、多为随机变量及其分布\n\n![](概率论一轮复习\\image-20241227234626568.png)\n\n![](概率论一轮复习\\image-20241227234637877.png)\n\n### 1.判分布\n\n$$\nF(x,y)=P\\{X\\leq x,Y\\leq y\\}\n$$\n\n$F(x,y)$是联合分布函数的充要条件：单调性，右连续性，有界性，非负性\n$$\n\\left\\{\n\\begin{align}\n&F(-\\infty,y)=0,F(x,-\\infty)=0,\\\\\n&F(-\\infty,-\\infty)=0,F(+\\infty,+\\infty)=1,\\\\\n&\\sum_j\\sum_ip_{ij}=1,\\int_{-\\infty}^{+\\infty}\\int_{-\\infty}^{+\\infty}f(x,y)dxdy=1\n\\end{align}\n\\right.\n$$\n\n### 2.求分布\n\n#### 求联合分布\n\n- 求$F(x,y),p_{ij},f(x,y)$\n\n  - $(X,Y)\\sim p_{ij}$，则$F(x,y)=P\\{X\\leq x,Y\\leq y\\}=\\sum_{x_i\\leq x,y_i\\leq y}p_{ij}$\n  - $(X,Y)\\sim f(x,y)$，则$F(x,y)=P\\{X\\leq x,Y\\leq y\\}=\\int_{-\\infty}^{+\\infty}du\\int_{-\\infty}^{+\\infty}f(u,v)dv$\n\n- 二维均匀分布\n  $$\n  f(x,y)=\\left\\{\\begin{align}&\\frac1{S_D},(x,y)\\in D\\\\&0,其他\\end{align}\\right.\n  $$\n\n- 二维正态分布 $(X,Y)\\sim N(\\mu_1,\\mu2;\\sigma_1^2,\\sigma_2^2;\\rho)$\n  $$\n  f(x,y)=\\frac1{2\\pi\\sigma_1\\sigma_2\\sqrt{1-\\rho^2}}exp(-\\frac1{2(1-\\rho^2)}((\\frac{x-\\mu_1}{\\sigma_1})^2-2\\rho(\\frac{x-\\mu_1}{\\sigma_1})(\\frac{y-\\mu_2}{\\sigma_2})+(\\frac{y-\\mu_2}{\\sigma_2})^2))\n  $$\n  ![](概率论一轮复习\\image-20241228002324187.png)\n\n#### 求边缘分布\n\n$$\nF_X(x)=F(x,+\\infty),F_Y(y)=F(+\\infty,y)\\\\\n  p_{i*}=\\sum_jp_{ij},p_{*j}=\\sum_ip_{ij}\\\\\n  f_X(x)=\\int_{-\\infty}^{+\\infty}f(x,y)dy,f_Y(y)=\\int_{-\\infty}^{+\\infty}f(x,y)dx\n$$\n\n#### 求条件分布\n\n![](概率论一轮复习\\image-20241228003103701.png)\n\n#### 判独立\n\n![](概率论一轮复习\\image-20241228003309350.png)\n\n### 3.用分布\n\n![](概率论一轮复习\\image-20241228003200867.png)\n\n![](概率论一轮复习\\image-20241228003218431.png)\n\n![](概率论一轮复习\\image-20241228003920736.png)\n\n![](概率论一轮复习\\image-20241228004001647.png)\n\n![](概率论一轮复习\\image-20241228204716039.png)\n\n![](概率论一轮复习\\image-20241228204803089.png)\n\n![](概率论一轮复习\\image-20241228204920097.png)\n\n$a=0.1,b=0.1,c=0.5,d=0$\n\n![](概率论一轮复习\\image-20241228210508101.png)\n\n![](概率论一轮复习\\image-20241228211129615.png)\n\n![image-20241228211232751](概率论一轮复习\\image-20241228211232751.png)\n\n![](概率论一轮复习\\image-20241228212850307.png)\n\n![](概率论一轮复习\\image-20241228212947584.png)\n\n![](概率论一轮复习\\image-20241228214934142.png)\n\n![](概率论一轮复习\\image-20241228215529903.png)\n\n![](概率论一轮复习\\image-20241229143532802.png)\n\n![](概率论一轮复习\\image-20241229145457186.png)\n\n![](概率论一轮复习\\image-20241229145628258.png)\n\n![](概率论一轮复习\\image-20241229150523813.png)\n\n## 五、一维随机变量函数的分布\n\n![](概率论一轮复习\\image-20241229150605527.png)\n\n![](概率论一轮复习\\image-20241229150631218.png)\n\n### 1.多维->一维\n\n2.\n\n3.\n\n## 六、数学特征\n\n![](概率论一轮复习\\image-20241229150733335.png)\n\n![](概率论一轮复习\\image-20241229150814358.png)\n\n### 1.数学期望\n\n![image-20241229151120087](概率论一轮复习\\image-20241229151120087.png)\n\n### 2.方差\n\n\n\n3.\n\n## 七、大数定理和中心极限定理\n\n![](概率论一轮复习\\image-20241229151301493.png)\n\n### 1.依概率收敛\n\n设随机变量$X$与随机变量序列$\\{X_n\\}(n=1,2,3,…)$，如果对任意的$\\varepsilon>0$，有\n$$\n\\lim_{n\\rightarrow x}P\\{|X_n-X|\\ge\\varepsilon\\}=0\\\\\n或\\\\\n\\lim_{n\\rightarrow x}P\\{|X_n-X|<\\varepsilon\\}=1\n$$\n则称随机变量序列$\\{X_n\\}$依概率收敛于随机变量$X$，记为\n\n$\\lim_{n\\to\\infty}X_{n}=X(P)$ 或 $X_{n}{\\overset{p}\\longrightarrow}X(n\\to\\infty)$\n\n### 2.大数定律\n\n#### 切比雪夫大数定律\n\n相互独立 方差存在且一致有上界\n\n则$\\{X_n\\}$服从大数定理 $\\frac1n\\sum_{i=1}^nX_i\\overset{p}\\longrightarrow\\frac1n\\sum_{i=1}^nEX_i$\n\n#### 伯努利大数定律\n\n$\\mu_n$是$n$重伯努利实验中事件$A$发生的次数，$A\\sim B(n,p)$，则 $\\frac{\\mu_n}n\\overset{p}\\longrightarrow p$\n\n#### 辛钦大数定律\n\n相互独立 同分布 期望存在\n\n则 $\\frac1n\\sum_{i=1}^nX_i\\overset{p}\\longrightarrow\\mu$\n\n#### 大数定律同一个结论\n\n$\\frac1n\\sum_{i=1}^nX_i\\overset{p}\\longrightarrow E(\\frac1n\\sum_{i=1}^nX_i)$\n\n### 3.中心极限定理\n\n列维-林德伯格定理\n\n棣莫弗-拉普拉斯定理\n\n中心极限定理同一个结论\n\n\n\n## 八、统计量及其分布\n\n![](概率论一轮复习\\image-20241229154208904.png)\n\n### 1.统计量\n\n样本均值 $\\overline{X}=\\frac1n\\sum_{i=1}^{n}X_i$ \n\n样本方差 $s^{2}=\\frac{1}{n-1}\\sum _ {i=1}^ {n}(X_i-\\overline{X})^{2} = \\frac {1}{n-1}(\\sum _ {i=1}^ {n}X_ {i}^ {2}-\\overline{X}^2)$（无偏估计）\n\n样本 $k$ 阶原点矩 $ A_ {k}  = \\frac {1}{n} \\sum _ {i=1}^ {n} x^ {k}  (k=1,2, \\cdots )$\n\n样本 $k$ 阶中心矩 $ B_ {k}  =  \\frac {1}{n}   \\sum _ {i=1}^ {n}   (X_ {i}-\\overline {X})^ {k}  (k=2,3, \\cdots  )$\n\n顺序统计量 将样本n个观测量按其取值从小到大的顺序排列\n\n### 2.统计量的分布\n\n#### 正态分布\n\n略\n\n$\\chi^2$分布\n\n\n\n3.正态总体下的常用结论\n\n九、参数估计与假设检验\n\n1.点估计和评价标准\n\n2.区间估计与假设检验\n\n\n\n\n\n## Append\n\n还有两个小时进考场，浅速通一下概率论\n\n```\n基本概率\n联合概率求独立性\n连续函数的概率密度\n边缘密度和独立性\n协方差\n矩估计量和最大似然估计量\n显著性水平应用题\n```\n\n### 协方差\n\n$D(aX+bY)=a^2D(X)+b^2D(Y)+2abCov(X,Y)$\n\n$Cov(X,Y)=E(XY)-E(X)E(Y)$\n\n$\\rho_{XY}=\\frac{Cov(X,Y)}{\\sqrt{D(X)}\\cdot\\sqrt{D(Y)}}$\n\n![](概率论一轮复习\\image-20241230143604750.png)\n\n### 矩估计量和最大似然估计量\n\n![](概率论一轮复习\\image-20241230143709401.png)\n\n### 显著性水平应用题\n\n要检验的假设是 $H_0: \\mu$ 符合要求, $H_1:\\mu$ 不符合要求（2分）\n\n","tags":["mathematics"]},{"title":"零知识证明学习","url":"/2024/12/19/零知识证明学习/","content":"\n241219阅读《Chameleon-Hashes with Ephemeral Trapdoors And Applications to Invisible Sanitizable Signatures》遇到了NIZKPoK，故学习一下\n\n<!--more-->\n\n---\n\n## NIZKPoK\n\nNon-Interactive Zero-Knowledge Proof 非交互零知识证明\n\n### 论文中的体现\n\n$$\n\\begin{align}\n&Generate\\ \\pi\\leftarrow NIZKPoK\\{(x):h=g^x\\}\\\\\n&if\\ \\pi\\ is\\ not\\ valid, return\\perp\n\\end{align}\n$$\n\n### 解释\n\n证明着想要证明自己知道某个值$x$，而不透露$x$本身\n\n### Fiat-Shamir变换（简化的非交互证明）\n\n1. 初始化：$g$和$h$是公开的参数，$x$是秘密（证明者知道它）\n2. 生成证明：随机选择一个随机值$r$，计算承诺值$t=h*g^r$\n3. 计算挑战：生成一个挑战$c$（通常通过哈希函数生成）\n4. 计算响应：计算 $z=r+c*x$\n5. 发送证明：发送三元组$(t,c,z)$\n6. 验证：验证者检查是否满足$g^z=t*h^c$\n\n### 实验代码\n\n```\n#这份是手搓的，放进代码复现成功\ndef gen_NIZK( g , x , p ):\n    h = pow( g , x , p )\n    r = random.randint( 1 , p )\n    t = pow( g , r , p )\n    c = SM3(\"窝丝一个挑战\")\n    z = r+c*x\n    return (t,c,z),(g,p,h)\n\ndef verf_NIZK( pi ):\n    ( t , c , z ) , ( g , p , h ) = pi\n    if pow( g , z , p ) == t * pow( h , c , p ) % p:\n        return True\n    return False\n```\n\n[完整代码](https://github.com/coperlm/Crypto-Repro/blob/main/Chameleon%20Hashes/Ephemeral%20Trapdoors/main.py)\n\n```\n#这份是gpto1写的，不过是基于椭圆曲线的\nfrom ecdsa import SECP256k1, SigningKey, VerifyingKey\nimport hashlib\n\n# 曲线参数\ncurve = SECP256k1\nG = curve.generator  # 基点 g\nn = curve.order      # 阶\n\n# 私钥 x（随机生成）\nx_sk = SigningKey.generate(curve=curve)\nx = x_sk.privkey.secret_multiplier  # x 的数值\n# 公钥 h = g^x\nh_vk = x_sk.verifying_key\nh = h_vk.pubkey.point\n\ndef nizkpok_prove(x):\n    # 证明者生成随机数 r\n    r_sk = SigningKey.generate(curve=curve)\n    r = r_sk.privkey.secret_multiplier\n    # 计算承诺 t = g^r\n    t = r * G\n    # 计算挑战 e = Hash(g || h || t)\n    e = hashlib.sha256()\n    e.update(int(G.x()).to_bytes(32, 'big') + int(G.y()).to_bytes(32, 'big'))\n    e.update(int(h.x()).to_bytes(32, 'big') + int(h.y()).to_bytes(32, 'big'))\n    e.update(int(t.x()).to_bytes(32, 'big') + int(t.y()).to_bytes(32, 'big'))\n    e_int = int(e.hexdigest(), 16) % n\n    # 计算响应 s = r + e * x mod n\n    s = (r + e_int * x) % n\n    return (e_int, s)\n\ndef nizkpok_verify(h, proof):\n    e_int, s = proof\n    # 计算 t' = g^s + (-h^e)\n    sG = s * G\n    eH = e_int * h\n    # 获取 eH 的负元\n    neg_eH = (n - 1) * eH\n    # 计算 t' = sG + (-eH)\n    t_prime = sG + neg_eH\n    # 重新计算挑战 e' = Hash(g || h || t')\n    e_prime = hashlib.sha256()\n    e_prime.update(int(G.x()).to_bytes(32, 'big') + int(G.y()).to_bytes(32, 'big'))\n    e_prime.update(int(h.x()).to_bytes(32, 'big') + int(h.y()).to_bytes(32, 'big'))\n    e_prime.update(int(t_prime.x()).to_bytes(32, 'big') + int(t_prime.y()).to_bytes(32, 'big'))\n    e_prime_int = int(e_prime.hexdigest(), 16) % n\n    # 验证 e 是否等于 e'\n    return e_int == e_prime_int\n\n# 生成证明\nproof = nizkpok_prove(x)\n\n# 验证证明\nis_valid = nizkpok_verify(h, proof)\nprint(\"证明是否有效：\", is_valid)\n```\n","tags":["Crypto"]},{"title":"IELTS备考方案","url":"/2024/12/13/IELTS备考方案/","content":"\n记录如何备考雅思\n\n<!--more-->\n\n笔者四级都没过就开始想IELTS了（菜菜\n\n而且考一次2k多（穷穷\n\n但是还是要准备一下下的\n\n***\n\n#关于背单词\n\n一开始是用的百词斩来背单词\n\n不过后面就破产了（\n\n![](IELTS备考方案\\bcz.jpg)\n\n然后斥巨资买了这本书背（感觉背单词，用纸质书更舒服一点）\n\n![](IELTS备考方案\\image-20241213123128346.png)\n\n只不过进度感人（悲\n\n单词背完之后，理论上是刷剑雅（一般是盗版或者电子版，正版买不起一点）\n\n```\n#剑雅使用教程\n1️⃣剑桥雅思4-6：较早版本的题目，初学者可用于前期了解题型\n2️⃣剑桥雅思7-9：开始全面的模拟练习，包括听、说、读、写四个部分\n3️⃣剑桥雅思10-12：版本难度与现在的雅思考试接近，模考冲刺反复刷，检查和修正自己的错误\n4️⃣剑桥雅思13-19：最新版本的题目，应该是最接近当前雅思考试的，可以用来考前练习，检验自己的备考效果\n```\n\n![](IELTS备考方案\\image-20241213123919350.png)\n\n![](IELTS备考方案\\image-20241213123933820.png)\n\n![](IELTS备考方案\\image-20241213123944373.png)\n","tags":["misc"]},{"title":"密码学学习路径","url":"/2024/12/12/密码学学习路径/","content":"\n本篇文章用于记录学习密码学的路径\n\n有些是已经走过的路，有些是还没走也即将要走的路\n\n<!--more-->\n\n---\n\n笔者大一录取至网络空间安全专业，加入了网络与信息安全社团，接触到了CTF的五大方向\n\n高考结束之后的暑假，几个方向的题目都做了一点（除了pwn，环境太难配），然后去社团面试；听了学长们的建议，计划选一个方向，了解了几个方向都有什么特点，学长说密码学应该是五大方向里最深的一个，然后也是因为从小对数学比较感兴趣，就选择了密码学\n\n上一任的密码学部部长是星盟安全的，然后他就建议每周写周记，记录一下自己每周学了什么，然后我整个学期基本每周都写——收获颇丰\n\n这里是大一上学期的周记\n\n![](密码学学习路径\\大一上.png)\n\n这边是寒假记的，寒假只有一个月所以有四篇\n\n![](密码学学习路径\\寒假.png)\n\n这样子，在[BUUOJ](https://buuoj.cn/)上刷了一百多道密码学题目，nss上也做了一些，主要是这两个平台，然后打过一些比赛\n\n通过这半年的锻炼吧，感觉主要提升的是代码能力，感觉自己现在运用python的能力已经不亚于使用cpp了（当然python很多用法要现查现用，还是不太能用来打算法）；只不过打CTF的密码学还是并不是很强，很多攻击方式有待学习\n\n然后下学期对于密码学的学习就比较断断续续了，下学期比较多的时间去弄嵌入式了\n\n大概是24年五月份，正式配置并启用的github page，然后就有了这个博客，后来陆陆续续在上面记点东西（虽然很多烂尾了）\n\n大概也是大一下，好像是快学期末了，意识到CTF的Crypto不是真正的密码学，然后开始科研方向，入门学习是看这本书（虽然我看的是中文版，寒假打算看下原著）\n\n![](密码学学习路径\\image-20241212195930695.png)\n\n这本书介绍的是密码学的基础算法，应该是在清华大学杨波的那本书之上的（毕竟是英文教材）\n\n之后是一本规约相关的书\n\n![](密码学学习路径\\image-20241212200428169.png)\n\n这本书就相对困难一点了，也可以看中文版《安全规约导论》（好像说中文版里有的地方有点问题）\n\n之后了解到一篇论文讲公钥密码的学习\n\n![](密码学学习路径\\image-20241212200548291.png)\n\n这篇论文主要是介绍的学习路径，还有30篇推荐阅读的论文（计划这学期读完）\n\n前面的推荐阅读里（不是30篇公钥密码里面的）出现了上述两本书，但是又不限于这两本书，其他书目待完成上述论文的阅读之后再决定什么时候看\n\n大概看完了上述内容，就可以做点东西了~\n\n但是我还没看完！（悲\n\n---\n\n之后的路线：计划先打好基础，然后搞搞变色龙哈希，之后再找个跳板，读研之前学习一定的后量子并在这个领域进行研究\n","tags":["Crypto"]},{"title":"2024年终总结&回首过去几年","url":"/2024/12/02/2024年终总结-回首过去几年/","content":"\n算是个年终总结，也总结了半秩\n\n<!--more-->\n\n## 总述\n\n### 高一\n\n大概是2020年，卡线进了沧州一中\n\n当时成绩平平无奇，在普通班大概是排二十多名的位置\n\n![高一上第一次月考](2024年终总结-回首过去几年\\image-20241202144250842.png)\n\n然后高一还是比较平静的吧，刚开学不久学校有信竞集训队招新，然后去考了个试，然后进了集训队，认识了很多大佬\n\n开学后三个月，去打了CSP-S2020，T1打了三个小时，最后一个小时都在吃东西~\n\n赛后测试代码，T1（儒略日，大模拟）拿了10分，原本能晋级的，结果忘记给每道题都建立一个文件夹了，然后遗憾退场（悲\n\nnoip2021再战\n\n至于whk，那时候马上就要是”得E门生“了\n\n![高一下开学考试](2024年终总结-回首过去几年\\image-20241202145710662.png)\n\n不过排名基本没变，大概班里二十多名，学校七八百名（物理组合）\n\n![高二上开学考试](2024年终总结-回首过去几年\\image-20241202150037553.png)\n\n直到高二，一直如此\n\n### 高二\n\nCSP/NOIP2021前夕，几乎全天待在机房练题，whk基本没时间学\n\n那段时间的大致安排是，上午正常上课，然后下午和晚自习就在机房里备赛；然后我那段时间基本上是上午课间的时候抓紧时间写作业，有时可以把作业（已经想不到当时是怎么卷的了）；noip打完之后回归whk，基本上白天写完作业绰绰有余，晚上可以自己写练习册了\n\n最后结果，csp省二 noip省三，有点小遗憾，但也知足了\n\n没找到当时的成绩，我只记得刚打完csp回来的月考，没进前900来着\n\n打完比赛，就可以开始专心学whk了\n\n![高二上12.06半月考](2024年终总结-回首过去几年\\image-20241202150701106.png)\n\n这次好歹是上500分了\n\n转眼到了高二下学期，联考成绩单没在智学网上找到，不过我印象比较深刻，班上第二名，物理组总排第299（这辈子头一次进前300）\n\n### 高三\n\n然后高三了，就都卷起来了，进步就比较困难了，常年稳定在400-500这样子，不过也是鸡汤看的不少，知道高三心态很重要，然后就埋头学习，学累了看会鸡汤，然后继续学（大雾\n\n讲真压力不小，集训队的其他dalao都进阶北大班了，我还在普通班\n\n题目难度上来了，分数基本在450左右，但是排名基本不变\n\n好像是高三上学期，数学一直没有什么进步，比较感动自己的是把朱昊鲲《2000题》一个月刷了一遍（还把错题总结出来了），基本上是每个晚自习都在刷，中午午休的时候也刷；正好赶上一次运动会，记得那一天正好把几何的一大章写完\n\n![高三一模](2024年终总结-回首过去几年\\image-20241202151213189.png)\n\n![高考前以后一次考试](2024年终总结-回首过去几年\\image-20241202151255821.png)\n\n\n\n高三下学期，快高考了，但是语文基本没上过百；听了石油的说法，思考了一下，然后做了一个挺斩钉截铁的决定，拿出整整15天的时间，这段时间每科自己买的试卷都不做了，就只做语文高考真题。在这之后虽然语文依旧没有起色，但是最后高考的时候数学英语发挥的一般，而语文118。我觉得和这一抉择有很大的关联\n\n高考前一两个月吧，我和我同桌经常一块刷题，在限定时间内比正确率，物化生都刷，数学也刷，嘎嘎刷；讲真那段时间刷题真的刷爽了，有一次45分钟我做了两套物理试卷（好像是名校模考卷）的选择题，总共只错了三道题，总之就是挺爽的\n\n最终一分不浪费，录取到了FJNU\n\n### 大一\n\n感觉大一还是相对迷茫的，不过也有不少收获\n\n先说算法竞赛，因为高中学过，所以理所当然大学想打ACM，但是由于比较复杂的原因，最终没有选择ACM（属于是取舍的问题，不过后来想明白了）\n\n因为大一就下定决心不保研了，所以学业这边相对轻松；然后就可以随便打比赛，一段时间的练习逐渐成为了python中手（不是高手也不是低手），CTF被学长带飞然后拿了奖；RoboMaster这边也学到了不少嵌入式知识；而且还混了个数学建模小比赛的奖\n\n机器人相关，沧一有这样的社团但是不在普通班招，有点遗憾；这也是我大学来机器人社团学和本专业毫无关联的嵌入式的原因之一，耗费了不少时间和精力，但是感觉相当划算，现在想自己手搓个什么简单电路基本没有问题，即使有问题也解能决问题\n\n![我有很多证但都是准考证](2024年终总结-回首过去几年\\bd2fc92f357bfaf2a97896fbc76713c.jpg)\n\n### 大二\n\n大二这一年还没过完，不过想清楚很多事情；很多东西都是要取舍，知道了自己需要什么，需要做什么，因而之后的道路也比较清晰了\n\n---\n\n关于算法竞赛，太功利去看待他并不是一件好事，但是确实很锻炼思维能力；虽然没进大学的集训队，这段时间也经常打Codeforces，前两天的校赛还取得了不错的成绩\n\n![](2024年终总结-回首过去几年\\366a54510264d19b798861a4dbaadfe.jpg)\n\n关于CTF，它和以后的就业是相对绑定的；大一锻炼了一年的代码能力，现在手搓（或者熟练使用AI）完成个什么算法也相对轻松；所以基本而言是有利的，性价比较高的\n\n现在机器人这边也在干一个[小项目](https://coperlm.github.io/2024/11/24/RoboMaster%E7%A6%8F%E5%BB%BA%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A62025%E8%B5%9B%E5%AD%A3-%E9%A3%9E%E9%95%96%E7%BB%84%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/)，确实不大，但也学到很多东西\n\n后面的路，应当会越走越宽的\n\n![end](2024年终总结-回首过去几年\\6563a752f41212fd722cce1e66e8697.jpg)\n\n未完待续~\n","tags":["misc"]},{"title":"FJNU2024低程赛题解","url":"/2024/12/02/FJNU2024低程赛题解/","content":"\n[比赛链接](https://fjnuacm.top/contest/674c47729613c4d16c3f81cf)\n\n题目按总过题数量降序排列\n\n<!--more-->\n\n## A.\n\n```\n#include<iostream>\nusing namespace std;\n\nsigned main(){\n    int a , b;cin >> a >> b;\n    int c = a - b;if( c < 0 ) c = -c;\n    cout << c << endl;\n    return 0;\n}\n```\n\n## H.\n\n```\n#include<iostream>\nusing namespace std;\n\nsigned main(){\n    int a , b , c;cin >> a >> b >> c;\n    if( a == b && b == c ) cout << 1 << endl;\n    else if( a == b || b == c || a == c ) cout << 2 << endl;\n    else cout << 3 << endl;\n    return 0; \n}\n```\n\n## G.\n\n前面填充`0`，剩下的位数从头开始输出字符串，直到凑齐n位，即可\n\n```\n#include<iostream>\nusing namespace std;\n\nsigned main(){\n    int n , k;cin >> n >> k;\n    string s;cin >> s;\n    for(int i = 1;i <= k;i ++){\n        cout << 0;\n    }\n    for(int i = k+1;i <= n;i ++){\n        cout << s[i-k-1];\n    }cout << endl;\n    return 0; \n}\n```\n\n## B.\n\n小模拟，过的人还是挺多的，理清思路就好\n\n```\n#include<iostream>\n\nusing namespace std;\n\nint x , k , r;\n\nint leng( int num ){\n    int ans = 0;\n    while( num ){\n        num /= 10;\n        ans ++;\n    }if( ans == 0 ) ans = 1;\n    return ans;\n}\nvoid space( int num ){\n    for(int i = 1;i <= num;i ++) cout << \" \";\n}\n\nsigned main(){\n    cin >> x >> k;\n    int len_init = leng(k) + 1 + leng(x);\n    while( x ){\n        space( len_init - leng(k) - 1 - leng(x) );\n        r = x % k;\n        cout << k << \"|\" << x << \" \";\n        if( r < 10 ) cout << r;\n        else{\n            cout << char(r-10+'A');\n        }cout << '\\n';\n        space( len_init - leng(x) );\n        for(int i = 1;i <= leng(x);i ++) cout << \"-\";\n        cout << '\\n';\n        x /= k;\n    }space(len_init-1);cout << 0 << '\\n';\n    return 0;\n}\n```\n\n## F.\n\n一开始想二分套二分（大雾），后来发现只需要记录最长连续`L`的个数即可\n\n```\n#include<iostream>\nusing namespace std;\n\nconst int N = 2e5;\nint n;string s;\nint top_R[N];\n\nsigned main(){\n    cin >> n >> s;\n    int top_num = 0;\n    int ans = 1 , conti = 1;\n    for(int i = 1;i <= n;i ++){\n        if( s[i-1] == 'L' ) conti ++;\n        else{\n            conti = 1;\n        }ans = max( conti , ans );\n    }cout << ans << endl;\n    return 0; \n}\n```\n\n## C.\n\n暴力会TLE，时间复杂度为 $O(2^n)$，即使是夹半搜索也要 $2^{50}$ 量级，故考虑dp\n\n感觉和背包问题比较像，甚至要简单一点；不同点在于背包问题是求最优，而本题是求是否到达\n\n```\n#include<iostream>\n#include<queue>\n\nusing namespace std;\n\nint n , x;\nint a[110] , b[110];\nint dp[10010][110];\n\nsigned main(){\n    cin >> n >> x;\n    for(int i = 1;i <= n;i ++){\n        cin >> a[i] >> b[i];\n    }\n    dp[0][0] = 1;\n    for(int i = 1;i <= n;i ++){\n        for(int p = min(a[i],b[i]);p <= x;p ++){\n            if( p >= a[i] ) dp[p][i] |= dp[p-a[i]][i-1];\n            if( p >= b[i] ) dp[p][i] |= dp[p-b[i]][i-1];\n        }\n    }\n    if( dp[x][n] ) cout << \"Yes\" << endl;\n    else cout << \"No\" << endl;\n    return 0; \n}\n```\n\n## E.\n\n并查集问题（当时写的时候以为是公共祖先弱化版，忘了并查集这个东西了）\n\n然后判断每种情况的状态，最后合并即可\n\n```\n#include<iostream>\n\nusing namespace std;\n\nconst int N=1e5;\nint n , m;\nint ans , x , y , z;\nint bin[N+10];\nint fa[N+10];\n\nint get_fa( int p ){\n    if( fa[p] == p ) return p;\n    return get_fa(fa[p]);\n}\n\nsigned main(){\n    cin >> n >> m;\n    for(int i = 1;i <= n;i ++){\n        fa[i] = i;\n    }\n    for(int i = 1;i <= m;i ++){\n        cin >> x >> y >> z;\n        if( bin[x] == 0 && bin[y] == 0 ){\n            ans ++;\n        }else if( bin[x] && bin[y] ){\n            if( get_fa(x) != get_fa(y) ){\n                ans --;\n            }\n        }bin[x] = bin[y] = 1;\n        fa[get_fa( x )] = fa[get_fa( y )] = min( get_fa( x ) , get_fa( y ) );\n    }\n    for(int i = 1;i <= n;i ++){\n        if( bin[i] == 0 ) ans ++;\n    }\n    cout << ans << endl;\n    return 0; \n}\n```\n\n## G.\n\n这题我也不知道怎么过的，应该是运气好凑巧了吧\n\n结束前十分钟写完思路发现样例二过不了，以为是假了，然后写下了`//做法假了，没时间了，开摆！ `这句；后来发现忘了翻转这一步，加上了然后样例二过了，一提交居然AC了\n\n首先观察样例，因为存在不同解，所以试图找到解的规律\n\n```\n2 3 3 4 -4 -7 -4 -1\n```\n\n对以上操作积分一次（这个比喻有点抽象），可以发现只要确定了第一项，后面的就都确定了\n\n不妨设第一项为 `0`\n\n```\n原式为： 2  3  3  4  -4  -7  -4  -1\n积分后：0  2  1  2  2  -6  -1  -3  2\n```\n\n然后改变第一项，可以发现奇数项和偶数项分别加减第一项的改变值\n\n```\n原式为： 2  3  3  4  -4  -7  -4  -1\n积分后：0  2  1  2  2  -6  -1  -3  2\n改首项：1  1  0  3  1  -5  -2  -2  1\n```\n\n这时，我们只需要确定第一项即可\n\n但是第一项的范围为 ±1e9，所以需要借助和 `幸运数字` 的差值\n\n进一步的，**我们如果希望改变后的数字是幸运数字，只需要和目标的幸运数字们分别作差**；差值结果即为**第一项为某一数字**后，这一项在变换（积分）后会变为幸运数字\n\n由于每个幸运数字不同，故我们对于这个二维列表，只需要统计出现相同数字的最大次数即可（使用map进行统计）\n\n```\n#include<iostream>\n#include<map>\n#define int long long\n\nusing namespace std;\n\nconst int N = 1e5;\nint n , m;\nint s[N+10] , t[15];\nint state[N+10][11];\n\nmap < int , int > mp;\n\nsigned main(){\n    mp.clear();\n    cin >> n >> m;\n    for(int i = 2;i <= n;i ++){\n        cin >> s[i];\n    }\n    for(int i = 1;i <= m;i ++){\n        cin >> t[i];\n    }\n    state[1][0] = 0;\n    for(int i = 2;i <= n;i ++){\n        state[i][0] = s[i] - state[i-1][0];\n    }\n    for(int i = 1;i <= n;i ++){\n        for(int j = 1;j <= m;j ++){\n            state[i][j] = t[j] - state[i][0];\n            if( i % 2 ) state[i][j] = -state[i][j];\n        }\n    }\n    int ans = 0;\n    for(int i = 1;i <= n;i ++){\n        for(int j = 1;j <= m;j ++){\n            mp[state[i][j]] ++;\n            ans = max( ans , mp[state[i][j]] );\n        }\n    }\n    cout << ans << endl;\n    return 0; \n}\n```\n\n\n\n","tags":["算法竞赛"]},{"title":"RoboMaster福建师范大学2025赛季 飞镖组开发日志","url":"/2024/11/24/RoboMaster福建师范大学2025赛季-飞镖组开发日志/","content":"\n本篇文章用于记录飞镖组开发日志，便于后人学习\n\n因为也不是什么很珍贵的东西，所以没有上锁，希望其他队伍看到后能指点一二\n\n[电控代码开源](https://github.com/coperlm/FJNU_RM2025Tracking_Dart)\n\n<!--more-->\n\n## 此前的进度2024.11.24\n\n版本：0.4\n\n![](RoboMaster福建师范大学2025赛季-飞镖组开发日志\\飞镖电控进度.png)\n\n![](RoboMaster福建师范大学2025赛季-飞镖组开发日志\\4ce449b5537292c77ccf71d186d179f.jpg)\n\n硬件选型\n\n```\n主控：STM32f103c6t6\n陀螺仪：mpu6500\n通信：蓝牙串口模块\n舵机：3.7g舵机*2\n电池：格氏2s 450mAh 75C\n涵道：群汐30MM涵道 QF1611-14000KV\n电调：好盈天行者电调 20A V2 支持反转\n视觉：暂无\n```\n\n对于陀螺仪部分\n\n- 使用mpu6500读取三个方向的速度和加速度\n- 自写函数进行dmp解算获得pitch yaw roll，但是yaw会有累计偏转\n- 解决yaw偏转（待解决）\n\n对于通信部分\n\n- 使用蓝牙模块进行串口通信\n- 只有发送\n\n对于舵机\n\n- 转幅对应的pwm波为50-250（具体见配置和代码）\n\n对于电池\n\n- 小心使用！小心使用！小心使用！！！\n\n对于涵道\n\n- 三根线分别接电调的三个香蕉头\n\n对于电调\n\n- xt30头接2s供电\n- 杜邦头红线接单片机5V，黑线接地，白线为pwm波，范围为500-1000（具体见配置）\n\n对于视觉\n\n- 暂无\n\n[FREEROTS](https://coperlm.github.io/2024/11/08/hal%E5%BA%93c6t6-Freerots/)\n\n---\n\n## UPD2024.11.28\n\n版本：0.5\n\n陀螺仪问题已解决，直接用ai写的dmp解算并且甚至没有很大的零漂！（大雾）\n\n至少确实能用了，而且一点点的零漂不会太影响镖体（但愿）\n\n下一阶段开始把涵道驱动模块移植到这块焊的乱七八糟的板子上（大雾\n\n但是移植过程中又不转了，这段时间二分查找一下bug，然后周六上午和视觉联调\n\n## UPD2024.11.30\n\n版本：0.6\n\n已成功和视觉组联调，使用星瞳openMV接收数据成功，存在少量丢包\n\n此版本可以通过视觉参数来返回给舵机（模式3）\n\n舵机模块今天断线了，测试版demo很容易断线，需要谨慎使用，开始找人画板（\n\n![](RoboMaster福建师范大学2025赛季-飞镖组开发日志\\demo2.jpg)\n\n## UPD2024.12.05\n\n版本：0.7\n\n新增pid控制舵面\n\n改为线性控制，应该更平滑一点\n\n周末测一下\n\n## UPD2024.12.10\n\n发现舵面不需要pid（大雾），抖来抖去是因为视觉传过来的数据有丢，计划写个校验\n\n今天先把环境配好（雾）\n\n## UPD2024.12.15\n\n版本：0.8\n\n问了一下视觉组的学长，学习了一下其他兵种的先进经验\n\n加了个头和尾，然后直接读很多数据（视觉发送比电控接收快很多）\n\n直接从字符串里取数据即可\n\n通信问题基本解决\n\n之后需要干的，就是依次修改接收窗口，优化数据正确率，然后就是想想飞控该怎么写了\n\n## UPD2024.12.19\n\n数据通信延迟太高（错误的数据太多了）\n\n今天想了个办法，直接发hex，这样可以减少30%的通信数据，延迟大大减小\n\n但是几秒钟可能就会有一个数据出错\n\n下一阶段计划改为一位起始位，一位终止位和一位校验位\n\n如果直接用可见ascll，还可以再减少一位（大雾\n\n## UPD2024.12.25\n\n南航开源了机械图纸，该跳出来看了\n\n控制算法没有开源，不过据说比较简单，然后重新翻[青工会](https://www.bilibili.com/video/BV1ox4y1W783?t=642.9)，找到了这个控制算法\n\n![](RoboMaster福建师范大学2025赛季-飞镖组开发日志\\image-20241225180451009.png)\n\n## UPD2024.12.26\n\n这两天研究了一下控制算法，然后自己重画了一遍这张图\n\n![](RoboMaster福建师范大学2025赛季-飞镖组开发日志\\飞控.jpg)\n\n学习了一下，大概思路和简单过程代码有了\n\n不过自己写的dmp解算不包含角速度，这两天需要加上这个\n\n预计元旦之前吧\n\n## UPD2024.12.30\n\n这几天在预习期末考试就没有推进度\n\n然后为了应对中期，设置了个临时task\n\n\n\n待解决问题\n\n- 涵道\n  - 驱动不稳定\n  - 无法移植\n  - 不知道本质波形函数\n- 视觉\n  - 传输有误 -> 压画质\n\n## UPD2025.01.03\n\n这几天大概每天投入一个小时左右，都有进度，但是没写~\n\n今天比较飞跃性的是，把视觉出错的问题解决了\n\n然后涵道也会驱动了，只不过不知道为什么用Freerots驱动不了\n\n## UPD2025.02.18\n\n假期进度搁置了\n\n今天把飞控算法基本完成了，今天晚上去拿摄像头，明天测试\n","tags":["RoboMaster"]},{"title":"变色龙哈希学习笔记","url":"/2024/11/24/变色龙哈希学习笔记/","content":"\n用于记录变色龙哈希的学习历程\n\n没写完，不打算写了~\n\n<!--more-->\n\n## Chameleon Hashing and Signatures\n\n作者：Hugo Krawczyk, Tal Rabin\n\n时间：1997\n\n---\n\n### Based on Claw-free Trapdoor Permutations  \n\n#### General Construction\n\n##### 计算过程\n\n![](变色龙哈希学习笔记\\image-20241124144432630.png)\n\n![](变色龙哈希学习笔记\\image-20241124144500854.png)\n\n##### 实验代码\n\n```\n#基于线性方程进行模拟\nimport random\nimport gmpy2\nfrom Crypto.Util.number import *\n\na = 0 ; b = 0 ; c = 0 ; d = 0 ; p = 0\n\ndef init():\n    global a, b, c, d, p\n    p = getPrime(512)\n    while True:\n        a = random.randint(1, 2**512)\n        c = random.randint(1, 2**512)\n        if gmpy2.gcd(a, p) == 1 and gmpy2.gcd(c, p) == 1:  # 确保 a 和 c 与 p 互质\n            break\n    b = random.randint(1, 2**512)\n    d = random.randint(1, 2**512)\n\n# 线性变换函数\ndef f1(x):\n    return (a * x + b) % p\n\ndef f2(x):\n    return (c * x + d) % p\n\n# 线性变换逆函数\ndef inv_f1(y):\n    return (y - b) * gmpy2.invert(a, p) % p\n\ndef inv_f2(y):\n    return (y - d) * gmpy2.invert(c, p) % p\n\nif __name__ == '__main__':\n    init()\n    m1 = bytes_to_long(b'flag{Chameleon_Hash_is_good}')\n    r1 = random.randint( 1 , p - 1 )\n\n    # 计算 H(m1, r1)\n    H = r1\n    for i in str(bin(m1)[2:]):\n        if i == '1':\n            H = f1(H)\n        else:\n            H = f2(H)\n    print(f\"H(m1, r1): {H}\")\n\n    m2 = bytes_to_long(b'flag{I_agree_with_msg1}')\n\n    # 构造新的随机数 r2，使 H(m1, r1) = H(m2, r2)\n    r2 = H\n    for i in reversed(str(bin(m2)[2:])):  # 逆序推回原随机数\n        if i == '1':\n            r2 = inv_f1(r2)\n        else:\n            r2 = inv_f2(r2)\n    print(f\"Recovered r2: {r2}\")\n\n    # 验证碰撞：计算 H(m2, r2)\n    H2 = r2\n    for i in str(bin(m2)[2:]):\n        if i == '1':\n            H2 = f1(H2)\n        else:\n            H2 = f2(H2)\n    print(f\"H(m2, r2): {H2}\")\n\n    # 验证碰撞结果\n    if H == H2:\n        print(\"Hash collision successful!\")\n    else:\n        print(\"Hash collision failed!\")\n```\n\n#### Based on the Intractability of Factoring  \n\n##### 系统参数\n\n![](变色龙哈希学习笔记\\image-20241124145028359.png)\n\n##### 计算过程\n\n![](变色龙哈希学习笔记\\image-20241124145111175.png)\n\n![](变色龙哈希学习笔记\\image-20241124145458358.png)\n\n##### 困难问题\n\n该问题的核心为平方根的计算，可以规约到因数分解问题\n\n给定 $n = p \\cdot q$ 和一个整数 $y \\in \\mathbb{Z}_n$，想要找到 $x \\in \\mathbb{Z}_n$ 使得：\n$$\nx^2 \\equiv y \\mod n\n$$\n也就是计算 $y$ 在模 $n$ 下的平方根。\n\n这在一般情况下是一个困难的问题，除非知道 $n$ 的两个素因数 $p$ 和 $q$。\n\n![](变色龙哈希学习笔记\\image-20241124145848008.png)\n\n##### 实验代码\n\n```\n#总是有问题，后面再解决\n```\n\n#### Based on Discrete Log  \n\n##### 系统参数\n\n![](变色龙哈希学习笔记\\image-20241124150443879.png)\n\n##### 计算过程\n\n![](变色龙哈希学习笔记\\image-20241124150515030.png)\n\n##### 推导\n\n已知 $CH(m,r) = g^m\\cdot y^r$\n\n即 $CH(m,r) = g^m\\cdot g^{x\\cdot r} = g^{m+x\\cdot r}$\n\n故令 $CH(m',r')\\equiv CH(m,r)\\mod p$\n\n有 $g^{m'+x\\cdot r'}\\equiv g^{m+x\\cdot r}\\mod p$\n\n即 $m'+x\\cdot r'\\equiv m+x\\cdot r\\mod q$\n\n移项得到 $r'\\equiv r+\\frac{m-m'}{x}\\mod q$\n\n##### 实验代码\n\n```\n#具体见比赛代码\nSK = random.randint(1, q)\nPK = pow( g , x , p )\n\nr1 = random.randint(1, q)\nCH = pow( g , h , p ) * pow( PK , r1 , p ) % p\nr2 = exgcd(SK,q)[0] * ( H(m1) - H(M2) + SK * r1 ) % q\n```\n\n### Chameleon Signature Schemes  \n\n#### Chameleon Signing  \n\n##### 签名步骤\n\n![](变色龙哈希学习笔记\\image-20241124152140812.png)\n\n##### 验证步骤\n\n![](变色龙哈希学习笔记\\image-20241124152215559.png)\n\n##### 争议解决\n\n![](变色龙哈希学习笔记\\image-20241124152245224.png)\n\n#### Enhancements\n\n##### The recipient's identity\n\n签名时不仅绑定消息的哈希值，还绑定接收者 RRR 的身份 $id_R$。这样可以避免签名者更改签名中的身份信息。\n\n##### Exposure-freeness\n\n##### Memory requirements\n\n#### Security Requirements  \n\n### A Full Chameleon Signature Scheme  \n\n#### Algorithm\n\n![](变色龙哈希学习笔记\\image-20241124153839032.png)\n\n![](变色龙哈希学习笔记\\image-20241124153903831.png)\n\n---\n\n## Chameleon Hashing without Key Exposure  \n\n作者：Xiaofeng Chen\n\n时间：2004\n\n---\n\n### Preliminary Works  \n\n#### Gap Diffie-Hellman Group  \n\n设 $G$ 是一个由生成元 $g$ 生成的循环乘法群，其阶数为素数 $q$。假设 $G$ 上的求逆运算和乘法运算可以高效完成。在这样的群 $G$ 上，定义以下三个问题：\n\n![](变色龙哈希学习笔记\\image-20241124161938171.png)\n\n\n\n一个群 $G$ 被称为 Gap Diffie-Hellman 群，如果：\n\n1. 判定性 Diffie-Hellman 问题（DDHP）可以在多项式时间内高效解决。\n2. 计算性 Diffie-Hellman 问题（CDHP）在没有特殊辅助信息的情况下没有多项式时间算法能够解决。\n\n换句话说，在这样的群中，验证 $g^c = g^{ab}$ 是简单的，但直接计算$g^{ab}$ 是困难的。\n\n#### Chameleon Hashing\n\n##### Composition\n\n![](变色龙哈希学习笔记\\image-20241124162706889.png)\n\n![](变色龙哈希学习笔记\\image-20241124162723878.png)\n\n##### Security properties \n\n![](变色龙哈希学习笔记\\image-20241124162905738.png)\n\n##### Mention\n\n“Key Exposure Problem\" is not but——\n\n![](变色龙哈希学习笔记\\image-20241125121442330.png)\n\n（这一条存疑）\n\n#### how to key_exp\n\n$$\nCH(m)=g^{m+x\\cdot r} \\\\\nCH(m')=g^{m'+x\\cdot r'}\n$$\n\n$g$是系统公共参数，已知\n\n$$\n\\begin{flalign}\n已知&\\ g^my^r=g^{m'}y^{r'}\\\\\n所以有&\\ g^mg^{x\\cdot r}=g^{m'}y^{x\\cdot r'}\\\\\n则有&\\ m+x\\cdot r=m'+x\\cdot r'\\\\\n移项得到&\\ x=\\frac{m-m'}{r'-r}\n\\end{flalign}\n$$\n\n## On the Key Exposure Problem in Chameleon Hashes\n\n作者：Giuseppe Ateniese\n\n时间：2004\n\n---\n\n### Introduction\n\n上一篇论文提供了一种密钥无暴露变色龙哈希函数的具体构造，该函数在具有双线性配对的 Gap 群设置下工作。虽然这无疑是密钥无暴露变色龙哈希的第一个完整构造，但它并没有解决是否存在基于其他加密假设或更高效方案的构造的问题，例如与 [12] 中的原始变色龙哈希函数具有可比性能的构造。\n\nAteniese, G., de Medeiros, B.:\nIdentity-based chameleon hash and applications.\nIn Fi-\nnancial Cryptography 2004. LNCS 3110, Springer-Verlag (2004) 164–180. Available online at\nhttp://eprint.iacr.org/2003/167/.\n\n","tags":["Crypto"]},{"title":"记录一道2024.11.17做法南辕北辙的简单算法题","url":"/2024/11/21/记录一道2024-11-17做法南辕北辙的简单算法题/","content":"\n[Codeforces Round 988 (Div. 3)](https://codeforces.com/contest/2037)因为当天有点头疼，飞速过了ABC，D卡住了，就去睡觉了\n\n后来发现做法南辕北辙了\n\n题目链接：[D. Sharky Surfing](https://codeforces.com/contest/2037/problem/D)\n\n<!--more-->\n\n我的思路：\n\n大致是从后往前扫，每次都要排序一次，然后选最优的\n\n```\n#include<iostream>\n#include<algorithm>\n#define int long long\nusing namespace std;\n\nconst int N = 2e5;\nint n , m , L;\nint l[N+10] , r[N+10];\nint x[N+10] , v[N+10];\nint tempque[N+10] , top = 0;\n\nsigned main()\n{\n    // ios::sync_with_stdio( false );\n    int t;cin >> t;\n    while( t -- ){\n        cin >> n >> m >> L;\n        for(int i = 1;i <= n;i ++){\n            cin >> l[i] >> r[i];\n        }\n        for(int i = 1;i <= m;i ++){\n            cin >> x[i] >> v[i];\n        }\n        int jump_max = 0;\n        for(int i = 1;i <= m;i ++){\n            if( x[i] < l[n] ) jump_max += v[i];\n        }\n        int ans = 0;bool flag = 1;\n        for(int i = n,j = m;j >= 1;i --){\n            if( jump_max > r[i] - l[i] + 1 ){\n                top = 0;\n                while( x[j] > l[i] ){\n                    j --;\n                }\n                while( x[j] > l[i-1] ){\n                    tempque[++top] = v[j--]; \n                }\n                if( top == 0 ) continue;\n                sort( tempque + 1 , tempque + top + 1 );\n                int k = 1;\n                cout << \"jp: \" << jump_max << endl;\n                while( jump_max - tempque[k] > r[i] - l[i] + 1 ){\n                    cout << \"del: \" << jump_max << \" \" << tempque[k] << endl;\n                    cout << \"de2: \" << i << \" \" << r[i] - l[i] + 1 << endl;\n                    jump_max -= tempque[k++];\n                    ans ++;\n                    if( k == top ) break;\n                }cout << \"K1: \" << k << \" \" << top << endl;\n                while( k <= top ) jump_max -= tempque[k++];\n                for(int kk = 1;kk <= top;kk ++) tempque[kk] = 0;\n            }else{\n                cout << -1 << endl;\n                flag = 0;\n                break;\n            }\n        }if( flag ) cout << ans << endl;\n        // for(int j = 1;j <= m;j ++) tempque[j] = 0;\n    }\n    return 0;\n}\n```\n\n后来第二个测试点的第一百多行wa了，我意识到做法假了，去看题解了\n\n正解：正着扫，直接用堆存，贪心最大\n\n```\n#include<iostream>\n#include<queue>\n#include<algorithm>\n#define int long long\n\nusing namespace std;\n\npriority_queue< int , vector< int > , less < int > > q;\n\nconst int N = 2e5;\nint n , m , L;\nint l[N+10] , r[N+10];\nint x[N+10] , v[N+10];\n\nsigned main()\n{\n    ios::sync_with_stdio( false );\n    int t;cin >> t;\n    while( t -- ){\n        cin >> n >> m >> L;\n        for(int i = 1;i <= n;i ++){\n            cin >> l[i] >> r[i];\n        }\n        for(int i = 1;i <= m;i ++){\n            cin >> x[i] >> v[i];\n        }\n        int ans = 0 , jump_range = 0;\n        int tool_top = 1;\n        for(int i = 1;i <= n;i ++){\n            while( l[i] > x[tool_top] && tool_top <= m ){\n                q.push(v[tool_top++]);\n            }\n            while( r[i] - l[i] + 1 > jump_range ){\n                if( q.empty() ) {\n                    ans = -1;break;\n                }\n                jump_range += q.top();\n                q.pop();ans ++;\n            }if( ans == -1 ) break;\n        }while( !q.empty() ) q.pop();\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n\n总结：\n\n不要钻牛角尖；简单题想复杂了，可以先吃点东西~\n\n","tags":["算法竞赛"]},{"title":"2024.11.13组会","url":"/2024/11/13/2024-11-13组会/","content":"\n要锻炼PPT制作能力——多看PPT，然后直接上手做；PPT要多图\n\n现在的A会相当于五年前的A刊——水涨船高\n\ncrypto还没有卷到子刊，ai已经开始卷子刊了\n\n从审稿人的角度看有没有意义，让审稿人买账就可以投a会以上\n\n写综述，每一块的框架大致相同，例如`背景->功能->...`这样子，Conclusion和表格什么的单独把握\n\n","tags":["meetings"]},{"title":"第九届全国密码技术竞赛参赛游记","url":"/2024/11/12/第九届全国密码技术竞赛参赛游记/","content":"\n确切而言，这并不能算得上是游记，因为是个线上作品赛，然后没晋级\n\n不过收获的东西也不少，值得记录一下\n\n<!--more-->\n\n[竞赛官网](https://www.chinacodes.com.cn/)\n\n比赛刚开始报名，我还是个什么都不懂的小白（虽然现在也是）\n\n然后师兄师姐们在那边弄比赛，问我要不要一起报名，这种好事当然要报名（\n\n然后就有了这篇游记（也算是游记吧\n\n---\n\n这次比赛我负责的是文档部分，当然代码也需要看懂\n\n师兄写的代码很直观很可读，很容易就读完了，然后开始写文档\n\n这算是我第一次写这种文档，还在积累经验中\n\n后续逐渐完善，然后交上了，然后······就没有然后了~\n\n---\n\n通过比赛我学到的东西：\n\n1. 关于密码学，什么是有贡献的，什么是无效的\n\n无效的是指，简单的缝合怪，把已有成果结合在一起，但是对学术界帮助不大\n\n有贡献的是指，切切实实有创新点，例如给某个密码学算法新增了某个功能，或者提高安全性这样子\n\n这次比赛，我们写的东西（不方便透露）应当算是比较无共享的，单纯将一些东西缝合在一起（当然也有可能是我写文档写得不好导致的）\n\n虽然有代码实现，但是并未将这个作为亮点来展示，没有坚持一开始的方案（也是因为遇到的困难过多了）\n\n2. 写文件的要细心\n\n![](第九届全国密码技术竞赛参赛游记\\1.jpg)\n\n感谢导师给改的文章，我看完导师标的内容，感觉要替导师吐血了——怎么这么多格式有问题的\n\n文件保存好了，以后写文章要再翻阅\n\n3. 赛后看了隔壁组师兄的作品，发现了差距\n\n无论是作品含金量和页面颜值，我们都是被碾压的\n\n然后又看了看师兄做的PPT，很多图片，很好看\n\n我意识到，读研的话做PPT做的好看十分重要；所以需要多收集一些做的好看的PPT进行阅读和模仿\n\n4. 然后就是学期计划，该推进度了（悲\n\n二八定律：百分之70的学期过去了，只完成了30%的task\n\n无论如何，加油加油\n\n![](第九届全国密码技术竞赛参赛游记\\2.gif)\n\n\n\n---\n\n**密码学竞赛作品制作有感24-10-17**\n\n最近和两个师兄在准备密码学竞赛，我们的作品是online-offline 数字签名，用sm2和sm3去实现\n\n最一开始我重构了一下变色龙哈希文件的内容，去掉了没有用的代码，顺便改了一下库函数（因为有一个库，pip无法直接安装）\n\n之后文档大致完成之后，因为是在线离线签名，可以应用在轻量级设备上，所以我想移植到单片机上，但是stm32仅支持c/cpp，然后买了个pico，但是开发经验太少导致不会玩，于是转回stm32，最终耗时二十小时左右，最终被玄学问题卡住了\n\n之后计划使用centos-mini运行代码测试效率，开始搭建环境······\n\n然后看了一下师兄画的图，和导师交流了一下，得知以上我做的对比赛而言并不是很重要，重要的是在图表中展示出效率之高\n\n然后微调了一下代码···\n\n```\n改之前:\n验证结果为:1\n总时间为:1.7519575000042096\n在线时间:1.1509204999892972\n改之后:\n验证结果为:1\n总时间为:1.7590351999970153\n在线时间:0.5761120000388473\n```\n\n效率飙升！\n\n画出来的图表也十分可观\n\n后来总结了一下，写文章重要的是怎么让专家看着觉得做出东西了，尤其是画图，一定要展现出轻量级（具体值少于1s就可以了），所以数据选择很重要；还有就是注意细节，每个点都要多校验一遍\n\n","tags":["游记"]},{"title":"LIS学习笔记","url":"/2024/11/11/LIS学习笔记/","content":"\n前情提要：蓝桥杯校赛压轴题，是道朴素最长上升子序列板子题；没做出来，故学习记录一下\n\n<!--more-->\n\n![](LIS学习笔记\\1.jpg)\n\n### [题目链接](https://www.luogu.com.cn/problem/B3637)\n\n设原数列为 `1,2,4,1,3,4`，$f(x)$ 表示以第 $i$ 个数为结尾的最长上升子序列的长度\n\n| n      | 1    | 2    | 3    | 4    | 5    | 6    |\n| ------ | ---- | ---- | ---- | ---- | ---- | ---- |\n| $a_i$  | 1    | 2    | 4    | 1    | 3    | 4    |\n| $f(n)$ | 1    | 2    | 3    | 1    | 3    | 4    |\n\n### 代码实现\n\n- 读入数据\n- 大循环开始，从 $1$ 到 $n$，计算 $f_i$，记得初始值是 $1$\n- 小循环，从 $1$ 到 $i−1$，如果 $a_j$ 小于 $a_i$ 的话，说明这个数可以和 $f_i$ 组成上升子序列，则 $f_i$ 取 $max⁡(f_i,f_j+1)$\n- 寻找最大值\n\n### 具体代码\n\n```\n#include<iostream>\nusing namespace std;\n\nconst int N = 5e3;\nint a[N+10];\nint f[N+10];\n\nsigned main(){\n    int n;cin >> n;\n    for(int i = 1;i <= n;i ++) cin >> a[i];\n    for(int i = 1;i <= n;i ++){\n        f[i] = 1;\n        for(int j = 1;j <= i-1;j ++){\n            if( a[j] < a[i] ) f[i] = max( f[i] , f[j]+1 );\n        }\n    }int ans = 0;\n    for(int i = 1;i <= n;i ++) ans = max( ans , f[i] );\n    cout << ans << endl;\n    return 0;\n}\n```\n\n### 二分优化\n\n我们定义一个数组 `tails`，其中 `tails[k]` 表示长度为 $k+1$ 的上升子序列的最小尾元素。该数组帮助我们追踪可能构成的上升子序列的最小值，从而达到优化的效果。算法的核心步骤是：\n\n1. 遍历数组 `a` 中的每个元素 `num`。\n\n2. 使用二分查找在 `tails` 中找到第一个大于等于 `num` 的位置 `pos`。\n\n   - 如果 `pos` 等于 `tails` 的长度，说明 `num` 比 `tails` 中所有元素都大，可以直接将 `num` 添加到 `tails` 末尾，增加子序列长度。\n\n   - 否则，用 `num` 替换 `tails[pos]`，以确保 `tails` 保持递增且末尾值尽可能小。\n\n3. 最终 `tails` 的长度即为最长上升子序列的长度。\n\n```\n#include<iostream>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n\nconst int N = 5e3;\nint a[N+10];\n\nsigned main(){\n    int n;cin >> n;\n    for(int i = 1;i <= n;i ++) cin >> a[i];\n    vector< int > tails;\n    for(int i = 1;i <= n;i ++){\n        int num = a[i];\n        auto pos = lower_bound( tails.begin() , tails.end() , num );\n        if( pos == tails.end() ){\n            tails.push_back( num );// 如果 num 比所有元素都大，添加到末尾\n        }else{\n            *pos = num;// 替换找到的第一个 >= num 的位置，保证尾部元素尽量小\n        }\n    }\n    cout << tails.size() << endl;\n    return 0;\n}\n```\n\n","tags":["算法竞赛"]},{"title":"荔枝橙味CF糕守","url":"/2024/11/11/荔枝橙味CF糕守/","content":"\n本文汇总了CF如何上分的两篇博客\n\n<!--more-->\n\n# 来源于2426\n\n## rating 1000-1400\n\n到达青名（1400）需要做到三点。\n\n- 能够快速写出模拟题（5到10分钟内）\n- 能够快速写出暴力（5到10分钟内）\n- 能够在脑子里或草稿纸上把问题分情况讨论（例如，N=2、N=3、N>=4）\n\n举个例子，在Codeforces Round #556中，如果你可以做到以上三点，就可以很惊喜地在Div2中达到200名，这是一个很夸张的例子。但在Codeforces Round #554 (Div. 2)中，你只能达到3400名，rating1250及以下的参赛者可以上分。\n\n平均来说，如果你可以做到以上三点，rating就可以达到1400。\n\n**[[如何训练]]**\n\n首先，建议打ABC；尽管CF上有很多好题，但如果你想更容易地练习编程，最好去刷AtCoder。\n\n特别地，推荐做ABC中的B题和C题。做B题可以学到如何更快地写模拟和暴力，做C题可以学到如何想题、如何用草稿纸更快地想出解决方案。如果你切了所有的B题和C题，就会学到很多，变得更强。\n\n可以借助[AtCoder problems](https://kenkoooo.com/atcoder#/table//)的帮助刷AtCoder，你能从这个网站知道自己做了哪些题。\n\n当你刷AtCoder时，有几点很重要：\n\n- 当你想不出解决方案时，应该在思考B题15分钟、思考C题30分钟后再看题解。可悲的是，最近几场ABC没有英文题解，但你可以读标程（题解中很可能包含标程的链接）。\n- 即使你AC了某道题，在习惯快速写代码前，还是可以通过阅读大佬的源代码学到一些东西。所以建议看一些简单的源代码。\n- 特别是当你做C题时，推荐你用草稿纸辅助思考。不用纸的话，用白板打草稿也可以。\n\n## rating 1400~1900\n\nCF上人数最多的rating区间是[1400, 1500]。他们都很想上分，但从1500开始上分比较困难，很多人放弃了。但也有很多人坚持训练，成功上分。\n\n要达到1900，需要下面的技巧：\n\n- 掌握并能够使用以下主要算法：\n\n  - 暴力\n  - 动态规划\n  - 深度优先搜索\n  - 广度优先搜索\n  - 迪杰斯特拉\n  - 树状数组\n  - 排列数、组合数\n  - 乘法逆元\n  - 位掩码\n  - 二分查找\n\n  注意：一般而言在rating 1800前，线段树不是必须的。上紫以后才需要学的线段树。\n\n- 提高手速（例如，R1100的题目5分钟写好，R1400的题目10分钟写好）。手速在CF很重要，因为一般来说，如果题目难度范围很大，手速会在很大程度上影响rating。\n\n**[[如何训练]]**\n\n如果你不擅长快速写代码、快速调试，就应该刷AtCoder。事实上，从统计学上讲，很多日本选手手速很快，但不擅长解决难题，觉得是AtCoder的锅。\n\n推荐做ABC的C题和D题。平均来说，如果能在10分钟内解决C题，在20分钟内解决D题，你就是手速场中的Div1\n\n如果你不擅长解难度高于R1400的题，就应该学一些上面提到的算法，做做CF上的板题。举个例子，如果你觉得自己不擅长DP，就刷CF上R1200到R1400的DP标签的题。让人惊讶的是，只有约50道难度小于等于R1400的DP标签的题。\n\n有趣的是，板题都集中在只有Div2的那些比赛中。如果你不擅长只有Div2的比赛，那么很可能是你不擅长使用典型算法，尤其是上面提到的10种算法。\n\n如果你能做板题，但不擅长做难度高于R1500的题，就要开始在TopCoder刷题。这类练习对擅长只有Div2的比赛但不擅长Div1+Div2一体的、分开的比赛的人十分有效。\n\n有时候，尤其是在Div1+Div2的比赛中，一些题目需要数学概念或者思考。因为TopCoder上有很多题用到这些（另外还有简便的实现！），所以你应该刷TopCoder。\n\n推荐刷最近100场SRM的Div1简单。但有些题真的太难了（甚至粉名都切不掉），所以刷之前，你应该看一下题目的通过率。你可以利用https://competitiveprogramming.info/来获取一些信息。\n\n不幸的是，不知道有没有像AtCoder Problems那样，能够看自己在TopCoder SRM中做过哪些题的网站。所以，如果你想记录自己刷过那些题，应该做一个电子表格或者表格，例如：https://drive.google.com/file/d/1mSy9PM4Km8EVv8Lp4nhitorOe2HbAS1e/view?usp=sharing\n\n当还是个蓝名时，数学思维也很糟糕。在切了50题Div1简单以后，在TopCoder成了蓝名，在CF成了紫名\n\n如果你擅长切题，但在比赛中发挥不好，就应该多打虚拟赛。你知道CF的虚拟赛系统吗？你可以虚拟参赛！\n\n## rating 1900~2200\n\n如果你想达到2200，首先，你应该是Div1，并且参加Div1的比赛。这意味着你应该刷很多难题（R1900或更高）\n\n即使你手速快或者十分擅长切板题，打Div1比赛也是很难的。可悲的是，有很多选手在蓝名和紫名之间摇摆\n\n要达到2200，需要以下技巧：\n\n- 知道并且会用上面提到的10种算法，还要加个线段树（包括懒标记）\n- 非常快的手速：R1100 5分钟，R1500 10分钟，R1800 15分钟，R2000 40分钟\n- 相当好的数学思维和思考问题的能力\n- 强大的思维，可以支持超过1小时的思考，即使在Div1比赛中途落后了也不放弃\n\n**[[如何训练]]**\n\n这只是的训练方式：在rating2000时打了很多虚拟比赛。在这里，虚拟比赛并不意味着“虚拟参与”，而是选择4到5道难度在自己rating附近的题目（举个例子，目前rating是2000，那么选择CF中R2000的题目），并且在2小时内切掉\n\n你可以利用https://vjudge.net/。在这个网站，你可以从很多OJ上（AtCoder、CF、Hackerrank、Codechef、POJ……）拉题组一场虚拟赛\n\n如果你在虚拟赛中不能切掉这些题，而且没有想出解决方案，就应该去谷歌查题解（举个例子，如果你想找Codeforces Round #556 (Div. 1)的题解，就去谷歌搜“Codeforces Round #556 editorial”）\n\n在CF上分还有一件重要的事。为了更快的手速，你应该准备一些板子。例如，认为线段树板子、懒标记线段树板子、CRT的板子、FFT的板子、计算几何板子等等都是很有效的\n\n### rating 2200~2400\n\n这是本博客关于训练技巧的最后一部分。事实上，卡在橙名很久了，就连在虚拟赛中平均表现也是橙名。这是因为之前的训练方法在橙名遇到了障碍\n\nRating 2200到2400事实上非常难——如果你平均表现2200，如果你练习赛打得更多，上粉（到2400）看上去也没那么难。但是平均表现2400比你想象的要难得多。如果你的rating正好是2400，那么在Div1的比赛上，你一般要打进前20%（例如，如果有525人参加，那么你应该最差在105名）才能上分\n\n要达到2400，需要以下技巧：\n\n- Rating达到2200\n- 在Div1比赛中切掉AC少于100人的难题\n\n如果你想切难题和用ad-hoc临时方法的题，根据TozanSoutherPacks在上一篇博客下的评论（http://codeforces.com/blog/entry/53341?#comment-373965），“要达到2600分乃至更高，你应该切Boss题，所有这些都是临时问题或者步骤很多的问题。”觉得那是对的，但是对来说，觉得即使你只想达到2400分，切步骤很多的临时问题也是有必要的。\n\n**[[如何训练]]**\n\n达到2400分最安全的方法是“切4000道题”。就在TopCoder、AtCoder、CF等OJ上切了超过4000题\n\n事实上，有一个传说（或者说是事实）是，最NB的选手tourist在他这辈子切了一万多题\n\n但是可能很多人觉得自己没时间。所以会给你一些更高效的途径\n\n首先，AtCoder上有很多教育题。推荐你做**ARC尤其是ARC058到ARC090**的E题和F题（尤其是AtCoder中700到900点的题目）。尽管以前的ARC在“思维”和“模板”之间是平衡的，但可悲的是，认为AGC和最近的ARC实际上太偏向思维了，所以如果你的目标是在CF上分，不推荐它们（尽管如果你想达到2600乃至更高，还是要刷AGC）\n\n对来说，实际上，刷了ARC以后，在CF虚拟赛的平均表现从2100提高到了2300（I could not reach 2400 because start was early）\n\n如果你切不动题，推荐你放弃思考并且看题解的时间如下：\n\n| AtCoder点值 | CF难度 | 思考时间 |\n| ----------- | ------ | -------- |\n| 600         | R2000  | 40分钟   |\n| 700         | R2200  | 50分钟   |\n| 800         | R2400  | 60分钟   |\n| 900         | R2600  | 70分钟   |\n| 1000        | R2800  | 80分钟   |\n\n如果你切了AtCoder上的教育题，你编程比赛的技能将会有所提高。但还有另一个问题，没有付诸实践，你没办法上分\n\n所以，你应该至少在CF上打50场虚拟赛（尤其是Div1）。在虚拟赛中，你可以学到，紫名、橙名应该如何打比赛（比如比赛策略），以及如何在CF比赛中利用在AtCoder学到的技巧。**强烈推荐在虚拟赛后看看所有题的题解，除了太难的题**（比如在比赛中AC人数少于30的题）。还建议，在打完比赛看完题解后在笔记本上写一些对于比赛策略、教训和可以改进的地方的反思\n\n此外，建议你每周一次，花点时间思考一些难题（比如CF上R2800的题）。如果你想了很久也想不出来，建议你去读题解，因为那样你可以学到很多。解决难题可能会给你一场上分100+的机会，也会给你更快解决简单题的机会\n\n最后，猜这个方法对于超过30%的人奏效，因为用这个方法在CF上粉，square1001用这个方法在TopCoder上红。希望的方法可以产生新的粉名\n\n## 训练心理\n\n心理问题是选手中最常见的问题之一。即使对，直到最近两个月前，出于对一场掉分100+的恐惧，超过9个月没打过CF上rated的比赛。另外，还有几场比赛甚至都做不到看下一个题，因为做不出来更简单的题，心态崩了\n\n最近发现一种锻炼心态的办法\n\n- 制定一个比赛前的常规程序。这能让们在比赛期间集中注意力\n  - 事实上，就而言，的常规程序是在比赛快开始时看着倒计时减少到0。黑红大佬yutaka1999实际上在IOI开始前就在修禅\n- 如果你比赛中没发挥好（比如20分钟内切不掉B题），不去看榜也是个好主意\n- 还有一件重要的事：“比赛过程中不要管rating”\n  - 觉得，即使这场要掉分，下一场上分的可能性也提高了。这就是为什么在比赛过程中不管rating\n- 不要过于在意之前犯过的错误。错误也是一次好的学习机会，每个人都会犯错。即使是tourist也曾经在AtCoder World Tour Finals上翻车\n  - 觉得吧，“rating”和“你犯过多少错、做过多少**反思**”之间存在关联\n\n以上这些方法不仅在正式比赛中适用，还在虚拟赛中适用。注意：比赛中不要有太大的压力，开心就好\n\n![](荔枝橙味CF糕守\\image-20241111140735122.png)\n\n# 来源于2909\n\n上级篇是针对想成为AtCoder黄名（2000+，对应CF2200+），以及橙名（2400，对应CF2522+）阶段的选手的进步指南\n\n![](荔枝橙味CF糕守\\image-20241111142431742.png)\n\n右边的评价来自于AtCoder的老版chokudai的[博客](https://chokudai.hatenablog.com/entry/2019/02/11/155904)\n\n![](荔枝橙味CF糕守\\psc3.png)\n\n## 成为黄名选手的6个要求\n\n为了在AtCoder里成为黄名，你需要达到2000分（CF2200分）\n\n1. 在AtCoder Beginner Contest里稳定切掉5题\n2. 在AtCoder Beginner Conetst里半数情况切掉6题\n3. 简单的问题（500分内）尽快解决\n4. 根据相关数据，A题1分内，B题2分内，C题5分内，D题10分内，E题20分内比较合理\n5. 理论上你最好在40分钟内切掉5题\n6. AGC之类对数学要求比较高的比赛里，最好能切掉2题\n\n这是在竞赛里黄名选手的平均表现。为了保持这个表现，你需要做到以下6点。当然水色选手要做到的4点你也要做到（中级篇内容）\n\n**条件1**\n挑战程序设计竞赛（AKA蚁书）上面记载的大部分算法和数据结构都要理解。具体来说，需要了解以下23个算法和5个数据结构\n\n中级篇2-1节里的12个算法和3个数据结构\n\n```\n枚举\t二分搜索\t深度优先搜索\t广度优先搜索\n动态规划\tDijkstra\tFloyd\tKruskal\n线性筛\t快速幂\t逆元\t前缀和·差分\n图论\t树\t并查集\t\n```\n\n中级篇没有提到但是挑战里写过的11个算法\n\n```\n离散化\t分治\t矩阵乘\t\n博弈论(原文是Grundy数)\t字符串哈希 分块\t\n最小割\t二分图判定 二分图匹配\t\n```\n\n\n中级篇没有提到但是挑战里写过的2个数据结构\n\n```\n树状数组 线段树与懒标记\n```\n\n**条件2**\n\n条件1介绍的算法和数据结构，在各种比赛里学会使用，同时将本文介绍的算法和数据结构熟练掌握，变成自己的东西\n\n**条件3**\n有一定的数学能力\n\n在AtCoder里，不仅仅考验你能否灵活使用各种算法的能力，也频繁出现了大量的数学问题（和中级篇2-3里95-100的问题一样），问题也越来越难和多样。因此，为了成为黄名选手，要多多做一些数学题\n\n**条件4**\n\n25行左右的程序，基本Bug Free写出来\n\n60行左右的程序，基本很快地写出来，出了BUG也能在10分钟内解决\n\n实际上，60行左右的程序，能够30分钟内写完并且de完bug，是大概率能AK掉ABC的\n\n**条件5**\n\n打字速度要快！经验来讲，1分钟要350个字符才够用\n\n实际上，一些高排名选手里也有打字很慢的人（200个字符左右），但是想在ABC里拿到好成绩，打字速度实在太重要了\n\n比如说AtCoder 148里，30分钟AK和40分钟AK，差距250以上的表现分\n\n**条件6**\n\n一般来说，AtCoder的过去的题目要做1000题以上\n\n**补充**\n\n以上的6个条件满足了的话，ABC的E问题基本难不倒你。F问题的话，如果是超过250人做出来的场次，你应该也能做出来才对\n\n顺便一提，最近15场ABC（141~155），F问题做出来的超过250人的场次有7场。因此AK掉ABC的概率应该是3-5成\n\n满足了6个条件，再练练数学能力，AGC的问题解决出来的概率应该会慢慢增加\n\n## 总结\n\n1. 掌握11个全新的算法\n2. 学会2个新的数据结构\n3. 去解决TopCoder SRM的问题，锻炼数学能力\n4. 去解决JOI（日本信奥）的题目，锻炼能力\n5. 解决以前Contest的题目\n6. 多多VP找感觉\n7. 练打字速度\n\n---\n\nreferences:\n\nhttps://www.cnblogs.com/wawcac-blog/articles/12245307.html#3-1-%E8%AE%AD%E7%BB%83%E6%8A%80%E5%B7%A7-rating-10001400\n\nhttps://www.acwing.com/blog/content/15042/\n\nhttps://juejin.cn/post/7186915748395270201\n\nhttps://www.luogu.com.cn/article/yx1u034q\n\nhttps://blog.csdn.net/m0_45699242/article/details/123741377\n\nhttps://github.com/azl397985856/cf\n","tags":["算法竞赛"]},{"title":"hal库c6t6 Freerots","url":"/2024/11/08/hal库c6t6-Freerots/","content":"\n写篇博客，不为别的，就怕以后忘了咋整了\n\nFreerots这玩意忒好用了\n\n<!--more-->\n\n# 如何开Freerots\n\nSYS这边选个时钟\n\n![](hal库c6t6-Freerots\\image-20241108173918865.png)\n\n\n\n然后如图一路选下来，别忘了添加任务\n\n![](hal库c6t6-Freerots\\image-20241108174035075.png)\n\n其他的常规配置，然后生成代码就可以了\n\n打开`freertos.c`文件，正常加入点灯代码就可以了\n\n![](hal库c6t6-Freerots\\image-20241108174219193.png)\n\n以上内容的参考：\n\nhttps://www.cnblogs.com/Meiyangyang945/p/15106513.html\n\n---\n\n# 报错1\n\n![](hal库c6t6-Freerots\\image-20241108174332906.png)\n\n买不起好芯片，内存不够\n\n改一下代码里的内容\n\n将`#define configTOTAL_HEAP_SIZE                    ((size_t)10240)`\n\n修改为`#define configTOTAL_HEAP_SIZE                    ((size_t)(1024*5)`即可\n\n参考：\n\nhttps://blog.csdn.net/king110108/article/details/110038173\n\nhttps://file.elecfans.com/web2/M00/9B/99/pYYBAGQip7KAOU2vAAfDySG_a10157.pdf\n\n# 报错2\n\n![](hal库c6t6-Freerots\\image-20241108174700188.png)\n\n一大堆啥玩意哇\n\n贴搜索引擎一看，是cpp导致的\n\n![](hal库c6t6-Freerots\\image-20241108174736008.png)\n\n魔术棒中把`misc_controls`的`--cpp11`去掉即可\n\n参考：\n\nhttps://blog.csdn.net/timberman666/article/details/132723352\n\n# 报错3\n\n数日之后，又出现了报错2的内容\n\n改成多少都没用了\n\n开O2优化即可\n","tags":["RoboMaster"]},{"title":"机器人联盟赛/对抗赛游记回忆记录","url":"/2024/10/31/机器人联盟赛-对抗赛游记回忆记录/","content":"\n整理游记和会议记录的时候，发现机器人比赛的高校联盟赛和超级对抗赛的游记我没有写过，故凭借记忆（和手机相册）补一份\n\n记忆可能会随着时间而失真，故趁现在赶紧记录一份（顺便分享一波图片）\n\n![](机器人联盟赛-对抗赛游记回忆记录\\3.jpg)\n\n<!--more-->\n\n其实我在star机器人比赛的2024赛季中，对队伍的贡献并不是很多，基本上全靠学长带飞\n\n## 高校联盟赛\n\n今年的联盟赛举办在了福建理工，就在隔壁，很近很近\n\n![](机器人联盟赛-对抗赛游记回忆记录\\1.jpg)\n\n比赛前的几天，去福建理工的实验室参观了一下下，好大好大\\~，而且他们还有1v1用的场地\\~\n\n据说是因为他们的RM和RC合并了（思考\n\n新步兵一直在修，平步倒是可以嘎嘎乱杀~\n\n---\n\n报道当天，看到了厦大他们包车过来（好有钱），而且是他们学校自己的车（羡慕.jpg）\n\n![](机器人联盟赛-对抗赛游记回忆记录\\2.jpg)\n\n第一次来RoboMaster的比赛现场，很激动的好叭\n\n（场馆内不让拍照，所以这里该有很多张赛场的照片但是实际上没有）\n\n---\n\n开赛之时，有几次紧急修车紧急换线，学长直接拿着电烙铁焊车上的线，而且是在马上就要检录的时候\n\n有的时候突发卡弹的问题，很多人一顿手忙脚乱，然后被摩擦轮划伤~\n\n（此处少了好几张图片，规定说场馆内不让拍照~）\n\n然后过程中，学长们通了很多宵（联盟赛的时候我本人的作息还是相对正常的），终于夺得季军\n\n![](机器人联盟赛-对抗赛游记回忆记录\\10.jpg)\n\n## 超级对抗赛\n\n这个就比较不一样了，地点是在长沙\n\n![](机器人联盟赛-对抗赛游记回忆记录\\29.jpg)\n\n这次我被分配到的任务是调老步兵\n\n![](机器人联盟赛-对抗赛游记回忆记录\\4.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\9.jpg)\n\n这辆车确实比较抽象，设计有挺多不合理的地方，不过确实能用，而且基本功能也比较完善\n\n最终，把老步兵的代码从能用变成不能用又在学长的帮助下变成能用了（大雾\n\n赛前还去考了一次普通话嘿嘿~\n\n![](机器人联盟赛-对抗赛游记回忆记录\\5.jpg)\n\n然后粗发粗发\n\n![](机器人联盟赛-对抗赛游记回忆记录\\7.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\6.jpg)\n\n昨天晚上学长们通宵调车，然后睡死在高铁上（学长太帅，码一下码一下）\n\n![](机器人联盟赛-对抗赛游记回忆记录\\11.jpg)\n\n刚到长沙，就见识到了大城市的繁华\n\n![](机器人联盟赛-对抗赛游记回忆记录\\12.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\13.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\14.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\15.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\16.jpg)\n\n喝到了正版的茶颜悦色（3pin的吸管嘿嘿）\n\n![](机器人联盟赛-对抗赛游记回忆记录\\23.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\24.jpg)\n\n比赛那几天正好赶上周杰伦的演唱会，好多人好多人\n\n![](机器人联盟赛-对抗赛游记回忆记录\\32.jpg)\n\n---\n\n但是正事，还是打比赛（头一次通宵调车，但实际上还是学长是主力\n\n在羽毛球馆还有很多其他学校一起\n\n![](机器人联盟赛-对抗赛游记回忆记录\\17.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\18.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\19.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\20.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\26.jpg)\n\n检录了检录了\n\n![](机器人联盟赛-对抗赛游记回忆记录\\21.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\25.jpg)\n\n最终因为没有荧光充能，而且其他的车比较健康，备车就没有什么用了\n\n然后我也没什么用了（），就去干后勤了（讲真一个人干后勤真的忙不过来，只能拉上指导老师一块儿来搬东西~）\n\n![](机器人联盟赛-对抗赛游记回忆记录\\30.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\27.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\28.jpg)\n\n开赛了，如果不是裁判系统有问题，北信科就没了\n\n之后又被南航打爆了~\n\n然后就结束了~\n\n![](机器人联盟赛-对抗赛游记回忆记录\\31.jpg)\n\n---\n\n打完比赛，去了趟橘子洲头\n\n![](机器人联盟赛-对抗赛游记回忆记录\\33.jpg)\n\n![](机器人联盟赛-对抗赛游记回忆记录\\34.jpg)\n\n和同学一起去鬼屋玩（再也不穿短裤去了（哭）\n\n![](机器人联盟赛-对抗赛游记回忆记录\\36.jpg)\n\n酒店楼下有份炒粉，我问老板怎么每天都在这卖，他说卖几十年了\n\n![](机器人联盟赛-对抗赛游记回忆记录\\35.jpg)\n\n味道不错\n\n![](机器人联盟赛-对抗赛游记回忆记录\\37.jpg)\n\n第一次听青工会（估计也是最后一次），收获颇丰\n\n![](机器人联盟赛-对抗赛游记回忆记录\\40.jpg)\n\n回来之后新买了个烙铁（钱包滴血ing）\n\n![](机器人联盟赛-对抗赛游记回忆记录\\38.jpg)\n\n---\n\n结语：rm这个比赛，包好的\n\n![](机器人联盟赛-对抗赛游记回忆记录\\22.jpg)\n","tags":["RoboMaster","游记"]},{"title":"会议/竞赛游记合集","url":"/2024/10/30/会议竞赛游记合集/","content":"\n本篇文章用于汇总参加的会议/组会的总结链接\n\n部分内容已加锁\n\n<!--more-->\n\n## 组会\n\n[2024.10.30组会](https://coperlm.github.io/2024/10/30/2024-10-30组会/)\n\n[2024.9.18组会](https://coperlm.github.io/2024/09/19/2024.9.18组会/)\n\n[2024.9.11组会](https://coperlm.github.io/2024/09/11/2024.9.11组会/)\n\n[2024.9.4组会](https://coperlm.github.io/2024/09/02/2024.9.4组会/)\n\n## 其他会议/竞赛\n\n[2024.9.20南洋理工密码学报告 观后总结](https://coperlm.github.io/2024/09/20/2024-9-20南洋理工密码学报告-观后总结/)\n\n[机器人联盟赛/对抗赛游记回忆记录](https://coperlm.github.io/2024/10/31/机器人联盟赛-对抗赛游记回忆记录/)（2024）\n\n[厦大一日游（机器人大赛）](https://coperlm.github.io/2024/08/13/厦大一日游（机器人大赛）/)（2023）\n\n\n\n","tags":["常驻"]},{"title":"2024.10.30组会","url":"/2024/10/30/2024-10-30组会/","content":"\n现在密码学最火的三个方向：多邦安全计算，同态，后量子\n\n使用LaTeX写论文可以使用**宏定义**\n\n门限密码比较火 -> 后异步网络\n\n文献综述写作，一般分三大类，例如对于变色龙哈希，一开始是传统的，后来提出抗密钥泄露的，之后（camilish）提出即时陷门的；签名，区块链。投稿要看影响因子\n\n综述比较好的两个期刊\n\n[IEEE Communications Surveys and Tutorials](https://www.letpub.com.cn/index.php?page=journalapp&view=detail&journalid=3320) 影响因子34，比较难中\n\n[ACM COMPUTING SURVEYS](https://www.letpub.com.cn/index.php?page=journalapp&view=detail&journalid=19) 影响因子23.8\n","tags":["meetings"]},{"title":"网鼎杯2024crypto题解（青龙组）","url":"/2024/10/29/网鼎杯2024crypto题解（青龙组）/","content":"\n目前只更新了青龙组的题目\n\n<!--more-->\n\n## CRYPTO1\n\n```\nfrom Crypto.Util.number import *\nfrom secret import flag\n\np = getPrime(512)\nq = getPrime(512)\nn = p * q\nd = getPrime(299)\ne = inverse(d,(p-1)*(q-1))\nm = bytes_to_long(flag)\nc = pow(m,e,n)\nhint1 = p >> (512-70)\nhint2 = q >> (512-70)\n\nprint(f\"n = {n}\")\nprint(f\"e = {e}\")\nprint(f\"c = {c}\")\nprint(f\"hint1 = {hint1}\")\nprint(f\"hint2 = {hint2}\")\n\nn = 114118679597315994458138232536029700477506764789782067073905766324635160145597602207164997807103187990046901850125798774503781767630201814025142189432534890147340404293319424524872695905368897290630698362559606549134377263394129199145835483978820237203114250882524438599220793209608842281879976692805855046971\ne = 60930873636939710528141652371287627298970658591028170597199994159301433213017349592910581153194811053524011559886529831760967700162629319952838130973563991607758850226327915934518549584588693854388996425152821459866209334446088324204759334980239670811977086959854952233887459542997456604453766160444477603017\nc = 11058775585296329544235824126670578486484201903851563493984057289075513008773878014007377223222464555346135675900619903617528838701118612201290486747980233570288315027654510774940371032813981282018787668864123759554297515664915358447425647424759926416629451915378248520432568536260902676664298855076689608823\nhint1 = 884675140903190287932\nhint2 = 1000130673738973880482\n```\n\n---\n\n和领航杯2023密码学题目bd为重题\n\n原来原来是论文题\n\n有两种解法，一种是基于[格规约](https://www.davidwong.fr/papers/david_wong_rsa_lll_boneh_durfee__2015.pdf)的，另一种是基于[小私指数](https://eprint.iacr.org/2023/367.pdf)的\n\n```\n#reference\nhttps://www.cnblogs.com/mumuhhh/p/17789591.html\nhttps://dexterjie.github.io/2023/09/12/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2023%E9%A2%86%E8%88%AA%E6%9D%AF/?highlight=%E9%A2%86%E8%88%AA%E6%9D%AF#bd\n```\n\n## CRYPTO2\n\n```\n# coding: utf-8\n#!/usr/bin/env python2\n\nimport gmpy2\nimport random\nimport binascii\nfrom hashlib import sha256\nfrom sympy import nextprime\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import pad\nfrom Crypto.Util.number import long_to_bytes\nfrom FLAG import flag\n#flag = 'wdflag{123}'\ndef victory_encrypt(plaintext, key):\n    key = key.upper()\n    key_length = len(key)\n    plaintext = plaintext.upper()\n    ciphertext = ''\n\n    for i, char in enumerate(plaintext):\n        if char.isalpha():\n            shift = ord(key[i % key_length]) - ord('A')\n            encrypted_char = chr((ord(char) - ord('A') + shift) % 26 + ord('A'))\n            ciphertext += encrypted_char\n        else:\n            ciphertext += char\n\n    return ciphertext\n\nvictory_key = \"WANGDINGCUP\"\nvictory_encrypted_flag = victory_encrypt(flag, victory_key)\n\np = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f\na = 0\nb = 7\nxG = 0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798\nyG = 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8\nG = (xG, yG)\nn = 0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\nh = 1\nzero = (0,0)\n\ndA = nextprime(random.randint(0, n))\n\nif dA > n:\n    print(\"warning!!\")\n\ndef addition(t1, t2):\n    if t1 == zero:\n        return t2\n    if t2 == zero:\n        return t2\n    (m1, n1) = t1\n    (m2, n2) = t2\n    if m1 == m2:\n        if n1 == 0 or n1 != n2:\n            return zero\n        else:\n            k = (3 * m1 * m1 + a) % p * gmpy2.invert(2 * n1 , p) % p\n    else:\n        k = (n2 - n1 + p) % p * gmpy2.invert((m2 - m1 + p) % p, p) % p\n    m3 = (k * k % p - m1 - m2 + p * 2) % p\n    n3 = (k * (m1 - m3) % p - n1 + p) % p\n    return (int(m3),int(n3))\n\ndef multiplication(x, k):\n    ans = zero\n    t = 1\n    while(t <= k):\n        if (k &t )>0:\n            ans = addition(ans, x)\n        x = addition(x, x)\n        t <<= 1\n    return ans\n\ndef getrs(z, k):\n    (xp, yp) = P\n    r = xp\n    s = (z + r * dA % n) % n * gmpy2.invert(k, n) % n\n    return r,s\n\nz1 = random.randint(0, p)\nz2 = random.randint(0, p)\nk = random.randint(0, n)\nP = multiplication(G, k)\nhA = multiplication(G, dA)\nr1, s1 = getrs(z1, k)\nr2, s2 = getrs(z2, k)\n\nprint(\"r1 = {}\".format(r1))\nprint(\"r2 = {}\".format(r2))\nprint(\"s1 = {}\".format(s1))\nprint(\"s2 = {}\".format(s2))\nprint(\"z1 = {}\".format(z1))\nprint(\"z2 = {}\".format(z2))\n\nkey = sha256(long_to_bytes(dA)).digest()\ncipher = AES.new(key, AES.MODE_CBC)\niv = cipher.iv\nencrypted_flag = cipher.encrypt(pad(victory_encrypted_flag.encode(), AES.block_size))\nencrypted_flag_hex = binascii.hexlify(iv + encrypted_flag).decode('utf-8')\n\nprint(\"Encrypted flag (AES in CBC mode, hex):\", encrypted_flag_hex)\n\n# output\n# r1 = 28857061626266697731960297346547380130694223166851804642930502594650578288425\n# r2 = 28857061626266697731960297346547380130694223166851804642930502594650578288425\n# s1 = 81842916501936654327181596127464444170184582938148211467350979906270329843047\n# s2 = 54199410087637342004207138894657653701426382978399616033659324046436549994669\n# z1 = 114768147762808206397023700697633814229154932218327120646122869299219028759434\n# z2 = 63513092260201266423877548128429517837199255134650637253201969399356248912467\n# ('Encrypted flag (AES in CBC mode, hex):', u'51559ebae12fdd12e0e84df2baf07e3389b688398a71b62717fb77e0f6abdd40d848ee028b70681bc566ef2729d80b7a2778ad5b322b68501b6bbcef820b4719')\n```\n\n---\n\n观察这一部分\n\n```\ndef getrs(z, k):\n    (xp, yp) = P\n    r = xp\n    s = (z + r * dA % n) % n * gmpy2.invert(k, n) % n\n    return r,s\n\nz1 = random.randint(0, p)\nz2 = random.randint(0, p)\nk = random.randint(0, n)\nP = multiplication(G, k)\nhA = multiplication(G, dA)\nr1, s1 = getrs(z1, k)\nr2, s2 = getrs(z2, k)\n```\n\n已知`z1,z2,r1,r2,s1,s2`\n\n有方程组\n$$\n\\begin{cases}\ns1=(z1+r1*dA)*k^{-1}\\quad\\mod n \\\\\ns2=(z2+r2*dA)*k^{-1}\\quad\\mod n\n\\end{cases}\n$$\n联立消去 $k^{-1}$ 得到 $s1*(z2+r2*dA)=s2*(z1+r1*dA)\\quad\\mod n$\n\n提取出 $dA$ 得到 $dA=(z2*s1-z1-s2)*(s2*r1-r2*s1)^{-1}\\quad\\mod n$\n\n容易得到 $dA$\n\n```\nimport gmpy2\ndA = (z2*s1-z1*s2)*gmpy2.invert(s2*r1-r2*s1,n)%n\nprint( dA )\n```\n\n```\n#output\ndA=10570650820062854135188945698682652204931348462301149982644765996528871376101\n```\n\n无脑解AES和古典即可，这个ai就能干\n\n```\nimport binascii\nfrom Crypto.Cipher import AES\nfrom Crypto.Util.Padding import unpad\nfrom Crypto.Hash import SHA256\nfrom Crypto.Util.number import long_to_bytes\n\n# 使用恢复的私钥 dA\ndA = 10570650820062854135188945698682652204931348462301149982644765996528871376101\n# 计算 AES 密钥\nkey = SHA256.new(long_to_bytes(dA)).digest()\n\n# 输入你已经获得的加密数据\nencrypted_flag_hex = u'51559ebae12fdd12e0e84df2baf07e3389b688398a71b62717fb77e0f6abdd40d848ee028b70681bc566ef2729d80b7a2778ad5b322b68501b6bbcef820b4719'\n\n# 从十六进制字符串中提取 IV 和加密的标志\nencrypted_data = binascii.unhexlify(encrypted_flag_hex)\niv = encrypted_data[:AES.block_size]  # 前 16 字节是 IV\nencrypted_flag = encrypted_data[AES.block_size:]  # 剩下的是加密后的标志\n\n# 创建 AES 解密器\ncipher = AES.new(key, AES.MODE_CBC, iv)\n\n# 解密并去填充\ntry:\n    decrypted_flag = unpad(cipher.decrypt(encrypted_flag), AES.block_size)\n    print(\"Decrypted flag:\", decrypted_flag.decode('utf-8'))\nexcept ValueError as e:\n    print(\"Decryption failed:\", e)\n```\n\n```\n#output\nDecrypted flag: SDSRDO{2DZ35AN97NP3EY15602G02H5ZP50R287}\n```\n\n```\ndef victory_decrypt(ciphertext, key):\n    key = key.upper()\n    key_length = len(key)\n    plaintext = ''\n\n    for i, char in enumerate(ciphertext):\n        if char.isalpha():\n            shift = ord(key[i % key_length]) - ord('A')\n            decrypted_char = chr((ord(char) - ord('A') - shift) % 26 + ord('A'))\n            plaintext += decrypted_char\n        else:\n            plaintext += char\n\n    return plaintext\n\nvictory_key = \"WANGDINGCUP\"\nt = \"SDSRDO{2DZ35AN97NP3EY15602G02H5ZP50R287}\"\n\nprint( victory_decrypt( t , victory_key ) )\n```\n\n```\n#output\nWDFLAG{2BF35AA97FC3CE15602D02B5FA50E287}\n```\n\n最后转成小写即可\n\n```\nprint(\"WDFLAG{2BF35AA97FC3CE15602D02B5FA50E287}\".lower())\n```\n\n```\n#output\nwdflag{2bf35aa97fc3ce15602d02b5fa50e287}\n```\n\n","tags":["cryptoCTF"]},{"title":"学习主定理","url":"/2024/10/28/学习主定理/","content":"\n之前很早就听机房的学长说主定理了，是用于算法竞赛中分析时间复杂度的，但是一直没有学习过\n\n今天做DS，又遇到了，题目如下\n\n<!--more-->\n\n## 一道考研题目\n\n![](学习主定理\\image-20241028092712560.png)\n\n解析：时间复杂度为 $O(nlogn)$\n\n设 $n=2^k(k\\geq0)$，有 $T(2^k)=2T(2^{k-1})+2^k=2^2T(2^{k-2})+2*2^k$\n\n由此得到递推公式 $T(2^k)=2^iT(2^{k-i})+i*2^k$\n\n故 $T(2^k)=2^kT(2^0)+k*2^k=(k+1)2^k$\n\n带回 $n$ 得到 $T(n)=(logn+1)2^{logn}$ 即时间复杂度为 $O(nlogn)$\n\n这也就是[归并排序(MergeSort)](https://zh.wikipedia.org/zh-cn/归并排序)的时间复杂度\n\n## 更普适的\n\n假设有递推关系式 $T(n)=aT(\\frac{n}{b})+f(n)$，其中$a\\ge1,b>1$\n\n其中，$n$ 为问题规模，$a$ 为递归的子问题数量，$\\frac{n}{b}$ 为每个子问题的规模（假设每个子问题的规模基本一样），$f(n)$ 为递归以外进行的计算工作\n\n结论：\n\n1. 若存在$\\varepsilon>0$，$f(n)=O(n^{log_b(a)−\\varepsilon})$（可不严谨的视作多项式地小于），那么$T(n)=\\Theta(n^{log_ba})$\n2. 若存在$\\varepsilon>0$，$f(n)=\\Theta(n^{log_ba}log^\\varepsilon n)$，那么$T(n)=O(n^{log_ba}log^\\varepsilon n)$\n3. 若存在$\\varepsilon>0$，$f(n)=Ω(n^{log_b(a)+\\varepsilon})$（多项式地大于），同时存在常数 $c<1$以及充分大的$n$，满足$af(\\frac{n}{b})≤cf(n)$，则$T(n)=\\Theta(f(n))$\n\n符号说明：\n\n![](学习主定理\\image-20241028151529218.png)\n\n更普适的:\n\n![](学习主定理\\image-20241028151620398.png)\n\n[算法证明](https://www.doc88.com/p-9761826142176.html)\n\n更本质的:\n\n使用 $T(n)=2T(\\frac{n}{2})+n$ 为例\n\n```\n                    f(n)\n                /            \\\n        f(n/b)                f(n/b)\n        /        \\                /        \\\nf(n/b^2) f(n/b^2) f(n/b^2) f(n/b^2)\n    /    \\        /    \\        /    \\        /    \\\n    ......(很多次递归以后)\n    O(1)O(1)......O(1)O(1)O(1)O(1)\n```\n\n这里用$O(1)$准确的说是$\\Theta(1)$\n\n主定理到底在做什么？事实上主定理就是对比这两个部分的时间复杂度罢了\n\n**到底是上面那些`f(n)`操作加起来更耗时, 还是最下层所有叶节点的`O(1)`加起来更耗时?**\n\n即对于 $T(n)=pf(n)+kO(1)$，$p$ 我们认为它是常数，重点是 $k$，大致数值为 $n^{log_ba}$\n\n代换一下，得到 $T(n)=pf(n)+n^{log_ba}$，显然这是在对比两项\n\n对于三种情况：\n\n1. 下层所有叶节点的`O(1)`加起来更耗时\n\n   $k$（即 $n^{log_ba}$）的增长速度大于了 $f(n)$, 那么 $T(n)=O(nlogba)$\n\n   之所以引入 $\\varepsilon$ 只是为了说明增长速度大\n\n   第一种情况下 $k$ 代表的最终处理问题的最小子任务明显占了主导\n\n2. 一样耗时\n\n   最小子任务和分割过程一样，没有谁明显的占据了主导低位，因此两个的时间复杂度都得算进去 $T(n)=O(n^{log_ba}⋅logn)$\n\n3. 上面那些`f(n)`操作加起来更耗时\n\n   分治过程占了主导地位，同时这种情况下限制了 $p$ 不会无法被认为是常数\n\n\n常见形式\n\n![](学习主定理\\image-20241028155133922.png)\n\n## 例题\n\n1. NOIP2016TGT14\n\n![](学习主定理\\PBTeBV.png)\n\n根据主定理，此时\n$$\na=2,b=4,f(n)=\\sqrt n=n^\\frac{1}{2}\\\\\nlog_ba=log_42=\\frac{1}{2}\n$$\n\n\n符合格式 $f(n)=O(n^{log_ba}log^kn)$(2)，此时 $k=0$ \n\n所以 $T(n)=Θ(n^{log_ba}log^{k+1}n)=Θ(n^\\frac{1}{2}log^1n)=Θ(\\sqrt nlogn)$\n\n选择C\n\n2. $T(n)=9T(\\frac{n}{3})+n$\n\n根据主定理，此时\n$$\na=9,b=3,f(n)=n\\\\\nlog_ba=log_39=2\n$$\n符合格式 $f(n)=O(n^{log_b(a)-\\varepsilon})$(1)，此时 $\\varepsilon=1$\n\n所以 $f(n)=O(n^{log_ba})=O(n^2)$\n\n3. $T(n)=2T(\\frac{n}{2})+2n$\n\n根据主定理，此时\n$$\na=2,b=2,f(n)=2n\\\\\nlog_ba=log_22=1\n$$\n符合格式 $f(n)=O(n^{log_ba}log^kn)$(2)，此时 $k=0$ \n\n所以 $T(n)=Θ(n^{log_ba}log^{k+1}n)=Θ(n^1log^1n)=Θ(nlogn)$\n\n4. $T(n)=2T(\\frac{n}{4})+n^2$\n\n根据主定理，此时\n$$\na=2,b=4,f(n)=n^2\\\\\nlog_ba=log_42=\\frac{1}{2}\n$$\n符合格式 $f(n)=O(n^{log_b(a)+\\varepsilon})$(3)，此时 $\\varepsilon=\\frac{3}{2}$ \n\n同时存在常数 $c<1$以及充分大的$n$，满足$af(\\frac{n}{b})≤cf(n)$\n\n所以 $T(n)=Θ(f(n))=O(n^2)$\n\n## 小结\n\n主定理讨论的是对于公式 $T(n)=pf(n)+kO(1)$ 里 `p f(n) k` 三个变量的增长速度。只不过主定理直接用条件限制了`p`，所以我们关注的重点就仅在 `f(n)` 和 `k` 上了\n\n## reference\n\nhttps://zh.wikipedia.org/wiki/%E4%B8%BB%E5%AE%9A%E7%90%86\n\nhttps://blog.restkhz.com/post/how-master-theorem-works\n\nhttps://blog.csdn.net/lanchunhui/article/details/52451362\n\nhttps://www.luogu.com.cn/article/w3avh1ku\n\nhttps://www.mashangxue123.com/tutorials/dsa/master-theorem/\n\nhttps://www.cnblogs.com/coderzjz/p/14272460.html\n","tags":["算法竞赛"]},{"title":"2024.10.20NISA百团题目题解","url":"/2024/10/20/2024-10-20NISA百团题目题解/","content":"\n三道挺有意思的小题目，记录一下\n\n<!--more-->\n\n## 第一题\n\n题目描述：说反话\n\n题解：\n\n翻转字符串即可（大雾），时间复杂度是严格线性（大大雾）\n\n## 第二题\n\n题目描述：挑战者选择16/17/18张卡片和先/后手，每方每次可以掀开1/2/3张卡片；挑战者的目标是让敌手掀开最后一张卡牌\n\n题解：\n\n如果敌手掀开最后一张牌（即达成挑战目标），则必然最终只剩一张牌（如果剩余的牌数多于1张，则敌手可以掀开一张，这时挑战者并不会达到目标）\n\n为了使敌手掀开最后一张牌，则只需保留一张牌，即**保证挑战者掀开牌之后，剩余的牌数为4k+1**即可，其中k为非负整数\n\n在以上情况下，每一轮（指双方操作）后掀开四张卡牌即可保证挑战者一定获胜\n\n**看不懂？直接运行以下代码体验一下吧**\n\n直接使用devcpp运行以下代码即可，记得拓展名是cpp哦\n\n```\n#include<iostream>\nusing namespace std;\nint n;\n\nbool check( int x ){\n    if( x == 1 || x == 2 || x == 3 ) return 1;\n    cout << \"请输入1/2/3哦，不要输入别的数字喵\" << endl;\n    return 0;\n}\nsigned main()\n{\n    INIT:;\n    cout << \"请输入总牌数：(n=16/17/18)\";\n    RST:;\n    cin >> n;\n    if( n != 16 && n != 17 && n != 18 ){\n        cout << \"输入的数据不合法，请重新输入\" << endl;\n        cout << \"-----------\" << endl;\n        goto INIT;\n    }\n    if( n == 17 ){\n        cout << \"你长得好看，让你先手\" << endl;\n        N17:;\n        int sum = 17 , a;\n        while( sum!=1 ){\n            cout << \"-----------\" << endl;\n            cout << \"请输入你掀开的数量：\";\n            cin >> a;\n            if( !check(a) ) continue;\n            cout << \"好的，这次我掀开的数量是：\" << 4-a << endl;\n            sum -= 4;\n            cout << \"现在剩下未掀开牌的数量是：\" << sum << endl;\n        }\n    }\n    else if( n == 16 ){\n        cout << \"我长得漂亮，让我先手\" << endl;\n        cout << \"我掀开的数量是：\" << 3 << endl;\n        cout << \"现在剩下未掀开牌的数量是：\" << 13 << endl;\n        int sum = 13 , a;\n        while( sum!=1 ){\n            cout << \"-----------\" << endl;\n            cout << \"请输入你掀开的数量：\";\n            cin >> a;\n            if( !check(a) ) continue;\n            cout << \"好的，我掀开的数量是：\" << 4-a << endl;\n            sum -= 4;\n            cout << \"现在剩下未掀开牌的数量是：\" << sum << endl;\n        }\n    }\n    else{\n        cout << \"我长得漂亮，让我先手\" << endl;\n        cout << \"我掀开的数量是：\" << 1 << endl;\n        cout << \"现在剩下未掀开牌的数量是：\" << 17 << endl;\n        goto N17;\n    }\n    cout << \"现在只剩下一张牌了，到你掀了，你失败了（嘻嘻）\" << endl;\n    cout << \"再来一把？这次n是多少你说了算，但是先后手···嘿嘿······\" << endl;\n    goto RST;\n    return 0;\n}\n```\n\n结论：\n\n17张时候，挑战者后手；16或18张时，挑战者先手\n\n具体策略如上，此题解仅讨论必胜情况\n\n## 第三题\n\n问题描述：数桥问题\n\n题解：\n\n其实这个时间复杂度，（在保证有解的情况下）枚举一下大概率也能出来了，除非因为没有橡皮导致图越画越乱最终看不清楚（\n\n使用贪心思想时间复杂度为`O(N*M)`，其中`N`是点的数量，`M`是每个点尝试的边的数量\n\nai给出的贪心代码，仅供参考\n\n```\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// 定义点结构\nstruct Point {\n    int x, y; // 点的坐标\n    int degree; // 点的边权（需要连接的边数）\n};\n\n// 定义一个方向数组，表示右、下\nint dx[] = {1, 0}; // 横向和竖向（x+1, y）表示右边，(x, y+1)表示下方\nint dy[] = {0, 1};\n\n// 检查是否可以在(x1, y1)和(x2, y2)之间连接边\nbool canConnect(int x1, int y1, int x2, int y2, vector<vector<int>>& grid) {\n    // 确保(x2, y2)在图的范围内，且没有交叉边\n    if (x2 < 0 || y2 < 0 || x2 >= grid.size() || y2 >= grid[0].size()) return false;\n    if (grid[x1][y1] || grid[x2][y2]) return false;\n    return true;\n}\n\n// 主函数：连接点的边，确保边不交叉\nvoid connectPoints(vector<Point>& points, int n, int m) {\n    // 创建一个网格表示是否有边（或点）\n    vector<vector<int>> grid(n, vector<int>(m, 0));\n\n    // 遍历所有点\n    for (auto& p : points) {\n        int x = p.x, y = p.y, degree = p.degree;\n        grid[x][y] = 1; // 将该点标记为存在\n        \n        // 尝试为该点连接degree条边\n        for (int i = 0; i < degree; ++i) {\n            for (int d = 0; d < 2; ++d) { // 遍历两个方向（右和下）\n                int nx = x + dx[d];\n                int ny = y + dy[d];\n                if (canConnect(x, y, nx, ny, grid)) {\n                    grid[nx][ny] = 1; // 连接边并标记\n                    break; // 连接成功，退出当前方向的尝试\n                }\n            }\n        }\n    }\n}\n\nint main() {\n    int n = 5, m = 5; // 网格大小\n    vector<Point> points = {\n        {0, 0, 2}, // (x, y, 边权)\n        {2, 1, 1},\n        {3, 4, 3},\n    };\n\n    connectPoints(points, n, m);\n\n    return 0;\n}\n```\n\n","tags":["misc"]},{"title":"浅学习一下零知识证明","url":"/2024/10/13/浅学习一下零知识证明/","content":"\n之前一直听说零知识证明，但是一直没有学习过相关内容\n\n今天在阅读陈教授的《Identity-based chameleon hashing and signatures without key exposure》一文中遇到了，故学习记录一下\n\n<!--more-->\n\n## 知识证明和零知识证明\n\n知识证明是Proofs of Knowledge，零知识证明是Zero-Knowlegde Proof\n\n二者之间有很多相似点，也有区别，具体如下\n\n1. 信息泄露的程度\n\n   知识证明中，通常证明着不会直接泄露密码，但是可能会提供一些有用的中间信息（例如密文的哈希值）\n\n   零知识证明中，验证者在验证的过程中，不能获得任何相关的信息，除了“证明者知道这个秘密”\n\n2. 应用场景\n\n   知识证明更侧重确认某人知道某个密码\n\n   零知识证明不仅确认某人知道某个密码，还确保验证过程中完全不会泄露任何相关信息\n\n## 知识证明\n\n定义：证明者向验证者展示他们知道某个秘密值，但不一定完全隐藏这个秘密；关键在于，验证者能够确信证明者确实知道这个秘密值\n\n### 离散对数知识证明\n\nProof of Knowledge of a Discrete Logarithm\n\n证明者拥有一个秘密值 $x$，满足 $x = \\log_g y$，即 $y = g^x$（离散对数问题）\n\n证明者想要向验证者证明他确实知道这个 $x$，但不能直接透露 $x$\n\n过程：\n\n- 证明者选择一个随机数 $r \\in_R \\mathbb{Z}_q$（即从 $\\mathbb{Z}_q$ 中随机选取一个数，其中 $_R$ 表示均匀随机）\n\n- 计算 $c = H(g, y, g^r)$，这里的 $H$ 是一个抗碰撞的哈希函数，它将输入映射到一个固定长度的输出值\n\n- 计算 $s = r - c \\cdot x \\mod q$，这一步结合了秘密值 $x$ 和随机值 $r$\n\n- 验证者接收到 $(c, s)$ 之后，检查 $c = H(g, y, g^s \\cdot y^c)$ 是否成立\n\n如果这个等式成立，那么验证者可以确信证明者知道离散对数 $x$，但验证者无法直接获得 $x$\n\n这实际上是基于 [Schnorr](../../../../../2024/10/09/ECDSA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/) 签名的思想——证明者通过使用随机数 $r$ 混淆了秘密 $x$，确保即使提供了 $(c, s)$，也不能反推出 $x$，但同时可以证明其拥有 $x$ 的知识\n\n### 两个离散对数相等的知识证明\n\nProof of Knowledge for the Equality of Two Discrete Logarithms\n\n证明者拥有一个秘密 $x$，同时满足 $x = \\log_g u = \\log_h v$，即证明者想要证明 $u = g^x$ 且 $v = h^x$，这意味着在不同的基 $g$ 和 $h$ 下，它们的离散对数相同\n\n过程：\n\n- 证明者选择一个随机数 $r \\in_R \\mathbb{Z}_q$\n- 计算 $c = H(g, h, u, v, g^r, h^r)$ （ $g$ 和 $h$ 指的是两个基，它们对应的值是 $u$ 和 $v$）\n- 计算 $s = r - c \\cdot x \\mod q$\n- 验证者接收到 $(c, s)$ 后，检查 $c = H(g, h, u, v, g^s \\cdot u^c, h^s \\cdot v^c)$ 是否成立\n\n如果这个等式成立，验证者就知道证明者确实拥有能够满足这两个离散对数相等的秘密 $x$\n\n### 基于身份的两个离散对数相等的知识证明\n\nIdentity-Based Proof of Knowledge for Equality of Two Discrete Logarithms\n\n基于双线性对的扩展，证明者想证明 $\\log_g u = \\log_h v$\n\n其中 $g, h, u, v$ 是通过双线性映射生成的，具体的值如下：\n$$\ng = e(P, P)\\\\\nu = e(P, SID)\\\\\nh = e(Q, P)\\\\\nv = e(Q, SID)\\\\\n$$\n其中 $P$ 和 $Q$ 是群 $G_1$ 中的元素，$SID$ 是证明者的私钥\n\n过程：\n\n- 证明者选择一个随机数 $r \\in_R \\mathbb{Z}_q$\n- 计算 $c = H(g, h, u, v, g^r, h^r)$\n- 然后计算 $S = rP - c \\cdot SID$，这里 $S$ 是一个基于群 $G_1$ 元素的值\n\n- 验证者接收到 $(c, S)$ 后，检查 $c = H(g, h, u, v, e(P, S) \\cdot u^c, e(Q, S) \\cdot v^c)$ 是否成立\n\n如果等式成立，验证者就能相信证明者拥有相同的离散对数 $x$，但又不会获得 $x$ 的具体值\n\n## 零知识证明\n\n定义：不泄露任何关于秘密本身的信息就能证明某个声明为真，即验证者不能从证明过程中获得任何除了“声明为真”的附加信息\n\n零知识证明必须满足三个特性：\n\n1. 完备性（Completeness）：若证明者知道秘密，则城市的验证者一定能够通过验证\n2. 可靠性（Soundness）：若证明者不知道秘密，则无法欺骗验证者通过验证\n3. 零知识性（Zero-Knowledge）：除了知道证明者确实拥有该秘密，验证者不能通过验证过程获得任何有关秘密的附加信息\n\n### Schnoor协议\n\n假设有一个循环群 $G$ ，其生成元为 $g$，其阶为一个大素数 $q$，则 Schnorr 协议证明某人知道一个离散对数秘密 $x$，即 $y = g^x \\mod p$，其中 $p$ 是大素数模数\n\n1. 公共参数：\n    公开循环群 $G$，生成元 $g$，以及验证者要证明的 $y = g^x$。\n    证明者持有秘密 $x$。\n2. 承诺阶段（Commitment）：\n    证明者随机选择一个值 $r$，计算承诺值 $t = g^r \\mod p$，然后将 $t$ 发给验证者。\n3. 质询阶段（Challenge）：\n    验证者随机生成一个质询 $e$，其范围通常是 $0 \\leq e < q$，并发送给证明者。\n4. 响应阶段（Response）：\n    证明者计算响应 $s = r + e \\cdot x \\mod q$，然后将 $s$ 发给验证者。\n5. 验证阶段（Verification）：\n    验证者通过  $g^s\\overset{\\text{?}}{=}t\\cdot y^e\\mod p$  检查证明\n\n零知识证明的性质在Schnorr协议中的体现\n\n完备性：如果证明者正确地知道 $x$，那么 $g^s = g^{r + e \\cdot x} = g^r \\cdot (g^x)^e = t \\cdot y^e$，验证者将接受证明。\n\n可靠性：如果证明者不正确地知道 $x$，则无论如何计算 $s$，该等式都不会以高概率成立。因此，证明者无法欺骗验证者。\n\n零知识性：验证者在整个过程中，只看到承诺 $t$、质询 $e$、响应 $s$，但由于质询 $e$ 是随机生成的，且验证者无法反推出 $r$ 或 $x$，因此验证者无法从中得到任何有用的信息。验证者只能知道证明者确实知道 $x$。\n\n### 发展历程\n\n![](浅学习一下零知识证明\\4f8bafd798af360e10374d0d1c5f834a.png)\n\n### 三个实例\n\n#### 《瓦利在哪里？》\n\n![](浅学习一下零知识证明\\5556e46b8ed2c794024ddb5b3792c83a.gif)\n\n遮住整个图像，通过一个切口来展示瓦利的图像，而不公布具体坐标\n\n#### 成员证明\n\n你遇到一个不认识的人，但她声称也是你所在团队的成员。你如何知道是否可以信任她？\n\n你的团队有一个带锁的保险箱，只有你的团队成员知道秘密组合密码，可以打开保险箱\n\n1. 验证者写一条秘密信息并放入锁定的保险箱中\n2. 符合要求的证明者知道密钥，打开锁定的保险箱\n3. 证明者将秘密信息交还给验证者\n4. 验证者确信证明者真的知道密钥，因此信任\n\n#### 不透明定价\n\n两个人在同一供应商购买相同的物品，但是不知道价格是否相同\n\n1. 有4个带锁的锁盒，每个盒子上有一个只能放一张纸的小插槽。它们分别标有价格100、200、300和400，并放置在一个安全的私人房间中\n2. A首先独自进入房间。A的单价是200，A拿走标有200的锁盒的钥匙，并销毁其他盒子的钥匙。离开房间\n3. B独自进入房间，带有4张纸，其中1张上面有对钩，另外3张上面都有叉号。B的单价是300，故将带有对钩的纸张放入标有300的锁盒中，并将带有叉号的纸张放入其他锁盒中。离开房间\n4. A可以带着只能打开标有200的锁盒的钥匙返回，发现一张上面有叉号的纸，现在A知道二人价格不同\n5. B对手回来后，看到A手上有一张上面有叉号的纸，所以现在B也知道二人价格不同\n\n## 其他看起来比较新的东西？\n\n### 交互式零知识证明\n\n在交互式零知识证明中，证明者和验证者进行来回对话。这种交互对于验证者确信声明的有效性至关重要。虽然有效，但交互性在某些情况下可能会受到限制。\n\n优点：安全级别高，非常适合实时应用\n\n缺点：需要多轮交互，对于异步系统来说并不理想。\n\n### 非交互式零知识证明\n\n顾名思义，非交互式零知识证明消除了证明者和验证者之间对话的需要。来自证明者的一条消息足以让验证者信服。\n\n优点：高效且可扩展，非常适合区块链和其他去中心化系统\n\n缺点：与交互式零知识证明相比，安全性稍差\n\n### zk-SNARKs\n\nzk-SNARK（零知识简洁非交互式知识论证）结合了两个世界的优点。它们是非交互式的，但提供了高水平的安全性，使它们在包括区块链技术在内的各种应用中很受欢迎。\n\n优点：高度安全、高效、无需交互\n\n缺点：设置复杂且计算要求较高\n\n### zk-STARKs：透明的后量子安全证明\n\nzk-STARK 提供了 zk-SNARK 所不具备的透明度。它们不需要可信的设置，这使得它们更加透明，并且可能更安全地抵御量子攻击。\n\n优点：无需可信设置、抗量子、高度可扩展。\n\n缺点：证明尺寸更大，计算开销更大。\n\n---\n\n后面还有[这一篇](https://medium.com/@gewenbo888/%E7%AC%AC%E4%B8%80%E9%83%A8%E5%88%86-%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E-c21379e3ea83)没看，不知道他在做什么但是字数好多（\n\n留个戳，以后大概率不会看了（\n\n```\nreference：\nIdentity-based chameleon hashing and signatures without key exposure\nhttps://www.secrss.com/articles/58134\nhttps://www.circularise.com/blogs/zero-knowledge-proofs-explained-in-3-examples\nhttps://www.cnblogs.com/primihub/p/17664137.html\nhttps://medium.com/@justin_Aleo/%E4%BB%80%E4%B9%88%E6%98%AF%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E-b6fd586bad13\nhttps://blog.csdn.net/Jifu_M/article/details/112254136\n```\n\n\n\n","tags":["Crypto"]},{"title":"《安全规约导论》阅读笔记","url":"/2024/10/09/《安全规约导论》阅读笔记00/","content":"\n此博客为常驻，用于汇总笔者阅读《安全规约导论》一书的学习笔记\n\n这本书里的好东西很多，价值很高，值得充分学习\n\n持续更新中\n\n<!--more-->\n\n1. [安全规约前置知识](../../../../../2024/10/10/安全规约前置知识) \n2. [安全规约基础](../../../../../2024/10/10/安全规约基础) \n3. [荔枝成为BLS短签名糕守](../../../../../2024/10/08/荔枝成为BLS短签名糕守)\n","tags":["常驻"]},{"title":"XU-CMA安全是什么","url":"/2024/10/08/XU-CMA安全是什么/","content":"\n密码学中数字签名方案的安全模型主要包括两种：存在性不可伪造（Existential Unforgeability against chosen-message attacks, EU-CMA）和强不可伪造（Strong Unforgeability against chosen-message attacks, SU-CMA）， 本文主要对比这两种安全模型。\n\n<!--more-->\n\n两种安全模型都是通过敌手（Adversary）和挑战者（Challenger）之间的游戏（Game）来定义的。首先挑战者生成密钥对 $(pk,sk)$ 并发送 $pk$ 给敌手，自己保存 $sk$ 用来生成签名。敌手可以自适应地提交任意消息，挑战者根据敌手提交的消息生成对应的签名并返回给敌手。最后，敌手返回一个伪造的对未查询过的新消息的签名。\n\n### EU-CMA\n\n在数字签名里标准的安全模型\n\n在该模型里，敌手可以非随机性地询问任意 message 的 signature 并对任意没有询问过消息的 message 进行 forgery 攻击（第二篇参考文档中还有很多看不懂的东西）\n\n存在性不可为造安全模型可以使用如下GAME描述：\n\n- $Setup$：假设$SP$问哦系统参数。挑战者执行密钥生成算法，生成密钥对 $(pk,sk)$ 并发送 $pk$ 给敌手，挑战者保留 $sk$ 用来回答敌手的签名查询\n\n- $Query$：敌手自适应的选取任意消息 $m_i$ 进行签名查询。对于敌手提交的消息 $m_i$ ，挑战者执行签名算法生成 $\\sigma_{m_i}$ 并将其发送给敌手\n\n- $Forgery$：敌手返回一个伪造的对于某个消息 $m^{*}$ 签名 $\\sigma_{m^{*}}$，如果：\n\n  - $\\sigma_{m^*}$是一个关于 $m^*$ 的合法签名\n  - 关于所有 $m^{*}$ 的签名之前没有被查询过\n\n  则敌手在游戏中获胜，敌手赢得游戏的优势 $\\varepsilon$ 就是返回一个合法的伪造签名的概率\n\n### SU-CMA\n\n强不可为造安全模型可以使用如下GAME描述：\n\n- $Setup$：假设$SP$问哦系统参数。挑战者执行密钥生成算法，生成密钥对 $(pk,sk)$ 并发送 $pk$ 给敌手，挑战者保留 $sk$ 用来回答敌手的签名查询\n\n- $Query$：敌手自适应的选取任意消息 $m_i$ 进行签名查询。对于敌手提交的消息 $m_i$ ，挑战者执行签名算法生成 $\\sigma_{m_i}$ 并将其发送给敌手\n\n- $Forgery$：敌手返回一个伪造的对于某个消息 $m^{*}$ 签名 $\\sigma_{m^{*}}$，如果：\n\n  - $\\sigma_{m^{*}}$是一个关于 $m^{*}$ 的合法签名\n  - $m^{*}$ 的签名 $\\sigma_{m^{*}}$ 之前没有被查询过\n\n  则敌手在游戏中获胜，敌手赢得游戏的优势 $\\varepsilon$ 就是返回一个合法的伪造签名的概率\n\n### 对比\n\nEU-CMA和SU-CMA的区别仅在于敌手获胜条件的判定上 $(Forgery-2)$\n\n- 在EU-CMA中的要求是所有的 $m^*$ 的签名在 $Query$ 阶段都没有被查询过\n- 而在SU-CMA中则只要求在之前的查询操作中没有出现过 $\\sigma_{m^*}$，也就是说，如果之前查询过关于 $m^*$ 的签名 $\\sigma_{m^*}^{(1)}$，如果敌手可以生成另一个关于 $m^*$ 的签名 $\\sigma_{m^*}^{(2)}$，而且 $\\sigma_{m^*}^{(1)}\\neq \\sigma_{m^*}^{(2)}$，也判定为敌手获胜\n\n显然 SU-CMA 中的敌手拥有更强的能力, 因此可以认为 SU-CMA 相比 EU-CMA 是更强的安全模型.\n\n---\n\nreference：\n\nhttps://www.cnblogs.com/zywnnblog/p/16111384.html\n\nhttps://documents.uow.edu.au/~fuchun/jow/011-QAXEDWBAMA.pdf\n","tags":["Crypto"]},{"title":"各式各样的DH","url":"/2024/10/08/各式各样的DH/","content":"\n阅读《Identity-Based Chameleon Hashing and  Signatures Without Key Exposure》一文时，遇到了Decision Diffie-Hellman Problem (DDHP)这一概念，头一次遇到，便搜索了一下，打算学习学习；没想到捅了老挝——[一个DH密钥交换算法能衍生出各式各样的东东](https://blog.csdn.net/mutourend/article/details/105544862)\n\n没办法了，学吧\n\n由于种种原因（我比较懒），目前只学DDHP，其他的先挖个坑\n\n<!--more-->\n\n\n\n## DDHP\n\n### 论文里的描述\n\n![](各式各样的DH\\image-20241008151017651.png)\n\n大致内容：在特定的群 $G_1$ 中，可以通过计算双线性映射的方式有效地判断一个四元组是否满足Diffie-Hellman条件\n\n| 区别       | DH                                                     | DDHP                                                         |\n| ---------- | ------------------------------------------------------ | ------------------------------------------------------------ |\n| 目的       | 用于密钥交换，建立安全通信                             | 判断给定值是否符合Diffie-Hellman关系                         |\n| 功能       | 生成共享密钥                                           | 验证一个数值是否是由特定的私钥生成的                         |\n| 安全性基础 | 基于离散对数的困难性，安全性与密钥长度和生成元选择有关 | 直接依赖于离散对数问题的安全性，特别是在无法计算 $g^{ab}$ 的情况下 |\n\n### 代码展示\n\n（有点草率，但是感觉思想很到位）\n\n```\n# 假设我们已经有 A、B 和一个待验证的 C\nC = pow(g, a * b, p)  # 假设这是我们计算出来的 C\n\n# 验证DDHP\ndef verify_ddhp(p, g, A, B, C):\n    # 计算 g^(ab) mod p\n    calculated_C = (pow(A, b, p))  # K = A^b mod p\n    return calculated_C == C\n\n# 输出验证结果\nis_valid = verify_ddhp(p, g, A, B, C)\nprint(f\"Is C valid? {is_valid}\")\n```\n\n### 结合双线性映射\n\n#### 问题描述\n\n给定四个元素$(P,aP,bP,cP)$，其中：\n\n$P$ 是群中的生成元\n\n$aP$ 和 $bP$ 是两个通过标量乘法得到的公钥\n\n$cP$ 是待验证的值\n\nDDHP的目标是判断 $cP=abP$ 是否成立\n\n#### 解决步骤\n\n1. 计算双线性映射\n\n$$\n\\gamma_1=\\hat{e}(P,cP)\\\\\n\\gamma_2=\\hat{e}(aP,bP)\n$$\n\n2. 判断条件\n\n   若$\\gamma_1=\\gamma_2$，则可以确认 $cP$ 是有效的Diffie-Hellman四元组，即 $cP = abP$\n","tags":["Crypto","unfixed"]},{"title":"多项式初步学习","url":"/2024/10/06/多项式初步学习/","content":"\n数年之前就听闻莫反，FFT，NTT等数论变换的名称，但是一直未学习相关知识\n\n最近学习后量子密码学，遇到了类似数论变换，辄学习一下\n\n<!--more-->\n\n## 名词区分\n\n1、DFT(Discrete Fourier Transform)：离散傅立叶变换 $\\rightarrow$ $O(n^2)$计算多项式乘法\n2、FFT(Fast Fourier Teansformation)：快速傅立叶变换 $\\rightarrow$ $O(nlogn)$计算多项式乘法\n3、(F)NTT(Number Theoretic Transform)：（快速）数论变换 $\\rightarrow$ 优化常数和误差，适用于整数域\n4、MTT(any Module NTT)：NTT的扩展 $\\rightarrow$ 任意模数\n\n## 离散傅里叶变换DFT\n\n这是一个朴素算法，用于将一个多项式在$O(n^2)$时间由系数表示法转化为点值表示法\n\n原理：将一个用系数表示的多项式转化成它的点值表示的算法\n\n对于一个$n-1$次的$n$项多项式$f(x)$可以表示为$f(x)=\\sum_{i=0}^{n-1}a_ix^i$\n\n系数表示法：$f(x)=\\{a_0,a_1,...,a_{n-1}\\}$\n\n点值表示法：$f(x)=\\{(x_0,f(x_0)),(x_1,f(x_1)),...,(x_{n-1},f(x_{n-1}))\\}$\n$$\n求值：系数\\rightarrow点值\\\\\n差值：点值\\rightarrow系数\n$$\n计算两个多项式相乘 $h(x)=f(x)*g(x)$\n\n对于系数表示法，需要每一项和每一项的系数相乘，时间复杂度显然是$O(n^2)$\n\n对于点值表示法——\n\n$h(x)=\\{(x_0,f(x_0)\\cdot g(x_0)),(x_1,f(x_1)\\cdot g(x_1)),...,(x_{n-1},f(x_{n-1})\\cdot g(x_{n-1}))\\}$，时间复杂度是$O(n)$\n\n已知 $n$ 个点值，可以唯一确定一个 $n-1$ 阶多项式\n\n### 证明\n\n已知\n$$\nP(x_0)=p_0+p_1x_0+p_2x_0^2+\\cdots+p_{n-1}x_0^{n-1}\\\\\nP(x_1)=p_0+p_1x_1+p_2x_1^2+\\cdots+p_{n-1}x_1^{n-1}\\\\\n\\vdots\\\\\nP(x_{n-1})=p_0+p_1x_{n-1}+p_2x_{n-1}^2+\\cdots+p_{n-1}x_{n-1}^{n-1}\\\\\n$$\n可以写成矩阵形式\n$$\n\\begin{bmatrix}\nP(x_0)  \\\\\nP(x_1)  \\\\\n\\vdots  \\\\\nP(x_{n-1}) \\\\\n\\end{bmatrix}\n=\n\\begin{bmatrix}\n1 & x_0 & x_0^2 & \\cdots & x_0^{n-1}  \\\\\n1 & x_1 & x_1^2 & \\cdots & x_1^{n-1}  \\\\\n\\vdots & \\vdots & \\vdots & \\ddots & \\vdots  \\\\\n1 & x_{n-1} & x_{n-1}^2 & \\cdots\\ & x_{n-1}^{n-1}  \\\\\n\\end{bmatrix}\n*\n\\begin{bmatrix}\np_0  \\\\\np_1  \\\\\n\\vdots  \\\\\np_{n-1} \\\\\n\\end{bmatrix}\n$$\n中间的那列就是一个范德蒙行列式了，秩为1，所以$p_0,...,p_{n-1}$有且仅有一个解，即多项式的系数确定\n\n证毕。\n\n### 利用单位圆进行转化\n\n将$n$向上填充为2的整数次幂，然后将单位圆平均取$n$个点\n\n![](多项式初步学习\\image-20241007000846590.png)\n\n在单位元上，我们定义$x_k=w_n^k=(cos\\frac{k}{n}2\\pi,sin\\frac{k}{n}2\\pi)$\n\n对于点$x_k$​，$x_k=x_{k-i}*x_i(i\\in[0,k])$​成立\n\n此时，$x_1$即为该单位圆上的单位根（即该循环群中的单位元）\n\n#### 单位根的性质\n\n##### 很有用的\n\n性质一（相消引理）：$w_{2n}^{2k}=w_n^k$ 这两个说的本质上是一个点\n\n性质二（折半引理）：$w_n^{k+\\frac{n}{2}}=-w_n^k$ 关于原点对称（向量等大反向）\n\n##### 显而易见的\n\n1. $w_n^k=cos(2\\pi\\cdot\\frac{k}{n})+isin(2\\pi\\cdot\\frac{k}{n})$\n2. $w_n^0=w_n^n=1$\n3. $w_n^{n-i}=w_n^i$\n4. $w_n^{n+i}=w_n^i$\n\n#### 实现方式\n\n把多项式$A(x)$的离散傅里叶变换结果作为另一个多项式$B(x)$的系数，去单位根的倒数即$w_n^0,w_n^{-1},...,w_n^{-(n-1)}$作为$x$代入$B(x)$，得到的每个数再除以$n$，得到的是$A(x)$的各项系数\n\n实现了傅里叶变换的逆变换——把点值表示转换成多项式系数表示\n\n#### 证明\n\n设$(y_0,y_1,y_2,...,y_{n−1})$为多项式$A(x)=a_0+a_1x+a_2x^2+...+a_{n−1}x^{n−1}$的离散傅里叶变换。\n\n现在我们再设一个多项式$B(x)=y_0+y_1x+y_2x^2+...+y_{n−1}x^{n−1}$，现在我们把上面的$n$个单位根的倒数，即$ω^0_n,ω^{−1}_n,ω^{−2}_n,...,ω^{−(n−1)}_n$作为$x$代入$B(x)$, 得到一个新的离散傅里叶变换$(z_0,z_1,z_2,...,z_{n−1})$。\n$$\n\\begin{align}\nz_k&=\\sum_{i=0}^{n-1}y_i(w_n^{-k})^i\\\\\n&=\\sum_{i=0}^{n-1}(\\sum_{j=0}^{n-1}a_j(w_n^i)^j)(w_n^{-k})^i\\\\\n&=\\sum_{j=0}^{n-1}a_j(\\sum_{i=0}^{n-1}(w_n^{j-k})^i)\n\\end{align}\n$$\n这个$\\sum_{i=0}^{n-1}(w_n^{j-k})^i$是可求的：当 $j-k=0$ 时，原式=$n$；否则，通过等比数列求和可以得知\n$$\n\\begin{align}\n\\sum_{i=0}^{n-1}(w_n^{j-k})^i&=\\frac{(w_n^{i-k})^n-1}{w_n^{i-k}-1}\\\\\n&=\\frac{(w_n^n)^{i-k}-1}{w_n^{i-k}-1}\\\\\n&=\\frac{1^{i-k}-1}{w_n^{i-k}-1}\\\\\n&=0\n\\end{align}\n$$\n故 $z_k=n\\cdot a_k$\n\n即 $a_i=\\frac{z_i}{n}$\n\n证毕\n\n具体代码不做赘述，因为DFT和朴素算法的时间复杂度相同，在这里仅用于为FFT打基础\n\n\n\n## 快速傅里叶变化FFT\n\n用途：1.高精度乘法$O(n^2)\\rightarrow O(nlogn)$ 2.分离正弦波\n\n### 原理\n\nFFT和DFT的不同之处在于，傅里叶的时代并没有计算机，所以没有优化时间复杂度的需求；因而虽然DFT的计算是基于单位圆的，但是（求值和差值的）时间复杂度仍旧是$O(n^2)$；而FFT则采用了**分治**的思想，将求值和差值的时间复杂度降为$O(nlogn)$\n\n![](多项式初步学习\\1928790-20220309154306366-190448235.png)\n\n\n\n### 推导\n\n设 $A(x)=a_0+a_1x+a_2x^2+...+a_{n-1}x^{n-1}$，\n\n按照下标奇偶性划分为两部分 \n\n$A(x)=(a_0+a_2x^2+...+a_{n-2}x^{n-2})+(a_1x+a_3x^3+...+a_{n-1}x^{n-1})$\n\n设 $A_1(x)=a_0+a_2x+...+a_{n-2}x^{\\frac{n}{2}-1}\\\\ A_2(x)=a_1x+a_3x+...+a_{n-1}x^{\\frac{n}{2}-1}$（注意这里的次方数）\n\n则 $A(x)=A_1(x^2)+xA_2(x^2)$\n\n已知$x=w_n^k$，不妨设 $k<\\frac{n}{2}$，代入得到\n$$\n\\begin{align}\nA(w_n^k)&= A_1(w_n^{2k})+w_n^kA_2(w_n^{2k}) \\\\\n&= A_1(w_\\frac{n}{2}^{k})+w_n^kA_2(w_\\frac{n}{2}^{k})\\\\\n\\end{align}\n$$\n对于$A(w_n^{k+\\frac{n}{2}})$，有：\n$$\n\\begin{align}\nA(w_n^{k+\\frac{n}{2}})&=A_1(w_n^{2k+n})+w_n^{k+\\frac{n}{2}}A_2(w_n^{2k+n})\\\\\n&=A_1(w_\\frac{n}{2}^{k}\\cdot w_n^n)+w_n^{k+\\frac{n}{2}}A_2(w_\\frac{n}{2}^{k}\\cdot w_n^n)\\\\\n&=A_1(w_\\frac{n}{2}^{k})-w_n^kA_2(w_\\frac{n}{2}^{k})\n\\end{align}\n$$\n故只需要知道 $A_1(x)$ 和 $A_2(x)$ 分别在 $(w_\\frac{n}{2}^0,w_\\frac{n}{2}^1,...,w_\\frac{n}{2}^{\\frac{n}{2}-1})$ 的点值表示，就可以 $O(n)$ 计算 $A(x)$ 在 $(w_n^0,w_n^1,...,w_n^{n-1})$ 的点值表示\n\n依此，就可以**递归**实现\n\n### 代码实现\n\n```\n#这里的代码是ai给的，感觉不太靠谱的亚子\nimport numpy as np\n\ndef fft(a):\n    n = len(a)\n    if n <= 1:\n        return a\n    even = fft(a[0::2])\n    odd = fft(a[1::2])\n    t = [np.exp(-2j * np.pi * k / n) * odd[k] for k in range(n // 2)]\n    return [even[k] + t[k] for k in range(n // 2)] + [even[k] - t[k] for k in range(n // 2)]\n\ndef ifft(a):\n    n = len(a)\n    a_conj = [np.conjugate(x) for x in a]\n    y = fft(a_conj)\n    return [np.conjugate(x) / n for x in y]\n\ndef polynomial_multiply(p, q):\n    n = len(p) + len(q) - 1\n    m = 1 << (n - 1).bit_length()  # Next power of two\n    p += [0] * (m - len(p))\n    q += [0] * (m - len(q))\n    \n    fft_p = fft(p)\n    fft_q = fft(q)\n    fft_result = [fft_p[i] * fft_q[i] for i in range(m)]\n    result = ifft(fft_result)\n    \n    return [round(x.real) for x in result]\n\n# 示例\np = [1, 2, 3]  # 1 + 2x + 3x^2\nq = [4, 5]     # 4 + 5x\nresult = polynomial_multiply(p, q)\nprint(result)  # 输出: [4, 13, 22, 15]\n```\n\n### 后续还有优化版FFT，插个眼，以后更新\n\n\n\n## （快速）数论变换 (F)NTT\n\n好的，假设我学会了fft，可以开始学ntt了（大雾\n\n| 不同点   | FFT                                                | NTT                                                |\n| -------- | -------------------------------------------------- | -------------------------------------------------- |\n| 定义域   | 主要在复数域中进行，利用复数的旋转性质             | 使用复数的单位根，通常是复数的n次方根              |\n| 根的选择 | 在有限域（通常是素数模数）中进行，适合用于整数运算 | 使用模p的原根，这些根在有限域中是整数              |\n| 应用领域 | 信号处理、图像处理、数字滤波等                     | 密码学、计算机代数和一些整数计算问题，如大数乘法等 |\n| 计算方式 | 浮点数运算                                         | 完全整数                                           |\n\n对于质数$p=qn+1,(n=2^m)$，原根$g$满足$g^{qn}\\equiv 1(\\mod p)$\n\n将$g_n\\equiv g^q(\\mod p)$看做$w_n$的等价，其满足相应的性质，如$g_n^n\\equiv 1(\\mod p),g_n^\\frac{n}{2}\\equiv -1(\\mod p)$等\n\n快速数论变化（FNTT），是数论变换（NTT）增加分治操作之后的快速算法，与快速傅里叶变换使用的分治办法完全一致\n\nFFT中用到复数，需要使用$double$类型来计算，导致精度降低，所以需要使用原根来替代单位根\n$$\ng^\\frac{p-1}{n}\\equiv w_n\\mod p\n$$\n就像998244353,469762049,1004535809，它们的原根都是3\n\n## 任意模数NTT MTT\n\n如果模数不是以上几种，我们需要自己取模数\n\n取一些模数$p_1,p_2,...,p_k$使得答案多项式的系数在**取模之前**不会超过 $\\prod_{i=1}^{k}p_i$\n\n一般而言取三个质数即可(998244353,469762049,1004535809)\n\n先计算答案对每个 $p_i$ 取模的结果，利用中国剩余定理就可以求得答案对 $\\prod_{i=1}^{k}p_i$ 取模的结果，这个结果就是答案，最后将这个答案对题目中的模数取一次模即可\n\n例题：[洛谷 P4245](https://www.luogu.com.cn/problem/P4245)\n\n一道MTT模板题\n\n![](多项式初步学习\\image-20241008113031280.png)\n\n```\n#include <algorithm>\n#include <cstdio>\n#define int long long\nint mod;\n\n// 这种写法我也第一次见，边写边学吧\n// 直接不开在全局std里了，单独一个Math\nnamespace Math{\n    inline int qpow( int base , int p , const int mod ){\n        static int res;\n        for( res = 1 ; p ; p >>= 1 , base = base * base % mod )\n            if( p & 1 ) \n                res = res * base % mod;\n        return res;\n    }\n    inline int inv( int x , const int mod ){\n        return qpow( x , mod-2 , mod );//费马小定理求逆元\n    }\n}\n\nconst int mod1 = 998244353, mod2 = 1004535809, mod3 = 469762049, G = 3;\nconst int mod_1_2 = mod1 * mod2;\nconst int inv_1 = Math::inv(mod1, mod2), inv_2 = Math::inv(mod_1_2 % mod3, mod3);\n\nstruct Int{\n    int A , B , C;\n    // 空的默认构造函数\n    Int(){}\n    // 这个构造函数允许使用一个整数来初始化 A, B, C，它们都将被初始化为同一个值 __num\n    Int( int __num ): A(__num) , B(__num) , C(__num) {}\n    // 允许通过三个整数分别初始化 A, B, C\n    Int( int __A , int __B , int __C ): A(__A) , B(__B) , C(__C) {}\n    // 好神奇的操作，研究半天也没明白原理\n    // 只知道它可以做减法，出现负数就加上一个模数，只需要传入一个指针\n    static Int reduce( const Int & x ){\n        return Int( x.A + (x.A >> 31 & mod1) , x.B + (x.B >> 31 & mod2) , x.C + (x.C >> 31 & mod3) );\n    }\n    // 加减乘除的重载运算符，很精妙的写法\n    // 不太懂lhs和rhs是什么，只知道大概是两个input量，不像是数据结构里树的左孩子和右孩子\n    friend Int operator + ( const Int &lhs , const Int & rhs ){\n        return reduce(Int(lhs.A + rhs.A - mod1, lhs.B + rhs.B - mod2, lhs.C + rhs.C - mod3));\n    }\n    friend Int operator - ( const Int &lhs , const Int & rhs ){\n        return reduce(Int(lhs.A - rhs.A, lhs.B - rhs.B, lhs.C - rhs.C));\n    }\n    friend Int operator * ( const Int &lhs , const Int & rhs ){\n        return Int( lhs.A * rhs.A % mod1 , lhs.B * rhs.B % mod2 , lhs.C * rhs.C % mod3 );\n    }\n    int get(){\n        int x = (B - A + mod2) % mod2 * inv_1 % mod2 * mod1 + A;\n        return ((C - x % mod3 + mod3) % mod3 * inv_2 % mod3 * (mod_1_2 % mod) % mod + x) % mod;\n    }\n};\n\n#define maxn 200010 //maxn表示处理的最大元素数量\nnamespace Poly{\n    #define N (maxn << 1) //N 定义为 maxn 的两倍，表示用于 NTT 的数组大小。\n    /*\n        lim：表示当前处理的长度，是最小的2的幂大于等于输入大小的值\n        s：记录 lim 的二进制位数\n        rev：用于存储每个索引的反转（bit-reversal）值\n        Wn：预计算的旋转因子（根单位元），用于 NTT 计算\n    */\n    int lim , s , rev[N];\n    Int Wn[N|1];\n    /*\n        初始化 NTT 相关参数\n        计算 lim 为不小于 n 的最小的2的幂\n        生成反转索引 rev，用于在 NTT 中重排数据\n        计算旋转因子 t，用于每个模数（mod1, mod2, mod3），通过幂函数 Math::pw 计算\n        初始化 Wn 数组，预计算旋转因子\n    */\n    void init( int n ){\n        s = -1 , lim = 1;\n        while( lim < n ) lim <<= 1 , s ++;//填充\n        for(int i = 1;i < lim;i ++) rev[i] = rev[i >> 1] >> 1 | (i & 1) << s;\n        const Int t(Math::qpow(G, (mod1 - 1) / lim, mod1), Math::qpow(G, (mod2 - 1) / lim, mod2), Math::qpow(G, (mod3 - 1) / lim, mod3));\n        *Wn = Int(1); \n        for (Int *i = Wn; i != Wn + lim; ++i) *(i + 1) = *i * t;\n    }\n    /*\n        执行 NTT 转换；首先进行反转操作，将数组 A 中的元素按 rev 数组重排\n        进行蝶形操作（butterfly operation），对数组进行逐层计算，利用预计算的旋转因子 Wn\n    */\n    inline void NTT(Int *A, const int op = 1) {\n\t\tfor (int i = 1; i < lim; ++i) if (i < rev[i]) std::swap(A[i], A[rev[i]]);\n\t\tfor (int mid = 1; mid < lim; mid <<= 1) {\n\t\t\tconst int t = lim / mid >> 1;\n\t\t\tfor (int i = 0; i < lim; i += mid << 1) {\n\t\t\t\tfor (int j = 0; j < mid; ++j) {\n\t\t\t\t\tconst Int W = op ? Wn[t * j] : Wn[lim - t * j];\n\t\t\t\t\tconst Int X = A[i + j], Y = A[i + j + mid] * W;\n\t\t\t\t\tA[i + j] = X + Y, A[i + j + mid] = X - Y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n        // 如果 op 为 0，表示是反向变换，则需要进行归一化，将结果除以 lim\n\t\tif (!op) {\n\t\t\tconst Int ilim(Math::inv(lim, mod1), Math::inv(lim, mod2), Math::inv(lim, mod3));\n\t\t\tfor (Int *i = A; i != A + lim; ++i) *i = (*i) * ilim;\n\t\t}\n\t}\n#undef N\n}\n\nint n , m , x;\nInt A[maxn << 1], B[maxn << 1], C[maxn << 1];\nsigned main() {\n    scanf(\"%lld%lld%lld\", &n, &m, &mod); ++n, ++m;//因为要考虑常数项，所以+1\n    for(int i = 0;i < n;i ++) scanf(\"%lld\", &x), A[i] = Int(x % mod);\n    for(int i = 0;i < m;i ++) scanf(\"%lld\", &x), B[i] = Int(x % mod);\n    Poly::init(n + m);\n    Poly::NTT(A), Poly::NTT(B);//系数转化为点值\n    for(int i = 0;i < Poly::lim;i ++) C[i] = A[i] * B[i];//点值逐项相乘\n    Poly::NTT(C,0);//反向转化（即op=0），点值转回系数\n    for(int i = 0;i < n+m-1;i ++) printf(\"%lld \",C[i].get());\n    printf(\"\\n\");return 0;\n}\n```\n\n---\n\n参考文档：\n\nFFT的学习主要看的这篇https://www.cnblogs.com/RabbitHu/p/FFT.html\n\n写的很*，但是参考文献很好https://blog.csdn.net/Ciellee/article/details/108336914\n\n这篇是后续补充用的(fft)https://www.cnblogs.com/pam-sh/p/15976275.html\n\n同上，不过这里是ntt了https://www.cnblogs.com/windymoon/p/17124857.html\n\nhttps://www.cnblogs.com/xxeray/p/fast-fourier-transform.html\n","tags":["mathematics"]},{"title":"后量子学习笔记·其二","url":"/2024/09/29/后量子学习笔记·其二/","content":"\n在 [撬开后量子的大门](../../../../..//2024/09/21/撬开后量子的大门/) 一文中，我们初步学习了后量子密码学，本篇博客，力求对后量子密码学进行进一步学习\n\n<!--more-->\n\n### 量子计算\n\n我们通常说的量子计算就是通过量子逻辑门来操作处于叠加态的量子。比如Hadamard门，简称H门，他的一个主要功能就是通过计算基态产生等概率的叠加态。通过H门变换后的单量子叠加态为：\n\n$H(|Φ_1⟩)=\\frac{1}{\\sqrt{2}}(|0⟩+|1⟩)$\n\n两种基态的坍塌概率都为 $\\frac{1}{\\sqrt{2}}$，两个量子的H门得到的结果如下：\n\n$H(|Φ_2⟩)=\\frac{1}{\\sqrt{2^2}}(|00⟩+|01⟩+|10⟩+|11⟩)$\n\n每个态坍塌的概率 $\\frac{1}{\\sqrt{4}}$ ，对于n个量子的H门变换后：\n\n$H(|Φ_n⟩)=\\frac{1}{\\sqrt{2^n}}∑_{i=0}^{2n−1}|i⟩$\n\n---\n\n量子门及其对应的门矩阵如下图：\n\n![](后量子学习笔记·其二\\300px-Quantum_Logic_Gates.png)\n\n\n\nhttps://en.wikipedia.org/wiki/Quantum_logic_gate\n\n挖个坑，这是另外一篇笔记的事情了\n\n---\n\n还有一个比较重要的复合门是受控U(a,x)门：[一只冰牙喵：4.2 受控操作](https://zhuanlan.zhihu.com/p/422428222)\n\n省流：受控U门可以用于计算以a为基底的幂，其一般用于生成指数函数值。\n\n### 量子如何做并行运算\n\n量子计算正是有了数据的可叠加性和幺正变换，从而决定了一次操作即可改变多个数据\n\n在经典计算中，并行性的核心思想是将一个计算任务分配给多个处理器同时运行，要快于使用一个处理器来运行。在理想的情况下，将工作分配给K个处理器就应该使计算时间缩短为原来的1/K\n\n而对于量子计算机，将一个N 位量子寄存器中的 $2^N$ 个数据同时通过一次幺正变换（即进行一次运算）所需的时间定义为 $T_q$ ，而经典计算中对一个数据进行运算的时间为 $T_c$ ，因为一次量子计算就对所有的数据做了并行处理，所以量子计算加速能力可以表示为 $S=2^N\\cdot\\frac{T_c}{T_q}$\n\n如果 $T_c=T_q$ ,那么加速能力 $S=2^N$,也就是说对量子计算机做一次运算，相当于对经典计算机做 $2^N$ 次运算\n\n此外，一台量子计算机并不一定在所有计算任务上都比一台经典计算机做得好，比如乘法运算在一台量子计算机上执行就不如传统计算机上快。为了突出量子计算机的优越性，就需要开发量子并行效应能力的算法。\n\n量子计算机是严重依赖于优秀的量子算法的实现，虽然通用量子计算机能做经典计算机的所有事情，但是只有在处理特定问题上量子计算才具有决定性的优势\n\n### Shor算法分析\n\nshor算法直接将质因子分解以及离散对数问题以指数级速度提升，这意味着可以利用同样算法思想来解决更为广泛的隐含子群问题。\n\nRSA是经典计算机大数质因式分解的指数复杂度的困难的一种非对称加密算法，目前最优的因子分解算法（The Number Field Sieve）为指数复杂度 $O\\left(\\exp\\left(\\left(\\frac{64}{9}\\right)^{1/3} \\cdot \\log n^{2/3} \\cdot \\log \\log n^{1/3}\\right)\\right)$ 。而通过shor量子算法可以以多项式复杂度完成大数因式分解，从而可以快速破解RSA算法。\n\nShor算法的核心依赖于 \n\n- H变换\n- U变换\n- QFT(量子傅立叶)\n\nShor算法量子实现线路简图：\n\n![](后量子学习笔记·其二\\shor算法量子实现线路图.png)\n\n\n\n#### RSA算法\n\n我们设RSA的公钥为 $(e,N)$ ，私钥为 $(d,N)$ ,那么生成公私钥的过程如下：\n\n1. 生成两个足够大的素数 $p,q$，得到合数 $N=p*q$，则 $\\phi(N)=(p-1)*(q-1)$\n2. 生成 $e$ ，使得 $e$ 和 $L$ 互质，且满足 $1<e<\\phi(N)$\n3. 生成 $d$，使得 $d*e=1\\mod \\phi(N)$ 且 $1<d<\\phi(N)$\n\n那么加密解密操作如下\n\n$$\n\\begin{cases} c_i=m^e_i(mod\\;N)&加密\\\\ m_i=c^d_i(mod\\;N)&解密\\\\ \\end{cases}\\\\\n$$\n只要能够实现大数N的因子分解，就可以破解RSA\n\n2、问题转化\n\n没看完，改天接着看\n\nhttps://zhuanlan.zhihu.com/p/106923175\n\nhttps://qrunes-tutorial.readthedocs.io/en/latest/chapters/algorithms/shor_Algorithm.html\n\nhttps://blog.csdn.net/bluepeople1/article/details/50015921\n\nhttps://www.cnblogs.com/zhuowangy2k/p/12245636.html\n\n\n\n首先我们需要将大数因子分解问题转化为以求待分解的合数N为模的函数 $f(x)=a^x(mod\\;N)$ 的周期问题。\n\n设周期函数 $f(x)=a^x\\pmod N$ 的周期为r（这里a为小于N，且与N互质的整数），则有：f(x)=f(x+r) , 那么：\n\na^x=a^{x+r} \\pmod N\\\\ \\Rightarrow a^r=1 \\pmod N\\\\ \\Rightarrow (a^{r/2}+1)(a^{r/2}-1)=0 \\pmod N\\\\ \\Rightarrow (a^{r/2}+1)(a^{r/2}-1)=kN \\quad(k=0,1,2,...)\\\\\n\n设整数 x=a^{r/2} ，则\n\n(x-1)(x+1)=kN\\Rightarrow x-1=kN/(x+1),x-1>1\n\n那么 x-1， x+1 都能被 kN 整除，那么一定存在 gcd(x+1,N)>1 或者 gcd(x-1,N)>1 (gcd是一个用[辗转相除法](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=辗转相除法&zhida_source=entity)求[公因子](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=公因子&zhida_source=entity)的函数)，也就说与N存在一个大于1的公约数，这个公约数就是N的[分解因子](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=分解因子&zhida_source=entity)。\n\n例如：设 N=15，a=7 ,则：\n\n\\begin{array}{c|c} x &0&1&2&3&4&5 \\\\ \\hline 7^x&1&7&49&343&2401&16807\\\\ f&1&7&4&13&1&7\\\\ \\end{array}\\\\ r=4\\Rightarrow a^2-1=48，a^2+1=50\\\\ \\Rightarrow gcd(48,15)=3，gcd(50,15)=5\\\\\n\n由此，我们只要求出f(x)的周期，就能轻而易举的分解合数了。而shor算法的精髓就是利用[量子特性](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=量子特性&zhida_source=entity)来快速求解得到周期r.\n\n3、通过Shor算法求周期r\n\n设[量子比特](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=量子比特&zhida_source=entity)长度为 L, 则总共可以表示的 q=2^L 个基态, 设N为要分解的合数，为了确保 2^L 长度内有足够的周期数，我们需要满足\n\nN^2\\leq2^L\\leq2N^2 \\\\\n\n然后，我们利用[Hadamard门](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=2&q=Hadamard门&zhida_source=entity)来构造等概率的量子叠加态 \\mathinner{|x \\rangle} 存入寄存器reg1，然后利用U门来构造 \\mathinner{|f(x) \\rangle} 的叠加态存入寄存器reg2，且使这两个寄存器处于纠缠态。\n\n\\begin{cases} \\mathinner{|\\Phi_1 \\rangle}=\\frac{1}{\\sqrt{2^L}}\\sum_{x=0}^{2^L-1} \\mathinner{|x \\rangle}&reg1\\\\ \\mathinner{|\\Phi_2 \\rangle}=\\frac{1}{\\sqrt{2^L}}\\sum_{x=0}^{2^L-1} \\mathinner{|x \\rangle} \\mathinner{|a^x(mod\\;N) \\rangle}&reg1\\oplus reg2 \\end{cases}\\\\\n\n两个寄存器展开形式如下：\n\n\\begin{align}x&=x_02^0+x_12^1+x_22^2+...+x_{L-1}2^{L-1}\\\\ f(x)&=a^x(mod\\;N)=a_{x_0}^{2^0},a_{x_1}^{2^1},...a_{x_{L-1}}^{2^{L-1}}(mod\\;N)\\end{align}\\\\\n\n由于 f(x) 为周期函数，设周期为r，A为总长2^L中存在的周期数，则\n\nA=\\frac{2^L}{r}\\tag{0}\\\\\n\n设l为小于一个周期内的x的值, x=l+Ar, 则整个系统的态实际为\n\n\\mathinner{|\\Phi_2 \\rangle}=( \\mathinner{|l \\rangle} \\mathinner{|f(l) \\rangle}+\\mathinner{|l+r \\rangle} \\mathinner{|f(l+r) \\rangle}+\\mathinner{|l+3r \\rangle} \\mathinner{|f(l+3r) \\rangle}+...+(\\mathinner{|l+(A-1)r \\rangle} \\mathinner{|f(l+(A-1)r) \\rangle})\\\\\n\n因此，x可以表示为\n\nx=l,l+r,l+2r,l+3r,...l+(A-1)r\\\\\n\n然后对reg2进行计算基上的测量，设测量结果设为 Z ，测量Z在reg1中的投影变化为\\begin{align}\\mathinner{|\\Phi_1 \\rangle}&=\\frac{1}{\\sqrt{A}}\\sum_{j=0}^{A-1} \\mathinner{|jr+l \\rangle}\\tag{1}\\\\ &=\\frac{1}{\\sqrt{\\frac{2^L}{r}}}\\sum_{j=0}^{\\frac{2^L}{r}-1} \\mathinner{|jr+l \\rangle}\\end{align}\\\\\n\n例如 N=15，a=7 ，测量后的整个系统的态为：\n\n\\mathinner{|\\Phi_2 \\rangle}=\\frac{1}{\\sqrt{2^L}}( \\mathinner{|0 \\rangle} \\mathinner{|1 \\rangle}+\\mathinner{|1 \\rangle} \\mathinner{|7 \\rangle}+\\mathinner{|2 \\rangle} \\mathinner{|4 \\rangle}+\\mathinner{|3 \\rangle} \\mathinner{|13\\rangle}+\\mathinner{|4 \\rangle} \\mathinner{|1 \\rangle}+\\mathinner{|5 \\rangle} \\mathinner{|7 \\rangle}+\\mathinner{|6 \\rangle} \\mathinner{|4 \\rangle}+\\mathinner{|7 \\rangle} \\mathinner{|13 \\rangle})\\\\\n\n经过投影后\n\n\\begin{array}{c|c} Z &\\text{测量后x的态}&offset \\\\ \\hline 1&(\\mathinner{|0 \\rangle}+\\mathinner{|4 \\rangle}+\\mathinner{|8 \\rangle}+...)\\mathinner{|1 \\rangle}&0\\\\ 4&(\\mathinner{|2 \\rangle}+\\mathinner{|6 \\rangle}+\\mathinner{|10 \\rangle}+...)\\mathinner{|4 \\rangle}&1\\\\ 7&(\\mathinner{|1 \\rangle}+\\mathinner{|5 \\rangle}+\\mathinner{|9 \\rangle}+...)\\mathinner{|7 \\rangle}&2\\\\ 13&(\\mathinner{|3 \\rangle}+\\mathinner{|7 \\rangle}+\\mathinner{|11 \\rangle}+...)\\mathinner{|13 \\rangle}&3\\\\ \\end{array}\\\\\n\n这里，当测量得到一个 \\gamma 值后，由于寄存器reg1和寄存器reg2是处于纠缠态，所以Z值测量后寄存器reg1会塌陷为相同[Z值](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=2&q=Z值&zhida_source=entity)的 \\mathinner{|x \\rangle} 叠加态，如果reg2测量的值为1，那么reg1则处于 (\\mathinner{|0 \\rangle}+\\mathinner{|4 \\rangle}+\\mathinner{|8 \\rangle}+...) 的叠加态，那么周期 r 的信息就包含在reg1中，因此对reg1进行量子傅里叶变化：\n\nQFT(\\mathinner{|jr+l \\rangle})=\\frac{1}{\\sqrt{2^L}}\\sum_{\\gamma=0}^{2^L-1}e^{2\\pi i(jr+l)\\gamma/2^L}\\mathinner{|\\gamma \\rangle}\\\\ QFT(\\mathinner{|\\Phi_{2} \\rangle})=\\frac{1}{\\sqrt{A}}\\sum_{j=0}^{A-1}QFT(\\mathinner{|jr+l \\rangle})\\\\\n\n上式可以变换为：\n\n\\begin{align} QFT(\\mathinner{|\\Phi_{2} \\rangle})&=\\frac{1}{\\sqrt{A}}\\sum_{j=0}^{A-1}[\\frac{1}{\\sqrt{2^L}}\\sum_{\\gamma=0}^{2^L-1}e^{2\\pi i(jr+l)\\gamma/2^L}]\\mathinner{|\\gamma \\rangle}\\\\ &=\\sum_{\\gamma=0}^{2^L-1}[\\frac{\\sqrt{r}}{2^L}\\sum_{j=0}^{A-1}e^{2\\pi i(jr+l)\\gamma/2^L}]\\mathinner{|\\gamma \\rangle} \\end{align}\\\\\n\n这里为什么要这么变换，因为当测量Reg2时，Reg2坍塌为了r个值中的一个值，所以每一个值对应reg1中的A个叠加态。这里设：\n\nC_\\gamma=\\frac{\\sqrt{r}}{2^L}\\sum_{j=0}^{A-1}e^{2\\pi i(jr+l)\\gamma/2^L}=\\frac{\\sqrt{r}}{2^L}e^{2\\pi il\\gamma/2^L}[\\sum_{j=0}^{A-1}e^{2\\pi ijr\\gamma/2^L}] \\tag{2}\\\\\n\n这里，我们需要考虑两种情况，一种是 2^L 能够整除 r 的情况，也就是在 2^L 内刚好有整数个周期，一种是不能整除的情况。如果能够整除，那说明每个波峰刚好位于 \\gamma=k2^L/r ，不能整除时，波峰位于非常接近波峰的两侧，因为波峰处的 \\gamma 本应该为非整数，而我们测量得到 \\gamma 只能是整数，所以这时候我们需要加入微调的参数。接下来我们分别对这两种情况进行分析。\n\nA.[整数周期](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=3&q=整数周期&zhida_source=entity)\n\n在(2)式的[ ]中，在 \\gamma 是 \\frac{2^L}{r} 的整数倍情况下变成，出现相长干涉，求和后为 A=\\frac{2^L}{r} ，如果不为整数，则为[相消干涉](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=相消干涉&zhida_source=entity)，其值趋于0. 所以\n\nC_\\gamma=\\begin{cases} \\frac{1}{\\sqrt{r}}e^{2\\pi il\\gamma/2^L}&\\gamma=k2^L/r\\\\ 0&\\gamma\\ne k2^L/r\\\\ \\end{cases}\\\\\n\n当 \\gamma\\ne k2^L/r 时，我们通过[等比数列](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=等比数列&zhida_source=entity)转化得到：\n\nC_\\gamma=\\frac{\\sqrt{r}}{2^L}e^{2\\pi il\\gamma/2^L}[\\sum_{j=0}^{A-1}e^{2\\pi ijr\\gamma/2^L}]=\\frac{\\sqrt{r}}{2^L}e^{2\\pi il\\gamma/2^L}[\\frac{e^{2\\pi iAr\\gamma/2^L}-1}{e^{2\\pi ir\\gamma/2^L}-1}]\\\\\n\n带入（0）式得：\n\nC_\\gamma=\\frac{\\sqrt{r}}{2^L}e^{2\\pi il\\gamma/2^L}[\\frac{e^{2\\pi i\\gamma}-1}{e^{2\\pi ir\\gamma/2^L}-1}]\\\\\n\n由于 e^{2\\pi i\\gamma}-1=0 ，也就是说，当 \\gamma\\ne k2^L/r ，也即不为整数，则为相消干涉，其值为0。\n\n通过量子傅里叶变换后得到如下叠加态\n\n\\mathinner{|\\Phi_{n} \\rangle}=\\frac{1}{\\sqrt{r}}\\sum_{k=0}^{r-1}e^{2\\pi ik/r}\\mathinner{|\\frac{k2^L}{r} \\rangle}\\\\ \\rho(\\mathinner{|\\Phi_{n} \\rangle})=|\\frac{1}{\\sqrt{r}}|^2=\\frac{1}{r}\n\n测量 \\mathinner{|\\gamma \\rangle} 的值， 等概率 \\frac{1}{r} 地选择出一个态。由 \\gamma=\\frac{k2^L}{r} 得：\n\n\\frac{\\gamma}{2^L}=\\frac{k}{r}\\\\\n\n如果有 gcd(k,r)=1\\;(\\rho[gcd(k,r)=1])=\\frac{1}{log(r)}) , r 就可以从 \\frac{\\gamma}{2^L} 的[不可约分数](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=不可约分数&zhida_source=entity)求出。\n\nB. 非整数周期\n\n2^L 不能整除 r 的情况下,那么在x值范围内的周期数A便不是整数，此时我们加入微调参数 \\delta_k 稍作调整，使得 \\gamma 为整数，设\n\n\\gamma=\\gamma_k+\\delta_k=k\\frac{2^L}{r}+\\delta_k\\\\\n\n因此(2)式的[ ]为：\n\n\\begin{align}\\sum_{j=0}^{A-1}e^{2\\pi ijr\\gamma/2^L}&=\\sum_{j=0}^{A-1}e^{2\\pi ijr(k\\frac{2^L}{r}+\\delta_k)/2^L}\\\\ &=\\sum_{j=0}^{A-1}e^{2\\pi ijk}\\cdot e^{2\\pi ijr\\delta_k/2^L}\\\\ &=\\sum_{j=0}^{A-1}e^{2\\pi ijr\\delta_k/2^L}\\\\&=\\frac{e^{2\\pi iAr\\delta_k/2^L}-1}{e^{2\\pi ir\\delta_k/2^L}-1}\\end{align}\\tag{3}\\\\\n\n\n\n这里 \\delta_k 的值极小，该值用于逼近函数的峰值，我们再令\n\n\\theta=\\frac{2\\pi r\\delta_k}{2^L}\\tag{4}\n\n因此(3)式的平方表示为\n\n|\\frac{e^{iA\\theta}-1}{e^{i\\theta}-1}|^2=(\\frac{cosA\\theta+isinA\\theta-1}{cos\\theta+isin\\theta-1})^2\\\\\n\n由于\n\n\\begin{align} cos\\theta+isin\\theta-1&=1-2sin^2\\frac{\\theta}{2}+2isin\\frac{\\theta-1}{2}cos\\frac{\\theta-1}{2}-1\\\\ &=2sin\\frac{\\theta}{2}(sin\\frac{\\theta}{2}-icos\\frac{\\theta}{2})\\\\ &=2isin\\frac{\\theta}{2}(cos\\frac{\\theta}{2}+isin\\frac{\\theta}{2})\\\\ &=2isin\\frac{\\theta}{2}\\cdot e^{\\frac{i\\theta}{2}} \\end{align}\\\\\n\n因此\n\n|\\frac{e^{iA\\theta}-1}{e^{i\\theta}-1}|^2=|\\frac{2isin\\frac{A\\theta}{2}\\cdot e^{\\frac{iA\\theta}{2}}}{2isin\\frac{\\theta}{2}\\cdot e^{\\frac{i\\theta}{2}}}|^2=\\frac{sin^2\\frac{A\\theta}{2}\\cdot e^{iA\\theta}}{sin^2\\frac{\\theta}{2}\\cdot e^{i\\theta}}=\\frac{sin^2\\frac{A\\theta}{2}}{sin^2\\frac{\\theta}{2} }\\cdot e^{i(A-1)\\theta/2}\n\n所以得到 \\gamma 的概率为\n\n\\rho(\\mathinner{|\\gamma \\rangle})=(\\frac{\\sqrt{r}}{2^L})^2\\frac{sin^2\\frac{A\\theta}{2}}{sin^2\\frac{\\theta}{2}}\\\\ =\\frac{r}{2^{2L}} \\frac{sin^2\\frac{A\\theta}{2}}{sin^2\\frac{\\theta}{2} }\\\\ =\\frac{r}{2^{2L}} \\frac{sin^2\\pi rA\\delta_k}{sin^2\\pi r\\delta_k }\\\\\n\n\n这里，为了严谨讨论，我们设 |\\delta_k| 小于等于1/2（如果大于1/2，可以认为是下一个整数 z-(1-\\delta) ），所以这是适用于所有情况的\n\n|\\delta_k|\\leq\\frac{1}{2}\\tag{5}\n\n由(4)(5)得：\n\n|\\theta|\\leq\\frac{2\\pi \\frac{r}{2}}{q}=\\frac{\\pi r}{q} \\\\ \\Rightarrow \\frac{|A|}{2}|\\theta|\\leq\\frac{\\pi r}{q}\\cdot \\frac{A}{2}<\\frac{\\pi r}{q}\\cdot\\frac{2^L}{2r}=\\frac{2^{L-1}\\pi}{q}=\\frac{\\pi}{2}\\tag{13}\n\n当 \\alpha\\in[0,\\frac{\\pi}{2}]， sin\\alpha 必位于[原点](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=原点&zhida_source=entity)与点 (\\pi/2,1) 连线的上方，所以\n\nsin(\\frac{A}{2})\\theta\\geq\\frac{2}{\\pi}(\\frac{A}{2})\\theta\\\\\n\n而对于任意 \\alpha ， |sin\\alpha| 为[凸函数](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=凸函数&zhida_source=entity)，有：\n\n|sin(\\frac{A}{2})\\theta|\\geq|\\frac{2}{\\pi}(\\frac{A}{2})\\theta|\\\\\n\n又因 sin\\frac{\\theta}{2}\\leq\\frac{\\theta}{2} ,因此：\n\n\\frac{sin^2(\\frac{A}{2}\\theta)}{sin^2(\\frac{\\theta}{2})} \\geq\\frac{(\\frac{2}{\\pi}(\\frac{A}{2}\\theta))^2}{sin^2(\\frac{\\theta}{2})}\\geq\\frac{(\\frac{2}{\\pi}\\frac{A}{2}\\theta)^2}{(\\frac{\\theta}{2})^2}\\\\ =\\frac{\\frac{2}{\\pi}(\\theta)^2}{(\\frac{\\theta}{2})^2}\\cdot(\\frac{A}{2})^2 =\\frac{16}{\\pi^2}\\cdot(\\frac{A}{2})^2\n\n所以，测量 \\mathinner{|\\gamma \\rangle} 的概率为\n\n\\rho(\\mathinner{|\\gamma \\rangle})=|C_\\gamma|^2\\geq\\frac{r}{2^{2L}}\\cdot\\frac{16}{\\pi^2}(\\frac{2^L}{2r})^2=\\frac{4}{\\pi^2r}\\\\\n\n最后，我们来讨论测量值 \\gamma ,有\n\n\\gamma r=(k\\frac{2^L}{r}+\\delta_k)\\cdot r\\\\ =k2^L+\\delta_kr\\\\ \\Rightarrow |\\gamma r-k2^L|=|\\delta r|\\leq\\frac{r}{2}\\\\\n\n所以\n\n|\\frac{\\gamma}{2^L}-\\frac{k}{r}|\\leq\\frac{r}{2}\\cdot\\frac{1}{2^Lr}=\\frac{1}{2^{L+1}}\\\\\n\n这里 \\gamma 已测得，这里严格存在一个分数 \\frac{k}{r} ,可由 \\frac{\\gamma}{2^L} 的连分数展开求出（下一个节将通过实例说明），通过约分满足 gcd(k,r)=1 就可得到 r 的值，gcd算法的成功率为\n\n\\rho(gcd(k,r))>\\frac{1}{logr}\\\\ \\Rightarrow Prob[N]=Prob(gcd(k,r))\\cdot Prob(\\gamma)>\\frac{1}{logr}\\cdot\\frac{4}{\\pi^2r}=\\frac{4}{\\pi^2rlogr}\n\n也就是说我们能以大于 \\frac{4}{\\pi^2rlogr} 的[概率分解](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=概率分解&zhida_source=entity)N的因子再加上量子傅里叶变换的复杂度为 O(n^2) ,所以shor算法的[时间复杂度](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=时间复杂度&zhida_source=entity)为 O(n^2rlogr)\n\n### 三、实例分析\n\n虽然上面已经分析得很透彻了，但是估计还是有人觉得会太抽象，所以下面我以一个例子来进行[实例分析](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=3&q=实例分析&zhida_source=entity)，以帮助理解。\n\n对于 f(x)=a^x(mod N) ，N=91，a=4，那么\n\nf(1)=4,f(2)=16,f(3)=64,f(4)=74,f(5)=23,f(6)=1\n\n所以周期为 r=6， N<2^7 ,L=2\\times 7=14，然后根据2，3式我们计算得到：\n\n\\begin{array}{c|c} k &\\gamma=k2^L/r&最近整数&\\rho(\\gamma)&\\gamma/2^L\\\\ \\hline 0&0&0&0.167&0\\\\ \\hline 1&2730.67&2731&0.114&0.166687\\\\ \\hline 2&5461.33&5461&0.114&0.333312\\\\ \\hline 3&8192&8192&0.167&0.500000\\\\ \\hline 4&10922.67&10923&0.114&0.666687\\\\ \\hline 5&13653.33&13653&0.114&0.833312\\\\ \\end{array}\\\\\n\n这里， \\gamma 是我们测量得到值，如果这个值为0，那么对于我们求周期r是没有意义的，所以除开这种情况下，测得其他值的概率和为0.623。如果测量的值为13653，那么我们来计算0.833312的连分数。\n\n1/0.833312=1.200031,\n\n1/0.200031=4.999225,\n\n1/0.999225=1.000775,\n\n1/0.000775=1290.322580\n\n这里遇到大数1290，我们就终止，最后我们得到连分数为\n\n[0;1,4,1]=\\frac{1}{1+\\frac{1}{4+1}}=\\frac{5}{6}\\\\\n\n那么我们就可以确定 k=5,r=6 了吗，那有没可能 k=10,r=12 呢，所以，我们不能单纯的通过一次测量来确定周期，我们来考察其他几项，我这里不再一一去展开了，懒人可以在这里去计算([连分数计算 -连分数计算器-分数计算器](https://link.zhihu.com/?target=http%3A//www.ab126.com/shuxue/2939.html))。\n\n\\begin{array}{c|c} k &\\gamma最近整数&\\gamma最近整数/2^L&连分数展开近似值\\\\ \\hline 0&0&0&0\\\\ \\hline 1&2731&0.166687&\\frac{1}{6}\\\\ \\hline 2&5461&0.333312&\\frac{1}{3}\\\\ \\hline 3&8192&0.500000&\\frac{1}{2}\\\\ \\hline 4&10923&0.666687&\\frac{2}{3}\\\\ \\hline 5&13653&0.833312&\\frac{5}{6}\\\\ \\end{array}\\\\\n\n因此，如果我们将shor算法多执行几次，最后求出各个分母的最小公倍数，那么这个[最小公倍数](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=3&q=最小公倍数&zhida_source=entity)就是我们要找的周期r，有了周期r，我们就不难求出合数N的质数因子了，进而也能够比较容易破解RSA算法了。\n\n\n\n### 四、离散对数问题简析（不感兴趣可以略过，有时间补充）\n\n通过对shor算法原理的剖析，我们可以知道，对于任何具备转化为求周期函数的周期为目标的问题都可以用同样算法以指数加速来快速解决，比如离散对数(ElGamal), ECC之类的非对称加密算法都可以用同样的思想来解决。\n\n离散对数多说两句，Shor在其原始论文中对于素域上的离散对数问题，给出了一个基于整数求阶量子计算算法求解算法,成功率为1/480。Shor指出在解决素域上的离散对数问题时，其实并没有利用到素域的特性，因而对有限域上的[离散对数](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=8&q=离散对数&zhida_source=entity)问题也同样成立。后来Eicher和Opku给出了一个在多 项式时间内以1/480的成功率攻击椭圆曲线离散对数问题的[量子计算算法](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=2&q=量子计算算法&zhida_source=entity)\n\n设一个阶为 p ,且生成器 为g 的群 G （ g\\in G ）,如果 x=g^r(mod\\; p)\\in G ,那么对于部分 r\\in \\mathbb{Z}_p ,我们希望得到 r ,那么 r 就是离散对数 r=log_g(x) .\n\n比如EIGamal加密，对于随机大大素数P,以及随机数x,满足y=g^x(mod\\;P)\\;1<x<P-1,g\\in Z^*_P\\\\\n\n这里 (y,g,P) 为公钥， x 为私钥。我们将长度为 N，N<log^P_2 的消息分组为\n\nm_1m_2...m_t\\\\\n\n那么计算密文\n\n\\begin{cases} c_i=g^{r_i}(mod \\;P)& \\\\c^{'}_i=m_iy^{r_i}(mod \\;P)&\\\\ \\end{cases}1\\leq i\\leq t\\\\\n\n这里c1,c2为加密后的密文,那么解密过程如下：\n\nm_i=\\frac{c^{'}_i}{c^x_i}(mod\\;P)\\;1\\leq i\\leq t\\\\\n简单推一下\n\n\\frac{c^{'}_i}{c^x_i}=\\frac{m_iy^{r_i}}{g^{xr_i}}=\\frac{m_ig^{xr_i}}{g^{xr_i}}=m_i(m_i<P)\\\\\n\n考虑abelian 群 \\mathbb{Z}_p \\times\\mathbb{Z}_p (每一个因子对应于值的模加)。那么函数\n\nf:\\mathbb{Z}_p \\times\\mathbb{Z}_p\\rightarrow G; f(a,b)=g^ax^{b}\n\n这给我们呈现了一个abelian 隐含子群问题，同时可以看出映射 f 是一个[群同态](https://zhida.zhihu.com/search?content_id=111891127&content_type=Article&match_order=1&q=群同态&zhida_source=entity)。kernel为 (r,1) 的倍数，所以如果我们能找到kernel，我们就能够找 r .\n\n对于函数 f(a,b)=g^ax^b(mod\\;p) ,设周期为 r_g 和 r_x ，那么\n\ng^ax^b=g^{a+r_g}x^{b+r_x}=g^ax^b\\cdot g^{r_g}x^{r_x}\\\\ \\Rightarrow g^{r_g}x^{r_x}=1(mod\\;p)\\\\ \\Rightarrow g^{r_g}g^{rr_x}=g^{r_g+rr_x}=1(mod \\;p)\\\\\n\nr_g+rr_x=0(mod\\;q)\\\\ r=-\\frac{r_g}{r_x}\\\\\n\n因此，我们只要通过量子算法求得周期 r_g,r_x 就可以得到 r .使用量子算法处理离散子群问题，和我们前面讲解的方法非常类似，后续有时间再分析吧。\n\n","tags":["Crypto","unfixed"]},{"title":"ElGamal是个啥子玩意","url":"/2024/09/28/ElGamal是个啥子玩意/","content":"\n很早之前就听说ElGamal加密算法是一种公钥密码，但是具体实现和用途不甚了解，今天阅读了 `A PUBLIC KEY CRYPTOSYSTEM AND A SIGNATURE SCHEME BASED ON DISCRETE LOGARITHMS  ` 一文，故去了解了一下。特开此文，记录一下\n\n<!--more-->\n\n省流：ElGamal是DH密钥交换的抵抗中间人攻击版本\n\n---\n\n[ElGamal加密算法](https://zh.wikipedia.org/wiki/ElGamal%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95)是一个基于[DH密钥交换](https://zh.wikipedia.org/wiki/%E8%BF%AA%E8%8F%B2-%E8%B5%AB%E7%88%BE%E6%9B%BC%E5%AF%86%E9%91%B0%E4%BA%A4%E6%8F%9B)的非对称算法，可以定义在任何循环群上，它的安全性取决于循环群上的离散对数难题\n\n离散对数问题指的是：\n\n- 已知 $a,b,n$ ，计算$ a^b\\mod n$ 是简单的。\n- 已知 $a,(a^b\\mod n),n$ ，计算 $b$ 是困难的。\n\nDiffie-Hellman 密钥交换过程：\n\n1. Alice 和 Bob选定一个素数 $p$ ，以及它的一个原根 $g$ \n2. Alice 选择一个密钥 $a$ ，计算 $A=g^a\\mod p$ ，发给 Bob \n3. Bob 选择一个密钥 bb ，计算 $B=g^b\\mod p$ ，发给 Alice \n4. Alice 计算 $s=B^a\\mod p$ ，Bob 计算 $s=A^b\\mod p$ \n   这样，Alice 和 Bob 就共享了一个密钥 $s=g^{ab}\\mod p$ \n\n通俗理解：在调色板上将两种颜色混合容易，而将两种颜色分开是困难的。\n\n<img src=\"ElGamal是个啥子玩意\\rU3aDS.png\" style=\"zoom:33%;\" />\n\n由于离散对数问题是一个数学困难问题，在选择了合适的 $p$ 和 $g$ 时，Diffie-Hellman 密钥交换协议被认为是 $\\textcolor{red}{窃听安全}$ 的。攻击者 Eve 在已知 $p, g, (g^a\\mod p), (g^b\\mod p)$ 的情况下，难以计算出 $s=g^{ab}\\mod p$\n\n $\\textcolor{red}{缺陷:无法抵抗中间人攻击}$ \n\nDH 本身没有提供任何身份认证，因此容易遭受中间人攻击：\n\n- 中间人 Eve 假装自己是 Bob 与 Alice 通信 $s_1=g^{ac}\\mod p$ \n- 中间人 Eve 假装自己是 Alice 与 Bob 通信 $s_2=g^{bc}\\mod p$ \n- Eve 将 Alice 发来的消息用 $s_1$ 解密，使用 $s_2$ 加密，发送给 Bob \n- Eve 将 Bob 发来的消息用 $s_2$ 解密，使用 $s_1$ 加密，发送给 Alice \n- Alice 和 Bob 对此一无所知，还无知地以为在与对方通信\n\n需要一种能验证通信双方身份的机制 (如签名) 来防止这类攻击\n\n---\n\nElGamal 加密算法：\n\n本质上就是用 DH 获得一个密钥，然后用它加解密消息。\n\n密钥生成：\n\n1. Alice 和 Bob 选定一个素数 $p$ ，以及它的一个原根 $g$\n2. Alice 选择一个私钥 $X_A$ ，计算公钥 $Y_A=g^{X_A}\\mod p$，公开\n3. Bob 选择一个私钥 $X_B$ ，计算公钥 $Y_B=g^{X_B}\\mod p$ ，公开\n\n假如 Bob 要给 Alice 发送一条消息 $m$ ，加密过程：\n\n1. Bob 计算密钥 $k=(Y_A)^{XB}\\mod p=g^{X_AX_B}\\mod p$ \n2. Bob 发送 $c_1=Y_B, c_2=k\\cdot m\\mod p$\n\nAlice 收到密文，解密过程：\n\n1. Alice 计算密钥 $k=(c_1)^{X_A}\\mod p=(Y_B)^{X_A}\\mod p=g^{X_AY_A}\\mod p$\n2. Alice 解密消息 $m=(c_2\\cdot k^{−1})\\mod p$\n\n实现代码：\n\n```\nfrom Crypto.Util.number import *\n\np = None ; g = None\npub = None#公钥也是公共可见的\nc = None#加密方加密后并传输给解密方的密文，这个也是可以被攻击者截获的\n\n#初始化，公共可见的大素数和生成元\ndef init():\n    global p , g\n    p = getPrime(512)\n    g = 2\n\n#接收方(A)需要干的事情，即生成密钥（包括公钥和私钥\ndef reciver_need_do():\n    global pub\n    a_pri = bytes_to_long(b'I am priviate key of A.')\n    a_pub = pow( g , a_pri , p )\n    pub = a_pub\n    return a_pri\n\n#发送方(B)需要进行的加密操作，生成密文并\ndef ElGamal_encode():\n    m = bytes_to_long(b'miao miao miao wo shi ming wen 233')\n    k = getRandomInteger(10)\n    c1 = pow( g , k , p )\n    c2 = m * pow( pub , k , p ) % p\n    return c1 , c2\n\n#解密方需要进行的解密操作\ndef ElGamal_decode( pri ):\n    global c\n    c1 , c2 = c\n    c1 = pow( c1 , p-2 , p )\n    m = c2 * pow( c1 , pri , p ) % p\n    return m\n\nif __name__ == '__main__':\n    init()\n    a_pri = reciver_need_do()#返回接受者的私钥，a_pri只有接受者可以用\n    c = ElGamal_encode()#B将信息进行加密，然后传给A\n    m = ElGamal_decode( a_pri )#A使用自己的密钥，对信息进行解密\n    print( long_to_bytes(m) )\n```\n\n","tags":["Crypto"]},{"title":"公钥密码学经典方案30篇 学习笔记（初次阅读）","url":"/2024/09/27/公钥密码学经典方案30篇-学习笔记（初次阅读）/","content":"\n本文是 [荔枝橙味拱腰觅马糕守](../../../../../2024/09/11/%E8%8D%94%E6%9E%9D%E6%A9%99%E5%91%B3%E6%8B%B1%E8%85%B0%E8%A7%85%E9%A9%AC%E7%B3%95%E5%AE%88/) 一文的后继，主要内容是对于 `方案构造学习` 一章中的 `尝试发现方案构造错误` 一节下的 30个`经典方案`的学习笔记\n\n经过初次阅读尝试，发现笔者英文阅读能力较低，不足以在短暂时间内完成大量论文的阅读；故选择了在翻译器和人工智能的帮助下来进行阅读，以提升效率，并为第二次阅读打好基础\n\n<!--more-->\n\n## 1984, A Public Key Cryptosystem and a Signature Scheme Based on Discrete Logarithms. [34]\n\n### 引言\n\n1976年，Diffie和Hellman首次提出了公钥密码的概念，并依赖离散对数问题和素数域上的计算复杂性来构造其密钥交换协议。ElGamal的工作正是基于这种思想，进一步提出了一个可以实现消息加密和解密的公钥加密系统，以及一个数字签名方案。\n\n### 公钥密码系统\n\n公钥密码体制的基本思想是使用 `Diffie-Hellman` 密钥交换的基础\n\n首先，通信双方选择一个大质数 $p$ 和生成元 $g$ ，这些参数都是公开的\n\n然后双方分别选取自己的私钥（分别是 $x_A$ 和 $x_B$），并计算相应的公钥\n$$\ny_A=g^{x_A}\\mod p\\\\\ny_B=g^{x_B}\\mod p\n$$\n然后就可以计算共享的公钥\n\n$K=(y_A)^{x_B}\\mod p=(y_B)^{x_A}\\mod p$\n\n这提供了一个安全的共享密钥，但计算此密钥的过程难度等同于计算离散对数。该系统的加密过程与Diffie-Hellman方案相关，但使用了随机数 $k$ 来加密每条消息，从而避免了密文重放攻击。解密过程中，接收方根据私钥恢复密钥并解密消息\n\n### 数字签名方案\n\nElGamal提出的数字签名方案依赖于消息的签名和验证。具体来说，签名生成过程如下：\n\n1. 发送方选择一个随机数 $k$ ，并保证 $k$ 与 $p-1$ 互质\n2. 计算 $r=g^k\\mod p$\n3. 使用发送者的私钥 $x_A$ 来解决方程 $m=x_Ar+ks\\mod(p-1)$，从而得到签名对 $(r,s)$\n\n验证方只需使用公钥 $y_A$ 和签名 $(r,s)$ 来验证以下等式：\n\n$g^m\\equiv y_A^rr^s\\mod p$\n\n签名方案的安全性依赖于离散对数问题的计算难度。ElGamal指出，攻击者试图伪造签名或推导私钥将面临离散对数问题的挑战。文章还讨论了在某些情况下可能的攻击方式，但大多无法打破系统的安全性\n\n本质上就是用 DH 获得一个密钥，然后用它加解密消息。\n\n详细代码见 [ElGamal是个啥子玩意](../../../../../2024/09/28/ElGamal是个啥子玩意/)（和本篇论文内容不尽相同，但是殊途同归）\n\n### 安全性分析\n\n文章详细探讨了针对签名方案的可能攻击方式，并指出这些攻击大多数情况下等价于计算离散对数问题。虽然尚未严格证明破解此签名方案与计算离散对数之间的等价性，但已知的攻击方式都未能有效破坏该系统。\n\n1. 如果随机数 $k$ 被重复使用，攻击者可能通过解决线性方程组来推导出私钥。\n2. 攻击者可以尝试通过文档的多个签名来恢复私钥，但计算复杂性极高\n\n### 系统特性及比较\n\n与其他基于整数分解问题的公钥系统（如RSA）相比，ElGamal系统在某些方面有所不同。\n\n- 由于加密过程中的随机性，同一条消息的密文不会重复，有效地防止了已知明文攻击\n- 虽然密文的大小是原消息的两倍，但由于解密只需要一次指数计算，故系统具有较好的计算效率\n\nElGamal离散对数问题的算法复杂性与因子分解问题类似，都是次指数级的复杂度。因此系统的安全性与RSA类似，公共文件的大小相对较大，但这是可接受的\n\n## 1991, Efficient Signature Generation by Smart Cards. [35]\n\n### 引言与背景\n   - 公钥密码学的基本概念：公钥密码学利用一对密钥（公钥和私钥）来加密和解密信息。公钥可以公开，而私钥则保持秘密。\n   - 应用场景：公钥密码学广泛应用于安全通信、数字签名和身份验证等领域。\n\n### 经典公钥密码方案\n   - RSA算法：\n     - 构造方法：通过选择两个大素数 $ p $ 和 $ q $，计算 $ n = p \\times q $。公钥是 $ (n, e) $，私钥是 $ (n, d) $，其中 $ d $ 是 $ e $ 的模 $ \\phi(n) $ 的逆元。\n     - 安全性：基于大数分解问题的困难性。\n\n   - 椭圆曲线密码学（ECC）：\n     - 构造方法：在椭圆曲线上定义操作，利用点加法和标量乘法生成公钥和私钥。\n     - 安全性：基于椭圆曲线离散对数问题的困难性，ECC提供了更小的密钥长度而保持相同的安全性。\n\n   - ElGamal密码方案：\n     - 构造方法：基于离散对数问题。生成一个大素数 $ p $ 和生成元 $ g $，然后选择一个私钥 $ x $ 计算公钥 $ y = g^x \\mod p $。\n     - 安全性：依赖于离散对数问题的复杂性。\n\n### 安全证明\n   - 安全性定义：\n     - 通常包括选择明文攻击（CPA）和选择密文攻击（CCA）的安全性。\n   \n   - 安全性证明方法：\n     - 归约法：将密码方案的安全性归约到已知的难题上。例如，证明RSA的安全性可以归约到大数分解的难度。\n     - 随机预言机模型：假设存在一个理想的随机预言机，用于模拟加密和解密过程，从而分析方案的安全性。\n\n### 实例与应用\n   - 应用实例：可以介绍一些实际应用，如SSL/TLS协议、PGP等，如何利用这些公钥方案确保数据传输的安全性。\n   - 最新研究进展：提到一些后量子密码学方案的发展，因为传统公钥方案可能面临量子计算威胁。\n\n### 总结与未来方向\n   - 总结：公钥密码方案在现代安全通信中至关重要，确保信息的机密性和完整性。\n   - 未来研究方向：研究如何提高现有公钥方案的效率，及其在新兴技术（如量子计算）下的安全性。\n","tags":["Crypto","unfixed"]},{"title":"SM2椭圆曲线加密算法学习笔记","url":"/2024/09/25/SM2椭圆曲线加密算法学习笔记/","content":"\n此文章用于记录笔者对于SM2椭圆曲线加密算法的学习\n\n<!--more-->\n\n## 前置知识\n\n### ElGamal离散对数密码体制\n\n1. #### 公钥密钥生成\n\n   - Alice首先构造一条椭圆曲线 $E$，在曲线上选择一点 $G$ 作为生成元，$n$ 为 $G$ 的阶（且 $n$ 必须为质数)。此时构成了一个循环群 $<G>$。\n\n   - Alice选择一个私钥 $k (k < n)$，生成公钥 $Q = kG$\n   - Alice将公钥组 $(E,Q,G)$ 发送给Bob\n\n2. #### 加密过程\n\n   - Bob收到信息后，将明文编码为 $M$，$M$ 为曲线上一点，并选择一个随机数 $r$（$r < n$，$n$ 为 $G$ 的阶）\n\n   - Bob计算点 $Cipher_1$ 与 $Cipher_2$ 即两段密文，计算方法如下\n\n     $Cipher_1 = M + rQ\\\\ Cipher_2 = rG$\n\n    - Bob把 $Cipher_1$ 和 $Cipher_2$ 发给Alice\n\n3. #### 解密过程\n\n   - Alice收到密文后，为了获得 $M$，只需要 $Cipher_1 - k · Cipher_2$，因为\n   \n     $Cipher1 - k*Cipher2 = M + rQ - krG = M + rkG - krG = M$\n   \n   - 将M解码即可\n\n\n\n## SM2官方文档\n\n标准文档链接：[国家商业密码标准](http://www.gmbz.org.cn/main/bzlb.html)\n\n#### 总则\n\n1. 规定了椭圆曲线的系统参数以及验证方法\n2. 规定了椭圆曲线公钥的验证方法\n3. 附录中给出了椭圆曲线示例\n\n#### 第二部分 数字签名算法\n\n##### 签名算法流程\n\n（一）置M' = ZA || M M为待签名数据 ZA为A的可辨识标识、部分椭圆曲线系统参数和用户A的公钥的Hash值\n\n（二）计算e = Hash(M') 并将其转化为整数\n\n（三）用随机数发生器生成随机数k (k>1 k< n-1) n 椭圆曲线的阶数 可以通过G计算出\n\n（四）计算椭圆曲线点(x1,y1) = [k]G，并将其转化为整数 G为椭圆上一点 [k]G指椭圆乘法k倍G\n\n（五）计算r= (e + x1)mod n，若r=0或r+k=n返回（三）\n\n（六）计算s= ((1+da) ^(-1) * (k-r*da))mod n，若s=0则返回（三） da为用户A的私钥\n\n（七）将r、s数据类型转化成字节串，消息M的签名为(r,s)\n\n##### 验签算法流程\n\n（一）验证r>1 r<n-1\n\n（二）验证s>1 s<n-1\n\n（三）置M' = ZA || M\n\n（四）计算e = Hash(M') 并将其转化为整数\n\n（五）将r s数据类型转换为整数 计算 t= (r+s)mod n ，若t=0则验证不通过\n\n（六）计算椭圆曲线点(x1,y1) = [s]G + [t]Pa Pa为A的公钥\n\n（七） 将x1的数据类型转换成整数，计算R=(e+x1)mod n，验证R=r，成立则验证通过\n\n#### 第三部分 密钥交换协议\n\n##### 密钥交换流程\n\n#### 第四部分 公钥加密算法\n\n##### 加密算法流程\n\n（一）用随机数发生器产生随机数k (k>1 k<n-1)\n\n（二）计算椭圆曲线点C1=[k]G=(x1,y1)，并将其转换为比特串（A的私钥生成公钥）\n\n（三）计算椭圆曲线点S=[h]Pb，若S是无穷远点，则报错并退出 h为n的余因子\n\n（四）计算椭圆曲线点[k]Pb=(x2,y2)，并将其转换为比特串（A的私钥乘B的公钥）\n\n（五）计算t=KDF(x2||y2,klen)，若t为全0比特串，则返回（一） KDF为密钥派生函数\n\n（六）计算C2=M⊕t\n\n（七）计算C3=Hash(x2||M||y2)\n\n（八）输出密文C=C1||C3||C2\n\n##### 解密算法流程\n\n（一）从C中取出比特串C1，将其转换为椭圆曲线上的点，验证C1是否满足椭圆曲线方程\n\n（二）计算椭圆曲线点S=[h]Pb，若S是无穷远点，则报错并退出\n\n（三）计算[db]C1=(x2,y2)，并将其转换为比特串 db B的公钥\n\n（四）计算t=KDF(x2||y2,klen)，若t为全0比特串，则返回（一） KDF为密钥派生函数\n\n（五）从C中取出比特串C2,计算M=C2⊕t\n\n（六）计算u=Hash(x2||M||y2)，从C中取出比特串C3，若u不等于C3，则报错并退出\n\n（七）输出明文M\n\n#### 第五部分 参数定义\n\n给出了SM2使用素数域256位椭圆曲线参数\n","tags":["Crypto","unfixed"]},{"title":"buuoj古典密码学wp","url":"/2024/09/24/buuoj古典密码学wp/","content":"\n此博客用于整理，之前做过的古典密码学题目\n\n之前存储于本地，今天移植到博客中，后续不再在此页面更新\n\n分级十分的混乱，之后有缘再改吧（逃\n\n<!--more-->\n\n<h1>古典密码学</h1>\n\nLinux python 很重要\n\n[Bugku](ctf.bugku.com/challenges)\n\n[实验吧（现在没了）](https://www.shiyanbar.com)\n\n[南邮网络攻防训练平台（现在也没了）](cgctf.nuptsast.com)\n\n<h3>密码学的三个阶段</h3>\n\n1. 古典密码（1949以前），复杂度不高，安全性地，具有艺术性\n\n2. 近代密码（1949-1975），计算机诞生，加密算法在复杂程度和安全性上得到了提升\n3. 现代密码（1976至今），美国密码学专家`Diffie`和`Hellman`在1976年提出公开密钥密码体制概念（非对称制加密），密码学有了全新的方向\n\n古典密码学：\n\n1. 涉及数学问题较少\n2. 很容易被破解，但是设计原理和分析方法对理解设计分析现代密码有帮助\n3. 主要分为：替代和置换\n4. 强化python脚本编写能力，尽力讲大多数加密方法都能写出破解脚本\n5. MD5暴力破解以及算法逆向\n\n<h3>键盘加密</h3>\n\n<h5>键盘布局加密</h5>\n\n通常给出一堆无意义的字符，但是在键盘上比划一下就能拼出相应的字符\n\n可以划归脑洞题的范围\n\n<h5>键盘坐标加密</h5>\n\nbye 对应的密文是 35 16 13（或者相反）\n\n字母行总共三行，数字行总共10行（在一些脑洞题中不一定）\n\n如果小写不对，可能是大写的\n\n<h3>BF和Ook密码</h3>\n\n不需要探究原理，只需要能够识别出它\n\n##### BrainFuck密码\n\n用<>+-.,[]八种符号来替换c语言的各种语法和命令\n\n##### Ook密码\n\n三种符号组成 Ook. Ook? Ook!（or short Ook,由.?!组成）\n\n##### 解密\n\n使用PHP工具[Ook-masker][http://106.13.121.19/ook/]进行解密\n\n### 替换密码\n\n替换表保存明文和密文之间的关系\n\n隐藏明文但是不打乱顺序\n\n##### 摩斯密码\n\n认出（有时表现为包括但不限于01序列的密码，可以使用记事本进行转化）\n\n可以用Bugku的[在线工具][tool.bugku.com/mosi/]进行解密\n\n或者本地工具`CTFCrackTools`\n\n##### 摩斯密码解密代码\n\n```py\ntxt = input().strip().split\n#用空格分开\nkey = {\t'01': 'A','1000': 'B','1010': 'C','100':'D',\n        '0':'E','0010':'F','110': 'G','0000': 'H','00': 'I',\n        '0111':'J','101': 'K','0100': 'L','11': 'M','10': 'N',\n        '111': 'O','0110': 'P','1101': 'Q','010': 'R','000': 'S',\n        '1': 'T','001': 'U','0001': 'V','011': 'W','1001': 'X',\n        '1011': 'Y','1100': 'Z','01111': '1','00111': '2',\n        '00011': '3','00001': '4','00000': '5','10000': '6',\n        '11000': '7','11100': '8','11110': '9','11111': '0',\n      \t'001100':'?','10010':'/','101101':'()','100001':'-',\n       \t'010101':'.','110011':',','011010':'@','111000':':',\n       \t'101010':':','10001':'=','011110':\"'\",'101011':'!',\n       \t'001101':'!','001101':'_','010010':'\"','10110':'(',\n       \t'1111011':'{','111101':'}'}\nfor i in txt:\n    print(key.get(i),end=' ')\n    \n#txt = \n#table = ''.maketrans('.-','01')\n#txt.translate(table)\n```\n\n##### 凯撒密码\n\n只有25种可能的密钥（大小写不变），当年凯撒用的密钥是3\n\n解码：`CTFCrackTools`或者自行编写脚本\n\n加密：(x+k)%26 解密：(y-k)%26 （0~25来表示a~z）\n\n##### 凯撒密码解密代码\n\n```py\ntxt = input()\nfor i in range(1,26):\n    plain = ''\n    for j in txt:\n        if j.islower():\n            plain = plain + chr(97+(ord(j)-i-97)%26)\n        elif j.isupper():\n            plain = plain + chr(65+(ord(j)-i-65)%26)\n        else:\n            plain = plain + j\n    print(plain)\n```\n\n##### plus版本\n\n```py\ntxt = input('请输入密文： ').strip()\nn = input('是否需要推荐明文(Y/N)').strip()\nfor i in range(1,26):\n    plain = ''\n    for j in txt:\n        if j.islower():\n            plain = plain + chr(97+(ord(j)-i-97)%26)\n        elif j.isupper():\n            plain = plain + chr(65+(ord(j)-i-65)%26)\n        else:\n            plain = plain + j    \n    if n.lower() == 'y':\n        key = ('flag','ctf','key','the','is','no','for')\n        for m in key:\n            if m in plain:\n                print('recomanding: '+plain)\n                print()\n                break\n            elif n.lower() == 'n':\n                print(plain)\n                paint()\n```\n\n##### 凯撒密码的另外一种思路\n\n充分利用替换的方法\n\n```py\ntxt = input().strip()\nlower = 'abcdefghigklmnopqrstuvwxyz'\nupper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nfor i in range( 1 , 26 ):\n    xiao = lower[i:]+lower[:i]\n    da = upper[i:]+upper[:i]\n    plain = ''\n    table = ''.maketrans(xiao+da,lower+upper)\n    for j in txt:\n        plain = plain + j.translate(table)\n    print(plain)\n    print()\n```\n\n##### 一个很腻害的python库\n\n`pycipher` 包含大多数密码学工具\n\n```py\npycipher.Caesar(3).decipher('LORYHSBWKRQ')\n```\n\n##### ROT13密码\n\n凯撒密码的一种变体，移位数固定为13，即把明文中的每一个字母在字母表中向后移动13位，数字和非字母字符保持不变\n\n实现的是26个字母前半段和后半段相互交换（又叫回旋13，因为明文和密文可以相互转化）\n\n##### ROT13加密解密\n\nPHP中的str_rot13()函数可以实现\n\n```php\n<?\n    echo str_rot13('B');\n\techo str_rot13('O');\n?>\n```\n\n```php\n~# php -r \"echo str_rot13('heetian');\"\n```\n\n##### 凯撒密码的改进\n\n移位密码是在凯撒密码的基础上发展而来的，常用ASCLL码表进行移位\n\n```py\n#移位ASCLL凯撒\nfor i in txt:\n    flag = flag + chr(ord(i)+key)\n    key = key + 1\n```\n\n末尾两个重复字符：可能是先base64后的凯撒加密，重复字符是`==`\n\n```py\n#base64解码\nimport base64\nflag = ''\nbase64.b64decode(flag.encode())\n```\n\n##### 凯撒密码的再次改进\n\n凯撒密码密钥只有25种，后来出现了单字母替换密码，即一一映射\n\n密码空间的大小是 26！，大约4e26种密钥\n\n##### 词频分析法\n\n按照频率知道每个字母平均频率\n\n对于单表替换密码的破解，标志着密码分析学的诞生\n\nCTF题中，对于一串特别长的密文，可能通过词频分析的方法进行解题\n\n##### 解码\n\n[在线解码](https://quipqiup.com)\n\n本地工具：WinDecrypto（专门进行词频分析的软件）\n\n##### 培根密码\n\n密文只有a和b，每个明文由五个a和b组成长度为5的字符串\n\n[bugku在线解码](https://tool.bugku.com/peigen/)\n\n常规密码表只有24个：i,j 、 u,v 对应的加密后的字符串相同\n\n培根密码最大的特点是隐蔽性比较强，例如大小写，加粗字体\n\n[功能强大的培根密码解密网站（不知道为什么用不了）](http://rumkin.com/tools/cipher/baconian.php)\n\n```py\n#提取大小写\nflag = ''\nfor i in a:\n    if i.isupper():\n        flag = flag +'A'\n    elif i.islower():\n        flag = flag +'B'   \n```\n\n```py\n#互换AB\ntable = ''.maketrans('AB','BA')\t\nflag.translate(table)\n```\n\n##### 解码代码\n\n```py\n#第一类培根密码\ntxt = input().lower()\na = [\"aaaaa\",\"aaaab\",\"aaaba\",\"aaabb\",\"aabaa\",\"aabab\",\"aaabba\",\"aaabbb\",\"abaaa\",\"abaab\",\"ababa\",\"ababb\",\"abbaa\",\"abbab\",\"abbba\",\"abbbbb\",\"baaaa\",\"baaab\",\"baaba\",\"baabb\",\"babaa\",\"babab\",\"babba\",\"babbb\",\"bbaaa\",\"bbaab\"]\nb = 'abcdefghijklmnopqrstuvwxyz'\n#[chr(i) for i in range(ord('a'),ord('z')+1)]\nkey = dict(zip(a,b))\n\nfor i in range(0,len(txt),5):\n    print(key.get(txt[i:i+5]))\n```\n\n```py\n#第二类培根密码\ntxt = input().lower()\na = [\"aaaaa\",\"aaaab\",\"aaaba\",\"aaabb\",\"aabaa\",\"aabab\",\"aaabba\",\"aaabbb\",\"abaaa\",\"abaab\",\"ababa\",\"ababb\",\"abbaa\",\"abbab\",\"abbba\",\"abbbbb\",\"baaaa\",\"baaab\",\"baaba\",\"baabb\",\"babaa\",\"babab\",\"babba\",\"babbb\"]\nb = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '(ij)', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', '(uv)', 'w', 'x', 'y', 'z']\ndirt = {i:j for i,j in zip(cipher,plain)}\nflag = ''\nfor i in range(0,len(txt),5):\n    flag = flag + dirt.get(a[i:i+5])\nprint(flag)\n```\n\n##### 仿射加密Affine\n\n1. 将26个英文字母用0~25表示\n\n2. 需要两个密钥，a和b，取值范围是[0,25]\n\n   要求a和26互质，即a的因数不包括2或13\n\n3. x为明文，y为密文\n\n   加密公式 = （ax+b) mod 26\n\n解码：使用乘法逆元\n\n假设用m表示a的乘法逆元，那么(a*m)mod 26 = 1\n\n可以写一个简单的枚举代码来求m\n\n```py\n#枚举乘法逆元\nm = 1\nwhile True:\n    if a*m%26 == 1:\n        print(m)\n        break\n    m = m + 1\n#逆向计算\nmi = input()\nfor i in mi:\n    print(chr(97+(ord(i)-97-b)*a%26),end='')\n#暴力破解\nfor i in mi:\n    for j in range(0,26):\n        if(a*j+7)%26 == ord(i)-97:\n            print(chr(97+j),end='')\n```\n\n ```py\n#利用pycipher库中的Affine类可以直接对仿射加密进行加解密\n#加密\npycipher.Affine(a,b).decipher('flag')\n#解密\npycipher.Affine(a,b).encipher('queue')\n ```\n\n##### 猪圈密码\n\n更多的是对应加密\n\n可以使用CTFCrackTools进行解密\n\n#### 单表替换的简单总结\n\n1. 明文和密文一一对应\n2. 空间足够小则采用暴力破解；密文足够长则使用词频分析法\n3. 密钥空间足够大，密文长度足够短的情况下，破解较为困难\n\n### 多表替换\n\n利用密钥的每一位分别加密每一位明文\n\n##### 维基利亚密码\n\n```py\ntxt = input()\npassword = input().lower()\nkey = [ord(i)-97 for i in password]*5\nflag = ''\nfor i in range(len(txt)):\n    if txt[i].islower():\n        flag = flag + chr(97+ord(txt[i])-97-key[i]%26)\n    elif txt[i].isupper():\n        flag = flag + chr(65+ord(txt[i])-65-key[i]%26)\nprint(flag)\n```\n\n```py\n#更优雅的写法\ntxt = input()\npassword = input().lower()\nkey = [ord(i)-97 for i in password]\nflag = ''\nfor i in range(len(txt)):\n    if txt[i].islower():\n        flag = flag + chr(97+ord((txt[i])-97-key[i%len(key)])%26)\n    elif txt[i].isupper():\n        flag = flag + chr(65+ord((txt[i])-65-key[i%len(key)])%26)\nprint(flag)\n```\n\n利用pycipher库进行解码\n\n```py\npycipher.Vigenere('密钥').encipher('密码')\npycipher.Vigenere('密钥').dncipher('明码')\n```\n\n##### 费纳姆密码（二战中曾使用过）\n\n明文^密钥=密文\n\n密文^密钥=明文\n\n解密时将密文七位一组，然后与密钥异或，再将结果转化为ASCLL即可（也可以直接一串二进制数）\n\n```py\n#把一串二进制数划分为七位一组\ntxt = input()\nmi = []\nfor i in range(0,len(txt),7):\n    mi.append(txt[i:i+7])\n```\n\n```py\nfor m,n in zip(mi,key):\n    print(chr(int(m,2)^ord(n)),end='') \n```\n\n##### 杰斐逊转轮加密(tagged)\n\n36片同样大小的木质转轮，套在一根铁杆上，每个轮子有乱序26英文字母\n\n ```py\nfor m,n in zip(mi,key):\n    flag.append(txt[m-1][txt[m-1].index(n):] + txt[m-1][:txt[m-1].index(n)])\n ```\n\n### 置换密码\n\n明文不变，打乱排列顺序\n\n##### 栅栏密码\n\n总共n个字符，分为m（n的因数）组，依次取出各组的第一、二······个字母\n\n加密解密方法是可逆的，要求是两个因数之积为n\n\n在线解密：bugku在线工具\n\n本地解密：CTFCrackTools\n\n```py\n#寻找因数\ntxt = input()\nkey = []\nfor i in rnage(2,len(txt)):\n    if len(txt) % i == 0:\n        key.append(i)\n```\n\n```py\n#解密代码\nfor m in range(0,key):\n    for n in range(m,len(txt),key):\n        print(txt[n],end='')\n```\n\n```py\ndef zhalan(txt,key):\n    for m in range(key):\n        for n in range(m,len(txt),key):\n            s = s + txt[n]\n    return s\nif __name__ == '__main__':\n    txt = input().strip()\n    key = []\n    for i in range(2,len(txt)):\n        if len(txt)%i == 0:\n            key.append(i)\n    for j in key:\n        flag = zhalan(txt,j)\n        print(f'{j}栏：{flag}')\n```\n\n```py\npychipher.Railfence(m).encipher('')\npychipher.Railfence(m).dncipher('')\n```\n\n```py\n#翻转字符串\ns = txt[::-1]\n```\n\n有可能出现题型，需要填充一定量的无关符号\n\n##### 列置换\n\n将明文填写在一个矩阵中，然后以预订的顺序按列读取得到密文\n\n列置换的密钥通常会以一个单词的形式给出\n\n如： nice  \t相当于4312\n\n按照每个字符在字母表中的前后排列来排列\n\n矩阵列数由密钥决定，列数=密钥长度\n\n```py\n#常规加密方法（不具备普遍性）\npycipher.ColTrans('key').encipher('').lower()\npycipher.ColTrans('key').decipher('').lower()\n```\n\n##### Polybius（波利比奥斯）密码\n\n又称棋盘密码\n\n把棋盘上的字符，对应到密码表上的坐标\n\n很简单也很灵活，用法可能比较混乱\n\n##### ADFGX密码\n\n波利比奥斯密码的升级版\n\n用ADFGX五个字母代替了12345五个数字\n\n```py\npycipher.ADFGX('密码表','密钥').encipher('明文')\npycipher.ADFGX('密码表','密钥').decipher('密文')\n#python默认自存密码表\n#help(pycipher.ADFGX)\npycipher.ADFGX('密码表',' ').decipher('密文')#不做列置换\n```\n\nADFGVX密码：六个字母表示6*6=36个字符\n\n\n\n---\n\n\n\n# BUU密码学刷题WP\n\n## 一眼就解密\n\n```\nbase64.b64decode(\"ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=\")\n```\n\nflag{THE_FLAG_OF_THIS_STRING}\n\n## MD5\n\nhttps://www.somd5.com/\n\nflag{admin1}\n\n## Url编码\n\nhttps://tool.ip138.com/urlencode/\n\nflag{and 1=1}\n\n## 看我回旋踢\n\n![](buuoj古典密码学wp\\image-20231030092802733.png)\n\nflag{5cd1004d-86a5-46d8-b720-beb5ba0417e1}\n\n## 摩丝\n\n![](buuoj古典密码学wp\\image-20231030101515467.png)\n\nflag{ILOVEYOU}\n\n## password\n\n根据字符数猜测：密码=姓名+出生年月日\n\nflag{zs19900315}\n\n## 变异凯撒\n\n移位凯撒\n\n```\ntxt = \"afZ_r9VYfScOeO_UL^RWUc\".strip()\nplain = ''\ncnt = 4\nfor i in txt:\n    cnt = cnt + 1\n    plain = plain + chr(ord(i)+cnt)\nprint(plain)\n```\n\nflag{Caesar_variation}\n\n## Quoted-printable\n\nQuoted-printable可译为“可打印字符引用编码”，编码常用在电子邮件中\n\n考虑用python的quopri库进行解密\n\n```\nquopri.decodestring('=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6')\n```\n\n得到一串UTF-8密文\n\n`'\\xe9\\x82\\xa3\\xe4\\xbd\\xa0\\xe4\\xb9\\x9f\\xe5\\xbe\\x88\\xe6\\xa3\\x92\\xe5\\x93\\xa6'`\n\n```\ns = '\\xe9\\x82\\xa3\\xe4\\xbd\\xa0\\xe4\\xb9\\x9f\\xe5\\xbe\\x88\\xe6\\xa3\\x92\\xe5\\x93\\xa6'\nss = s.encode('raw_unicode_escape')#此str转化为bytes\nprint(ss)\nsss = ss.decode()\nprint(sss)\n```\n\nflag{那你也很棒哦} \n\n## Rabbit\n\nRabbit加密\n\nAES、DES、RC4、Rabbit、Triple DES（3DES）这些算法都可以引入密钥\n\n密文特征与Base64类似，明显区别是秘文里+比较多，并且经常出现/\n\nhttp://www.jsons.cn/rabbitencrypt/\n\nflag{Cute_Rabbit}\n\n## 篱笆墙的影子\n\n栅栏密码，CTFCrackTool即可解码（python内置函数不好用）\n\n![](buuoj古典密码学wp\\image-20231030112247454.png)\n\nflag{wethinkwehavetheflag}\n\n## 丢失的MD5\n\n把报错的代码改对\n\n1. print语法错误\n2. `TypeError: can't concat str to bytes`，字符类型错误；哈希之前必须对Unicode对象进行编码，应当在\"update\"函数之中所有的所有参数进行可选参数编码，默认编码为'utf-8'\n\nflag{e9032994dabac08080091151380478a2}\n\n## Alice与Bob\n\n使用在线工具分解质数\n\nhttps://zh.numberempire.com/numberfactorizer.php\n\n进行MD5加密\n\nhttps://md5jiami.bmcx.com/\n\nflag{d450209323a847c8d01c6be47c81811a}\n\n## 大帝的密码武器\n\n![](buuoj古典密码学wp\\image-20231030195452991.png)\n\n偏移量是13\n\n![](buuoj古典密码学wp\\image-20231030195913950.png)\n\n记得改对大小写\n\nflag{PbzrPuvan}\n\n## Windows系统密码\n\n使用在线工具，解码第二行第三组数据（为什么这个数据？因为第二行在admin下面，而前面那个数字解不出来）\n\n![](buuoj古典密码学wp\\image-20231030200253314.png)\n\nflag{good-luck}\n\n## 信息化时代的步伐\n\n中文电码（misc题）\n\nhttp://code.mcdvisa.com/\n\nflag{计算机要从娃娃抓起}\n\n## 凯撒？替换？呵呵!\n\n试一试凯撒密码，发现不对\n\n猜测是替换密码，选择传统的字典爆破思路\n\n![](buuoj古典密码学wp\\image-20231031081349400.png)\n\n去掉空格，改成小写即可\n\n![](buuoj古典密码学wp\\image-20231031081518526.png)\n\n## 萌萌哒的八戒\n\n猪圈密码http://mmoersima.00cha.net/zhuquan.asp\n\n![](buuoj古典密码学wp\\image-20231030170925341.png)\n\nflag{whenthepigwanttoeat} \n\n## 传统知识+古典密码\n\n![](buuoj古典密码学wp\\image-20231031084921033.png)\n\n根据所给条件一一映射，再都加60，转成ASCLL码\n\n![](buuoj古典密码学wp\\image-20231031085841782.png)\n\n之后是栅栏+凯撒，胡乱操作一番就可以找到一个像flag一样的东西\n\n![](buuoj古典密码学wp\\image-20231031085915520.png)\n\n![](buuoj古典密码学wp\\image-20231031085954428.png)\n\nflag{SHUANGYU}\n\n## 权限获得第一步\n\n上面有原题，一模一样\n\n![](buuoj古典密码学wp\\image-20231031090257071.png)\n\nflag{3617656}\n\n## 世上无难事\n\n词频分析即可得到flag，记得改小写\n\nflag{640e11012805f211b0ab24ff02a1ed09}\n\n## old-fashion\n\n如上题，需要将模式改为`Genetic,trust spaces`\n\nflag{n1_2hen-d3_hu1-mi-ma_a}\n\n## Unencode\n\n在线解码网站http://www.hiencode.com/uu.html\n\n类似于base64，只是后来被取代了\n\nflag{dsdasdsa99877LLLKK}\n\n## [AFCTF2018]Morse\n\n使用工具进行解码\n\n![](buuoj古典密码学wp\\image-20231030183414451.png)\n\n观察得到这一串最大是F，猜测是base16\n\n![](buuoj古典密码学wp\\image-20231030183555161.png)\n\nflag{1s't_s0_345y}\n\n## 还原大师\n\n总共三个未知量，26^3个可能性，穷举所有可能即可\n\nmd5加密：`y = hashlib.md5(x.encode('utf-8')).hexdigest().upper()`\n\n```\nimport hashlib\n\nm = 'TASC?O3RJMV?WDJKX?ZM'\n\nfor i in range(26):\n    t1 = m.replace('?',str(chr(65+i)),1)\n    for j in range(26):\n        t2 = t1.replace('?',str(chr(65+j)),1)\n        for k in range(26):\n            t3 = t2.replace('?',str(chr(65+k)),1)\n            s = hashlib.md5(t3.encode('utf-8')).hexdigest().upper()\n            if s[:4] == 'E903':\n                print(s)\n```\n\nflag{E9032994DABAC08080091151380478A2}\n\n## 异性相吸\n\n```\nkey = open(\"key.txt\", 'rb').read()\ncipher = open(\"密文.txt\", \"rb\").read()\n\nflag = []\nresult = \"\"\nfor i in range(len(key)):\n    flag.append(key[i] ^ cipher[i])\n    result += chr(flag[i])\nprint(flag)\nprint(result)\n```\n\nflag{ea1bc0988992276b7f95b54a7435e89e}\n\n## [GXYCTF2019]CheckIn\n\n![](buuoj古典密码学wp\\image-20231031185645418.png)\nROT5、ROT13、ROT18、ROT47 编码是一种简单的码元位置顺序替换暗码；此类编码具有可逆性，可以自我解密，主要用于应对快速浏览，或者是机器的读取，而不让其理解其意。\n\nrot5只用于数字的替换，将当前数字往后移5位，范围是0~9\n\n明文:  123456\n密文:  678901\n\nrot13只能用于字母的替换，将当前字母往后移13个位置(不改变字母大小写)，范围为a-z或者A-Z\n\n明文：abcdefghijklmnopqrstuvwxyz\n密文：nopqrstuvwxyzabcdefghijklm\n明文：ABCDEFGHIJKLMNOPQRSTUVWXYZ\n密文：NOPQRSTUVWXYZABCDEFGHIJKLM\n\nrot18就是13+5的合成，加密方法是rot5+rot13，对数字进行rot5加密，对字母进行rot13加密\n\n明文：123456abcdefgHIJKLMN\n密文：678901nopqrstUVWXYZA\n\nrot47将每位数字/字母的ASCII值往**前**移动47位，比如\"Z\"对应的ASCII值是90，则90-47=43，对应是\"+\"\n\n明文：ilo1ey0u\n密文：:=@`6J_F\n范围是可打印的字符，ASCII值为32-126\n\nROT47在线解码工具https://www.jisuan.mobi/YYA.html\n\nflag{Y0u_kNow_much_about_Rot}\n\n## Cipher\n\nplayfair密码，需要 `j -> i`\n\n在线解密网站\n\nhttps://rumkin.com/tools/cipher/playfair/\n\nhttp://www.hiencode.com/playfair.html\n\n![image-20231101090456313](C:\\Users\\coper\\AppData\\Roaming\\Typora\\typora-user-images\\image-20231101090456313.png)\n\nflag{itisnotaproblemhavefun}\n\n\n\n### 2024.1.8 星期一\n\n### [BUUCTF]yxx\n\n![](buuoj古典密码学wp\\image-20240108103412640.png)\n\n---\n\n给了两个文件，用二进制打开\n\n粘下来进行二进制异或即可得到flag\n\n```\ncipher = \"\" ; plain = \"\" ; flag = \"\"\nt = \"0A 03 17 02 56 01 15 11 0A 14 0E 0A 1E 30 0E 0A 1E 30 0E 0A 1E 30 14 0C 19 0D 1F 10 0E 06 03 18\".split()\nfor i in t:\n    cipher = cipher + str(bin(int( i , 16 )))[2::].zfill(8)\nt = \"6C 6F 76 65 6C 6F 76 65 6C 6F 76 65 6C 6F 76 65 6C 6F 76 65 6C 6F 76 65 6C 6F 76 65 6C 6F 76 65\".split()\nfor i in t:\n    plain = plain + str(bin(int( i , 16 )))[2::].zfill(8)\nfor i in range(len( cipher )):\n    if cipher[i] == plain[i]:\n        flag = flag + \"0\"\n    else:\n        flag = flag + \"1\"\nprint( flag )\nfor i in range( 0 , len(flag) , 8 ):\n    t = \"\"\n    for j in range( i , i + 8 ):\n        t = t + str( flag[j] )\n    print( hex( int(t,2) )[2::] , end=\"\" )\n```\n\nflag:`flag{xor_xor_xor_biubiubiu}`\n\n### 2024.1.9 星期二\n\n### [CTFshow元旦水友赛]麻辣兔头又一锅\n\n```\n听说有人不喜欢短尾巴的兔兔？肿么可能？我也很疑惑呢。\n126292,165298,124522,116716,23623,21538,72802,90966,193480,77695,98618,127096,15893,65821,58966,163254,179952,134870,45821,21712,68316,87720,156070,16323,86266,148522,93678,110618,110445,136381,92706,129732,22416,177638,110110,4324,180608,3820,67750,134150,23116,116772,50573,149156,5292\n60144,146332,165671,109800,176885,65766,76908,147004,135068,182821,123107,77538,86482,88096,101725,16475,158935,123018,42322,144694,186769,176935,59296,134856,65813,131931,144283,95814,102191,185706,55744,67711,149076,108054,135112,100344,35434,121479,14506,145222,183989,17548,38904,27832,105943\n```\n\n---\n\n“兔子”并不一定是栅栏密码，还有可能是`斐波那契数列`\n\n```\nimport gmpy2 \na = \"126292,165298,124522,116716,23623,21538,72802,90966,193480,77695,98618,127096,15893,65821,58966,163254,179952,134870,45821,21712,68316,87720,156070,16323,86266,148522,93678,110618,110445,136381,92706,129732,22416,177638,110110,4324,180608,3820,67750,134150,23116,116772,50573,149156,5292\".split(\",\")\nb = \"60144,146332,165671,109800,176885,65766,76908,147004,135068,182821,123107,77538,86482,88096,101725,16475,158935,123018,42322,144694,186769,176935,59296,134856,65813,131931,144283,95814,102191,185706,55744,67711,149076,108054,135112,100344,35434,121479,14506,145222,183989,17548,38904,27832,105943\".split(\",\")\nfor i in range( len( a ) ):\n    print(chr((gmpy2.fib(eval(a[i]))^gmpy2.fib(eval(b[i])))&0xff),end='' )\n```\n\n我们需要计算出两行的斐波那契数然后异或，使用python的gmpy2.fib即可计算斐波那契数列的任意位\n\nflag:`ctfshow{6d83b2f1-1241-4b25-9c1c-0a4c218f6c5f}`\n\n问题：这道题是如何构造的\n\n全体正整数n和fib(n)构成单射，而非一一映射，出题人是如何构造的，是否可以根据指定的flag来构造密文\n\n猜想：由于最终对Oxff进行与运算，故只需要考虑16进制下的最后两位；总共有255，如果是直接进行与运算，最劣情况下进行不超过65536次运算即可得到一个字母对应的斐波那契数；其序数可以进行暴力运算进行逆推；或者构造一组“最小剩余系”来表示所有需要的数，容量为256，进行组合即可\n\n反驳：对于所有的已知数据，没有一个是重复的\n\n回答：可以不是随机，每256个数就存在一个数符合预期要求；也不需要有重复的数字，python对于斐波那契数列的算力很强；故由一个flag，可以随机出一个a序列，然后暴力计算出b序列\n\n### 2024.1.10 星期三\n\n### [BUUCTF·网鼎杯2020青龙组]boom\n\n获得到一个exe文件\n\n一\n\n```\nfirst:this string md5:46e5efe6165a5afb361217446a2dbd01\n```\n\n二\n\n```\nThis time:Here are have some formulas\n3x-y+z=185\n2x+3y-z=321\nx+y+z=173\ninput: x =\n```\n\n三\n\n```\nLast time: Kill it\nx*x+x-7943722218936282=0\ninput x:\n```\n\n---\n\n使用cmd打开\n\n一\n\n使用https://www.somd5.com/解密得到`en5oy`\n\n二\n\n可以使用高斯消元法https://www.luogu.com.cn/problem/P3389\n\n```\n//2021-11-13\n#include <iostream>\n#include <cstdlib>\n#include <cstdio>\n#include <cmath>\n\nusing namespace std;\n\nconst int N = 105;\ndouble a[N][N];\nint n;\n\nint main(){\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; i ++)\n\t\tfor(int j = 1; j <= n + 1; j ++)\n\t\t\tscanf(\"%lf\", &a[i][j]);\n\tfor(int i = 1; i <= n; i ++){\n\t\tint maxx = i;\n\t\tfor(int j = i + 1; j <= n; j ++)\n\t\t\tif( fabs(a[j][i]) > fabs(a[maxx][i] ) )\n\t\t\t\tmaxx = j;\n\t\tfor(int j = 1; j <= n + 1; j ++)\n\t\t\tswap( a[i][j], a[maxx][j] );\n\t\tif( !a[i][i] ){\n\t\t\tcout << \"No Solution\" << endl;\n\t\t\treturn 0;\n\t\t}\n\t\tfor(int j = 1; j <= n; j ++)\n\t\t\tif(j != i){\n\t\t\t\tdouble temp = a[j][i] / a[i][i];\n\t\t\t\tfor( int k = i + 1; k <= n + 1; ++k)\n\t\t\t\t\ta[j][k] -= a[i][k] * temp;\n\t\t\t}\n\t}\n\tfor(int i = 1; i <= n; i ++)\n\t\tprintf(\"%.2lf\\n\", a[i][n + 1] / a[i][i]);\n\treturn 0;\n}\n/*\n3\n3 -1 1 185\n2 3 -1 321\n1 1 1 173\n*/\n```\n\n也可以使用python自带库\n\n```\nfrom sympy import*\nfrom sympy.abc import x,y,z\n\nans = solve([3*x-y+z-185,2*x+3*y-z-321,x+y+z-173],[x,y,z])\nprint( ans )\n```\n\n解得：`x = 74, y = 68, z = 31`\n\n三\n\n一元二次方程，可以用同样的方式去解\n\n```\nfrom sympy import*\nfrom sympy.abc import x\n\nans = solve([x*x+x-7943722218936282],[x])\nprint( ans )\n```\n\n解得：`x1 = 89127561 , x2 = -89127562`\n\nflag:`flag{en5oy_746831_89127561}`\n\n### isctf2023夹里夹气\n\n观察发现是摩斯密码，将`ISCTF`摩斯密码加密得到`.-`串，发现原字符串，两个一组是`.`，三个一组是`-`\n\n自行增加`?`并替换，进行莫斯解密即可\n\n```\nprint( s.replace(\"嘤嘤嘤\",\"-\").replace(\"嘤嘤？\",\".\") )\n```\n\nISCTF{HSBDH_SFJ_JDNFJ_DJNFJDM}\n\n### 2024.1.19 星期五\n\n### [BUUCTF·ACTF新生赛2020]crypto-classic0\n\n有点像misc，是一个文件\n\n---\n\n提示密码是生日，直接八位数字爆破，得到`19990306`\n\n直接解密即可\n\n```\ntxt = \"Ygvdmq[lYate[elghqvakl}\"\nflag = \"\"\n\nfor i in txt:\n    flag = flag + str(chr( (ord(i) ^ 0x7) + 3) )\nprint( flag )\n```\n\nflag:`flag{my_naive_encrytion}`\n\n### 2024.1.20 星期六\n\n### [BUUCTF·WUSTCTF2020]B@se\n\n```\n密文：MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD==\nJASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/\n\noh holy shit, something is missing...\n```\n\n---\n\n查找缺失的密码表\n\n```\nimport string\ntable = \"JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/\"\ncipher = \"MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD==\"\n\nfor i in string.ascii_letters+string.digits:\n    if i not in table:\n        print( i , end = \" \" )\n```\n\n`j u 3 4 `\n\n```\nfrom itertools import *\nfrom binascii import *\ntable = \"JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/\"\ncipher = \"MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD\"\ns = ['j','u','3','4']\nfor i in permutations( s , 4 ):\n    t = \"JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs\"+\"\".join(i)+\"kxyz012789+/\"\n    bins = \"\"\n    for j in cipher:\n      bins+=bin(t.index(j))[2:].zfill(6)\n    print(unhexlify(hex(eval(\"0b\"+bins))[2:-1]))\n```\n\nflag:`flag{base64_1s_v3ry_e@sy_and_fuN}`\n\n### 2024.1.5星期五\n\n### [BUUCTF·MRCTF2020]vigenere\n\n```\ng vjganxsymda ux ylt vtvjttajwsgt bl udfteyhfgt\noe btlc ckjwc qnxdta \nvbbwwrbrtlx su gnw nrshylwmpy cgwps, lum bipee ynecgy gk jaryz frs fzwjp, x puej jgbs udfteyhfgt, gnw sil uuej su zofi. sc okzfpu bl lmi uhzmwi, x nyc dsj bl lmi enyl ys argnj yh nrgsi. nba swi cbz ojprbsw fqdam mx. cdh nsai cb ygaigroysxn jnwwi lr msylte.\ncw mekr tg jptpzwi kdikjsqtaz, ftv pek oj pxxkdd xd ugnj scr, yg n esqxwxw nba onxw au ywipgkj fyiuujnxn gnss xwnz onxw jnahl avhwwxn vzkjpu nrofch fvwfoh. v jwhppek lmi vyutfp hbiafp hcguj at nxw gyxyjask ib hw seihxsqpn vtvjttajwsx ds zzj xnegfsmtf egz wtrq lt mbcukj sc hy. qty wnbw ss bbxsq vxtnl ys ghrw zw cbx vt cdh vgxwtfy ssc brzzthh bl wsjdeiwricg cw mekr zjzi grgktr ib lwfv.\nvbbwwrbrtlx hteonj xwroj oyhg vgbigf ljtq iuk utrhrtl tj iuk ytztetwi. cdh nsai crolmig fudngxgkv ssg ekujmkrj gzvh. jk vnh cbz aszxgk qty. nba vt rdg qfta jf, tgw hd lum prdj umw aderv. hcqrxkuerr jgjw cbz dni lvzznr nbaj gsgqkjx. hd aul ylxaq lmei lum hec oaaqh xg, gk yldhmz nx lrxw f tjorah gdaylwyrgogs tgbpwhx. nba ufrcbz. ay mh nt shx ds tsyygr gfi mi txgbw xgywqj iuxgzkw baj hsaykuymkr guymday.\nqty wnbw ssi rtyfktq of tyg txwfx paj yfxwrxask rbtnjvhnzatr, cbx vnh nba uwipgk lmi lrgdyl ds umw qpeqwytaniwx. cdh jg ssi xtgb sje imqxjek, gzv tgnahw, de zzj ycjxayxta igiih gnsy eaeksic eeunnht baj xsrvkld qdek gwhte zzfr rbadi ft bhlfmcrj td ecl ux dsje oeushvzatrh.\nlum hppvs lmigr gjj tgbhdjqh nsgsk jf zzfx nba fjis gu ktpkr. egz yhr zznw rygar eh nt wcgjfk lt mcigvj sje vjjgxailx. qpae gk xwryw uvdorwrw sbt'l jbxfz. omigr zzjvt nxw wipy igsjavilx, awrxw yltek swi leuflw, lr caqp xqkfymul zzjq paj sihgryk yltz hq tyg zkssw. lr gjj jdesask dhx gbr hbiafp rbtlwerg. zznw vbbwwrpaiw bmay gjnwt niutvsvty ys iuk utrsvzatrh bl gzv lbxdi, rdg egzvh. baj bsgyj ax hxslwwicg.\niqgigfvshi rbtknwif ux yvpayshxxbtk, wianzatrhuohx, ecq zztyvuz aywtyl, swvplkv qmzr g kyecqofl apik as xwr cwg su baj hsbzafngpgogsw. dhxk nw p jujqh iugl nw qbzz jzteeomigr gfi rdjnwwi, qhz ay mh aul bltek tthxry dnzt.\njk swi reksymct g otvaq zzfx pyr efc tazww axgngzx eeonnpttk gw tgrpmimrr guhsgqkv gc gniw, jgdaueng ebcww, qxyolfvn sujhi, de ylfxxbt gk fxezz.\nbi pek uwipgofl e lbxdi awrxw frnbtw, frnjnwwi bne wctgryk mmh bx zjv qrrajjh, au efxirx zta hvtyzppe, cayldhz xjeg bl tjmct igjvrrj asxd fodjrrr uj hscsujrmil.\negzv armsq gdaiwuxh bl hwserxld, imcxwxwxbt, aiicgold, qdikejri, ntv hscgkpy hd aul fteye lt yh. gnwd egr gdq fpfkv tr bnzljv, paj lmigr ok ss bnzljv wrxw.\ntyg vjwsxxgowx lpik ft fdqowx, wd, htdnot lum, bi rntftx dozsnr dejww fn cnqxmrnr utigpogs. at okdnikr zzfx ueue jxwvik, jravmzyicrj kjpu-vtljvtfz, ssh iuk utqbbtojea, baj lskrxffrrr caqp tzkjli. dhx aiicgolnih zgq gi svylwmqhzwi ereukx qpae gk cdhx bzvxfjahxxbtk. ylt btdd ppj zzfx pyr gzv rbtkymihkfy gjyzmwih jumqh vrtwweaye jjgdttaei xf zzj kdyjws vjyk. oj ldck oj axyr tj eqyk lt fjvrv tyg cgjymrhrsw wdyalnscf uf ylpg hsxmh. oal bi rntftx ppiwux iuk ktpjgogsw nba swi pgzwrtivty ys xzvgxi.\nxa zzj ycvzwi winzwx, cdh nsai ibjsd ggrgljh p ygo, ylt gkdjgdzsmsmrnzatrh ekxtvb nil, blxpn jjtjqosyih lumw sla igswivzmymda gfi mcfadyw iuk vwipzy gk ntslwwwda, csxlxamltr, bvrd, resvygs, htguizikvrdj, ecq hjfrsrok. yltfk vwipzy ezwi auo gi qbxf frtj of zw.\nnba swi irxjnjxrj gk cdhx gbr ruodivta, yasgt gnwd egr tsymkry as e lbxdi awrxw dsj jodq eajgqx ft vsenkgntlx. ftpgmxi nba xjeg gnwr, cdh kfyvjfz qtyg oajjejpxshmtf cayl iuk hfvtazsq vtfvgswxoodnxxry qty pek lts rbcswhal zg hscsxgsx nbajxiaikk. nr dhx otvaq, gdq xwr ywsxxzkfyw paj wctgryknscf ux mybntayc, ueue ylt qktfwxam lt xwr gfliavi, swi enxlx su n ywfqaryk bldyk, lmi vyutfp rbtnjvhnzatr ds hayw. lr issrdg ywuegnzw ylt noj ylpg iztotf ljtq iuk snv jcuf blxpn onrvf hwfx.\nxa iznrp, tkjrecl, ljfrrr, xmxwxn, yaskpcujj, minrq frs gnw zrxgkv xxpgkk, dsj nxw yvnvty ys lnxv tju gnw amghy gk pxokjyc ql kjjgivty lypej htwif gl ylt sxgsxxrxk tj rlhwwweniw. yltfk efc zrkh tyi gnw hscggynsc suj f wbnrd ymbr, hmy xwre onpa aul bsgx of f aderv ylpg caqp hbuf gi qygfpiirj as fxg-hwfvxam ejhxn.\negzv xaijjehvtyqc doygqiir ofksgzglnsc vtvzwieowx adhrv uigcklzeir zzjqhrrnjw ql vjttdfofl ppjy, as ebrxahe paj wqwtjnwwi, iugl hppvs lt sla yhjiru olxias zzwsjtngzx iuk otvaq. zzjwt ygox adhrv iirygjj msrgk ys qr gftxwrx ashjfzjnea cxgiyrg, tg rsgr tggpt gnss txt ojtr. xa umw aderv, blpgknjv iuk zzqpa sash bne uwipgk ufr qr xwuvdqaujh paj vnwieotzxtq ofkmcvzwqc pg tg hshg. zzj kabhsq gdabwdecpk gk xwbaymx cb rgskte xwvyxekk dsje lshxdeowx xd niutqeyokm.\nxwryw nrreksxmctrq mshgodj ecq igqscvgd ripfajjw eyguj yh vt lmi hnsw ushvzatr pf zztwt cxwamdhy dtztey gk jgrkvtq paj kjpu-qkljvbvtsymda czt lpq zg wiyril ylt nalmsgvzajw ds jaxxpaz, msmcsujris cuojvh. jk ezwi qkuqegr umw zxezmfp hrrnjw xzsmsi ib egzv hbbwwixttld, ikrt sx at pufymchk lt gdaywsx ib egzv ghrw tzte umw fdqowx. at jodq weeksi sjeywqztf guwshf zzj tantwy wd gnsy rd btw hec nxjjwi baj yldhmzyw.\nlr caqp reksyi p ponnpxmglnsc bl lmi bvtv nr rlhwwweniw. ren vz tj qdek zzqpak ssh unoj ylpa zzj aderv dsje mgaigaswsxh ugnj qpqk tjjdek.\nxqev vy ewgis balicrxw hvnczg hvppq efr, eyksxi pqj mshteyutvt ntv hygye twerry.\n```\n\n```\n#!/bin/python3\nfrom ctf import source_text, key_string\n\ngetdiff = lambda char: ord(char)-ord('a')\ngetchar = lambda num: chr(ord('a')+num)\n\ndef vigenere(src: chr, key: chr) -> chr:\n    assert(src.isalpha() and key.isalpha())\n    return(getchar((getdiff(src) + getdiff(key) + 1) % 26))\n\nsrc = source_text.lower()\ncount = 0\nassert(len(key_string) > 5 and len(key_string) < 10)\nfor i in src:\n    if(i.isalpha()):\n        print(vigenere(i, key_string[count % len(key_string)]), end='')\n        count+=1\n    else:\n        print(i, end='')\n```\n\n对于这段加密代码，这是gpt给出的解释\n\n![](buuoj古典密码学wp\\image-20240105084101201.png)\n\n对于网络上的wp，一般是给出这个在线网站进行破解（还挺快）https://www.guballa.de/vigenere-solver\n\n![](buuoj古典密码学wp\\image-20240105084330499.png)\n\nflag:`flag{vigenere_crypto_crack_man}`\n\n### [BUUCTF·MRCTF2020]keyboard\n\n```\n得到的flag用\nMRCTF{xxxxxx}形式上叫\n都为小写字母\n\n6\n666\n22\n444\n555\n33\n7\n44\n666\n66\n3\n```\n\n通过九键键盘加密\n\n![](buuoj古典密码学wp\\image-20240105092700375.png)\n\n可以直接手搓，搓出`mobilephond`\n\n提交发现不对，调用英语知识把d改成e就对了\n\n对于大量数据的解码脚本：\n\n```\ntxt = '6 666 22 444 555 33 7 44 666 66 3'.split()\njiujian = ['','','abc','def','ghi','jkl','mno','pqrs','tuv','wxyz']\nfor i in txt:\n    print(jiujian[int(i[0])][len(i)-1],end='')\n```\n\nflag:`flag{mobilephone}`\n\n### [BUUCTF·AFCTF2018]Vigenère\n\n![](buuoj古典密码学wp\\image-20240105144839575.png)\n\n![image-20240105145056831](C:\\Users\\coper\\AppData\\Roaming\\Typora\\typora-user-images\\image-20240105145056831.png)\n\n又是未知密钥的维吉尼亚密码，在线网站一把唆https://www.guballa.de/vigenere-solver\n\n![](buuoj古典密码学wp\\image-20240105145226418.png)\n\nflag:`flag{Whooooooo_U_Gotcha!}`\n\n## 密码学的心声\n\n1. 数字三位一组分组，形成多组八进制数\n2. 转成十进制，也是三个数一组\n3. 每组转化为相应的ASCLL码\n\n```\nstr = '111 114 157 166 145 123 145 143 165 162 151 164 171 126 145 162 171 115 165 143 150'\nstr = str.split(' ')\nflag = []\nfor i in range(len(str)):\n    flag.append( str[i] )\nresult = ''\nfor i in flag:\n    result += chr(int(i,8))\nprint( result )\n```\n\nflag{ILoveSecurityVeryMuch}\n\n## robomunication\n\n是一段音频，摩斯密码，转码后即可得到flag\n\nflag{BOOPBEEP}\n\n## [BJDCTF2020]这是base??(undone)\n\n前置知识：base64\n\n## 达芬奇密码(undone)\n\n## [WUSTCTF2020]佛说：只能四天\n\nhttp://hi.pcmoe.net/buddha.html\n\n![](buuoj古典密码学wp\\image-20231107144309827.png)\n\nhttps://atool.vip/corevalue/\n\n![](buuoj古典密码学wp\\image-20231107144340292.png)\n\n![](buuoj古典密码学wp\\image-20231107144405119.png)\n\n传统的凯撒密码偏移量是3\n\n![](buuoj古典密码学wp\\image-20231107150248459.png)\n\nbase32由A~Z，2~7组成（还有\"=\"）\n\n![](buuoj古典密码学wp\\image-20231107150412903.png)\n\n```\nimport base64\ndef caesarCrack(c, n):\n    alpha = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    c = c.upper()\n    m = \"\"\n    for i in c:\n        index = alpha.find(i)\n        if index != -1:\n            index = (index + n) % 26\n            m += alpha[index]\n        else:\n            m += i\n    return m\nif __name__ == '__main__':\n    c = \"R5UALCUVJDCGD63RQISZTBOSO54JVBORP5SAT2OEQCWY6CGEO53Z67L\"\n    # 用'='填充字符串使其长度为8的倍数, 方便后序进行Base32解密\n    lenPadding = 8 - (len(c) % 8)\n    c += lenPadding * \"=\"\n    for i in range(1, 26):\n        ca = caesarCrack(c, i)\n        m = base64.b32decode(ca)\n        try:\n            m = m.decode()\n            print(m)\n        except UnicodeDecodeError:\n            continue\n```\n\n\n\nflag{ni_hao_xiang_xiang_da_wo}\n\n## [MRCTF2020]古典密码知多少\n\n猪圈密码+圣堂武士密码+标准银河字母密码\n\n然后根据提示，使用栅栏密码\n\nflag{CRYPTOFUN}\n\n## rot\n\n![](buuoj古典密码学wp\\image-20231108090104867.png)\n\n需要暴力枚举后四位，根据md5判断正误\n\n```\nimport hashlib\ntxt = 'flag{www_shiyanbar_com_is_very_good_'\nmd5 = '38e4c352809e150186920aac37190cbc'\nfor i in range(33,128):\n    for j in range(33,128):\n        for k in range(33,128):\n            for o in range(33,128):\n                flag = txt+chr(i)+chr(j)+chr(k)+chr(o)+'}'\n                hsh = hashlib.md5(flag.encode()).hexdigest()\n                if( hsh == md5 ):\n                    print( flag )\n```\n\nflag{www_shiyanbar_com_is_very_good_@8Mu}\n\n## 这是什么\n\n这是什么？这不是雪豹，这是jsfuck密码\n\n拖到010editor中，得到一串这样的符号，使用https://www.bugku.com/tools/jsfuck/#解码\n\n![](buuoj古典密码学wp\\image-20231108095153414.png)\n\n\n\nflag{a0448fd730b62c13ca80200c4529daa2}\n\n## [NCTF2019]Keyboard\n\n电脑键盘第一行的从W到O八个字母 -> 手机九键输入法的八个字母\n\n出现频率表示第几个\n\nflag{youaresosmartthatthisisjustapieceofcake}\n\n## [MRCTF2020]天干地支+甲子\n\n![](buuoj古典密码学wp\\c683c9393fe4ab9629d651cdc6f0828a.png)\n\n一甲子=60\n\n将每个干支转化成对应的数字，再+60，转化成ASCLL码即可\n\nflag{Goodjob}\n\n## 传感器\n\n16进制转字符串即可\n\n![](buuoj古典密码学wp\\image-20231108110850581.png)\n\nflag{We1c0me_t4_BJDCTF}\n\n## 一张谍报\n\n有两段长度相同的文段，局部文字相同，二者不相同的内容形成多组映射，形成密码本\n\n依据此密码本对右下角密文进行解密即可\n\n```\nstr1 = \"今天上午，朝歌区梆子公司决定，在每天三更天不亮免费在各大小区门口设卡为全城提供二次震耳欲聋的敲更提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的符号是前进。为此，全区老人都蹲在该公司东边树丛合力抵制，不给公司人员放行，场面混乱。李罗鹰住进朝歌区五十年了，人称老鹰头，几年孙子李虎南刚从东北当猎户回来，每月还寄回来几块鼹鼠干。李罗鹰当年遇到的老婆是朝歌一枝花，所以李南虎是长得非常秀气的一个汉子。李罗鹰表示：无论梆子公司做的对错，反正不能打扰他孙子睡觉，子曰：‘睡觉乃人之常情’。梆子公司这是连菩萨睡觉都不放过啊。李南虎表示：梆子公司智商捉急，小心居民猴急跳墙！这三伏天都不给睡觉，这不扯淡么！到了中午人群仍未离散，更有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李南虎仍旧表示爷爷年纪大了，睡不好对身体不好。\"\nstr2 = \"喵天上午，汪歌区哞叽公司决定，在每天八哇天不全免费在各大小区门脑设卡为全城提供双次震耳欲聋的敲哇提醒，呼吁大家早睡早起，不要因为贪睡断送大好人生，时代的编号是前进。为此，全区眠人都足在该公司流边草丛合力抵制，不给公司人员放行，场面混乱。李罗鸟住进汪歌区五十年了，人称眠鸟顶，几年孙叽李熬值刚从流北当屁户回来，每月还寄回来几块报信干。李罗鸟当年遇到的眠婆是汪歌一枝花，所以李值熬是长得非常秀气的一个汉叽。李罗鸟表示：无论哞叽公司做的对错，反正不能打扰他孙叽睡觉，叽叶：‘睡觉乃人之常情’。哞叽公司这是连衣服睡觉都不放过啊。李值熬表示：哞叽公司智商捉急，小心居民猴急跳墙！这八伏天都不给睡觉，这不扯淡么！到了中午人群仍未离散，哇有人提议要烧掉这个公司，公司高层似乎恨不得找个洞钻进去。直到治安人员出现才疏散人群归家，但是李值熬仍旧表示爷爷年纪大了，睡不好对身体不好。\"\nstr3 = \"喵汪哞叽双哇顶，眠鸟足屁流脑，八哇报信断流脑全叽，眠鸟进北脑上草，八枝遇孙叽，孙叽对熬编叶：值天衣服放鸟捉猴顶。鸟对：北汪罗汉伏熬乱天门。合编放行，卡编扯呼。人离烧草，报信归洞，孙叽找爷爷。\"\nflag = \"\"\nfor i in range( len(str3) ):\n    for j in range( len(str2) ):\n        if str3[i] == str2[j]:\n            flag = flag + str1[j]\n            break\nprint( flag )\n```\n\n![](buuoj古典密码学wp\\image-20231108214853780.png)\n\nflag{南天菩萨放鹰捉猴头}\n\n## [NPUCTF2020]这是什么觅🐎\n\n得到一个无拓展名的文件，用010editor打开，发现有'jpg'，拓展名改成'jpg'，打开失败，疑似是压缩包，改成zip解压获得图片\n\n字母和数字确定一个数字，其中T1为TUE，T2为THU；S1为SAT，S2为SUN\n\n对应的数字：3 1 12 5 7/14 4 1 18\n\n对应的字母：C A L E G/N D A R\n\nflag{calendar}\n\n## [极客大挑战]proof_of_work\n\n题目链接：nc 59.110.20.54:5526 Build your own function to solve proof_of_work!\n\n```\nimport hashlib\n\ntxt = \"\"\ncnt = 0\n\nfor i in range( 32 , 127 ):\n    for j in range( 32 , 127 ):\n        for k in range( 32 , 127 ):\n            for o in range( 32 , 127 ):\n                txt = chr(i)+chr(j)+chr(k)+chr(o)+\"CwO1X7uNTpovKiWE\"\n                if hashlib.sha256(txt.encode('utf-8')).hexdigest() == \"c88bbfe56a7638ca6bf9428a5ce583d55a8376d1c77512518bd5a40d0600da26\":\n                    print(txt)\n                    assert 0\n                cnt += 1\n                if( cnt == 500000 ):\n                    print( txt , hashlib.sha256(txt.encode('utf-8')).hexdigest() )\n                    cnt = 0;\nprint(\"end\")\n```\n\n## \\[BUUCTF][BJDCTF2020]这是base??\n\nbase64原理：用64个可打印字符表示二进制所有数据方式。2^6=64，所以可以用每六个位元为一个单元，对应某个可打印字符。三个字节长度为24个位元，对应4个base64单元；即三个字节需要用四个base64可打印字符表示\n\n![](buuoj古典密码学wp\\Center.png)\n\n转换时每次取3byte的数据，放进24bite的缓冲区，先进为高位，数据不足24bite则用0补齐\n\n然后每次取6bit，按照对照表的编码输出，加密后的数据量是原来的4/3\n\n这道题相当于base64更换密码表，加密原理相同\n\ntxt.find('c') 在列表中找到'c'字符，返回下标\n\nb'010101'[2:].zfill('num') 从第三位开始取，返回长度为'num'的字符串，原字符串右对齐，前面填充0。（舍弃前2位，是因为二进制数前面有前缀'0b'）\n\n```\nc=\"JKLMNOxyUVzABCDEFGH789PQIabcdefghijklmWXYZ0123456RSTnopqrstuvw+/=\"\ntxt=\"FlZNfnF6Qol6e9w17WwQQoGYBQCgIkGTa9w3IQKw\"\n\nend=\"\"\nfor i in txt:\n    end+=bin(c.find(i))[2:].zfill(6)\n    \nx=\"\"\nfor i in range(0,len(end),8):\n    x+=chr(int(end[i:i+8],2))\nprint(x)\n```\n\nflag{D0_Y0u_kNoW_Th1s_b4se_map}\n\n## [BUUCTF]达芬奇密码\n\n观察发现数字列是一串打乱顺序的斐波那契数列\n\n生成一个正常顺序的斐波那契\n\n```\na = 1\nb = 1\nprint( \"1 1 \",end = '' )\nfor i in range( 1 , 40 ):\n    c = a + b\n    print( c , end = ' ' )\n    a = b\n    b = c\n```\n\n```\na = '0 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597 2584 4181 6765 10946 17711 28657 46368 75025 121393 196418 317811 514229 832040 1346269 2178309'\nb = '0 233 3 2584 1346269 144 5 196418 21 1597 610 377 10946 89 514229 987 8 55 6765 2178309 121393 317811 46368 4181 1 832040 2 28657 75025 34 13 17711'\na = a.split(\" \")\nb = b.split(\" \")\n\nflag = []\nm = '36968853882116725547342176952286'\n\nfor i in range( len(a) ):\n    for j in range( len(b) ):\n        if a[i] == b[j]:\n            flag.append(m[j])\n            break\nprint( ''.join(flag) )\n```\n\nflag{37995588256861228614165223347687}\n\n发现的细节：\n\n![](buuoj古典密码学wp\\image-20231117095517438.png)\n\n如果字符串最后有一个空格，split()操作后会多一个空格\n\n```\n\"\"\"requirment\na = []\na.append(1)\na.append(1)\nprint( \"1 1 \",end = '' )\nfor i in range( 3 , 30 ):\n    a.append( a[i-1] + a[i-2] )\n    print( a[i] , end = ' ' )\n\na = 1\nb = 1\nprint( \"1 1 \",end = '' )\nfor i in range( 1 , 40 ):\n    c = a + b\n    print( c , end = ' ' )\n    a = b\n    b = c\n#add_requirment:为什么要把第一位的1都改成0\n\"\"\"\n```\n\n### [AFCTF2018]Single\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\nint main()\n{\n\tfreopen(\"Plain.txt\",\"r\",stdin);\n\tfreopen(\"Cipher.txt\",\"w\",stdout);\n\tmap<char, char> f;\n\tint arr[26];\n\tfor(int i=0;i<26;++i){\n\t\tarr[i]=i;\n\t}\n\trandom_shuffle(arr,arr+26);\n\tfor(int i=0;i<26;++i){\n\t\tf['a'+i]='a'+arr[i];\n\t\tf['A'+i]='A'+arr[i];\n\t}\n\tchar ch;\n\twhile((ch=getchar())!=EOF){\n\t\tif(f.count(ch)){\n\t\t\tputchar(f[ch]);\n\t\t}else{\n\t\t\tputchar(ch);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n```\nJmqrida rva Lfmz (JRL) eu m uqajemf seny xl enlxdomrexn uajiderc jxoqarerexnu. Rvada mda rvdaa jxooxn rcqau xl JRLu: Paxqmdyc, Mrrmjs-Yalanja mny oekay.\n\nPaxqmdyc-urcfa JRLu vmu m jxiqfa xl giaurexnu (rmusu) en dmnza xl jmrazxdeau. Lxd akmoqfa, Wab, Lxdanuej, Jdcqrx, Benmdc xd uxoarvenz afua. Ramo jmn zmen uxoa qxenru lxd atadc uxftay rmus. Oxda qxenru lxd oxda jxoqfejmray rmusu iuimffc. Rva nakr rmus en jvmen jmn ba xqanay xnfc mlrad uxoa ramo uxfta qdatexiu rmus. Rvan rva zmoa reoa eu xtad uio xl qxenru uvxwu cxi m JRL wenad. Lmoxiu akmoqfa xl uijv JRL eu Yaljxn JRL gimfu.\n\nWaff, mrrmjs-yalanja eu mnxrvad enradaurenz seny xl jxoqarerexnu. Vada atadc ramo vmu xwn narwxds(xd xnfc xna vxur) werv tifnmdmbfa uadtejau. Cxid ramo vmu reoa lxd qmrjvenz cxid uadtejau mny yatafxqenz akqfxeru iuimffc. Ux, rvan xdzmnehadu jxnnajru qmdrejeqmnru xl jxoqarerexn mny rva wmdzmoa urmdru! Cxi uvxify qdxrajr xwn uadtejau lxd yalanja qxenru mny vmjs xqqxnanru lxd mrrmjs qxenru. Veurxdejmffc rveu eu m ledur rcqa xl JRLu, atadcbxyc snxwu mbxir YAL JXN JRL - uxoarvenz fesa m Wxdfy Jiq xl mff xrvad jxoqarerexnu.\n\nOekay jxoqarerexnu omc tmdc qxuuebfa lxdomru. Er omc ba uxoarvenz fesa wmdzmoa werv uqajemf reoa lxd rmus-bmuay afaoanru (a.z. IJUB eJRL).\n\nJRL zmoau xlran rxijv xn omnc xrvad muqajru xl enlxdomrexn uajiderc: jdcqrxzdmqvc, urazx, benmdc mnmfcueu, datadua anzanaadenz, oxbefa uajiderc mny xrvadu. Zxxy ramou zanadmffc vmta urdxnz useffu mny akqadeanja en mff rvaua euuiau.\n\nIuimffc, lfmz eu uxoa urdenz xl dmnyxo ymrm xd rakr en uxoa lxdomr. Akmoqfa mljrl{Xv_I_lxiny_er_neja_rDc}\n```\n\n---\n\n词频分析即可得到flag\n\n![](buuoj古典密码学wp\\image-20240127111855777.png)\n\nflag:`flag{Oh_U_found_it_nice_tRy}`\n\n### 鸡藕椒盐味\n\n```\n公司食堂最新出了一种小吃，叫鸡藕椒盐味汉堡，售价八块钱，为了促销，上面有一个验证码，输入后可以再换取一个汉堡。但是问题是每个验证码几乎都有错误,而且打印的时候倒了一下。小明买到了一个汉堡，准备还原验证码，因为一个吃不饱啊验证码如下：1100 1010 0000 ,而且打印的时候倒了一下。把答案哈希一下就可以提交了。(答案为正确值(不包括数字之间的空格)的32位md5值的小写形式) 注意：得到的 flag 请包上 flag{} 提交\n```\n\n---\n\n奇校验：所有位（包括数据位和校验位）共含1个数为奇数\n\n偶校验：所有位共含1个数为偶数\n\n奇偶校验码能发现奇数个错误\n\n海明校验码：校验位在 $2^n$ 的地方\n\n可以算出密文是`110110100000`\n\n进行md5加密得到答案\n\nflag:`flag{d14084c7ceca6359eaac6df3c234dd3b}`\n\n### [ACTF新生赛2020]crypto-classic1\n\n```\n哇，这里有压缩包的密码哦，于是我低下了头，看向了我的双手，试图从中找到某些规律\nxdfv ujko98 edft54 xdfv pok,.; wsdr43\n```\n\n```\nSRLU{LZPL_S_UASHKXUPD_NXYTFTJT}\n```\n\n---\n\n第一层是传统脑洞题，键盘密码的一种\n\ncircle\n\n第二层提示是维吉尼亚密码\n\n```\nc='SRLU{LZPL_S_UASHKXUPD_NXYTFTJT}'\nm='ACTF{'\na=[]\nfor i in range(4):\n    a.append(str(ord(c[i])-ord(m[i])))\nprint(m,end='')\nfor i in range(5,len(c)):\n    if 'A'<= c[i]<= 'Z':\n        print(chr((ord(c[i])-int(a[i%4])-ord('A'))%26+ord('A')),end='')\n    else:\n        print(c[i],end='')\n```\n\nflag:`flag{what_a_classical_vigenere}`\n\n### [AFCTF2018]BASE\n\n一个很大很大的文件\n\n---\n\n读取文件，进行base系列自动解密\n\n```\nimport re, base64\ns = open('flag_encode.txt', 'rb').read()\nbase16_dic = r'^[A-F0-9=]*$'\nbase32_dic = r'^[A-Z2-7=]*$'\nbase64_dic = r'^[A-Za-z0-9/+=]*$'\nn= 0\nwhile True:\n    n += 1\n    t = s.decode()\n    if '{' in t:\n        print(t)\n        break\n    elif re.match(base16_dic, t):\n        s = base64.b16decode(s)\n        print(str(n) + ' base16')\n    elif re.match(base32_dic, t):\n        s = base64.b32decode(s)\n        print(str(n) + ' base32')\n    elif re.match(base64_dic, t):\n        s = base64.b64decode(s)\n        print(str(n) + ' base64')\n```\n\nflag:`flag{U_5h0u1d_Us3_T00l5}`\n\n### [UTCTF2020]basic-crypto\n\n很多二进制数，空格隔开\n\n---\n\n二进制ascll码转字符得到\n\n<img src=\"buuoj古典密码学wp\\image-20240127203144559.png\" alt=\"image-20240127203144559\" style=\"zoom:50%;\" />\n\n之后解base64\n\n<img src=\"buuoj古典密码学wp\\image-20240127203429627.png\" alt=\"image-20240127203429627\" style=\"zoom:50%;\" />\n\n然后是凯撒密码\n\n![](buuoj古典密码学wp\\image-20240127203611366.png)\n\n对最后一段进行词频分析得到flag\n\n```\ncongratulations! you have finished the beginner cryptography challenge. here is a flag for all your hard efforts: utflag{n0w_th4ts_wh4t_i_c4ll_crypt0}. you will find that a lot of cryptography is just building off this sort of basic knowledge, and it really is not so bad after all. hope you enjoyed the challenge!\n```\n\nflag:`flag{n0w_th4ts_wh4t_i_c4ll_crypt0}`\n\n### [WUSTCTF2020]情书\n\n```\nPremise: Enumerate the alphabet by 0、1、2、.....  、25\nUsing the RSA system \nEncryption:0156 0821 1616 0041 0140 2130 1616 0793\nPublic Key:2537 and 13\nPrivate Key:2537 and 937\n\nflag: wctf2020{Decryption}\n```\n\n---\n\n```\na = \"abcdefghijklmnopqrstuvwxyz\"\nc = \"0156 0821 1616 0041 0140 2130 1616 0793\".split(\" \")\n\np = 43 ; q = 59\ne = 13 ; d = 937\nn = p * q ; phi = (p-1)*(q-1)\n\nflag = \"\"\nfor i in c:\n    flag = flag + a[pow(int(i),d,n)]\n\nprint (\"flag{\"+flag+\"}\")\n```\n\nflag:`flag{iloveyou}`\n\n### [GUET-CTF2019]NO SOS\n\n```\n..-.-.-.–…….–..-…-..-…–.-.-….-..-..–.-.-..-.-..—-\n```\n\n---\n\n略加修改\n\n```\n..-.-.-.--.......--..-...-..-...--.-.-....-..-..--.-.-..-.-..----\n```\n\n解密得到\n\n```\naababababbaaaaaaabbaabaaabaabaaabbababaaaabaabaabbababaababaabbbb\n```\n\n培根密码解密\n\n```\nflagisguetkkp\n```\n\nflag:`flag{guetkkp}`\n\n### [UTCTF2020]zero\n\n一个文档\n\n---\n\n零宽字符隐写https://330k.github.io/misc_tools/unicode_steganography.html\n\n![](buuoj古典密码学wp\\image-20240127221556092.png)\n\nflag:`flag{whyNOT@sc11_4927aajbqk14}`\n\n### [NPUCTF2020]Classical Cipher\n\n一个文件\n\n---\n\n使用https://quipqiup.com/爆破密码\n\n密码：`the_key_is_atbash`\n\n![](buuoj古典密码学wp\\image-20240127213243685.png)\n\n猪圈密码+古埃及象形文字http://news.558idc.com/291134.html\n\n<img src=\"buuoj古典密码学wp\\image-20240127213313022.png\" alt=\"image-20240127213313022\" style=\"zoom:33%;\" />\n\n<img src=\"buuoj古典密码学wp\\image-20240127213358381.png\" alt=\"image-20240127213358381\" style=\"zoom:33%;\" />\n\n<img src=\"buuoj古典密码学wp\\image-20240127213419878.png\" alt=\"image-20240127213419878\" style=\"zoom:33%;\" />\n\nflag:`flag{classicalcode}`\n\n### 四面八方\n\n```\nkey1:security\nkey2:information\n\n密文啊这是，骚年加油：zhnjinhoopcfcuktlj\n```\n\n---\n\n四方密码http://www.hiencode.com/four.html\n\nflag:`flag{yaungandsuccessful}`\n\n### [BJDCTF2020]Polybius\n\n```\n密文：ouauuuoooeeaaiaeauieuooeeiea\nhint：VGhlIGxlbmd0aCBvZiB0aGlzIHBsYWludGV4dDogMTQ=\nflag:解出明文后，请加上BJD{}\n```\n\n---\n\n波利比奥斯密码\n\n根据提示，长度是14\n\n```\nimport itertools\ns=\"aeoiu\"\nsumresult=[] ; numsumresult=[]\nciper=\"ouauuuoooeeaaiaeauieuooeeiea\"\nfor i in itertools.permutations(s,5):\n    sumresult.append(\"\".join(i))\nfor i in sumresult:\n    temp=\"\"\n    for j in ciper:\n        temp+=str(i.index(j)+1)\n    numsumresult.append(temp)\nfor i in numsumresult:\n    flag=\"\"\n    for j in range(0, len(i),2):\n        xx=(int(i[j])-1)*5+int(i[j+1])+96\n        if xx>ord('i'):\n            xx+=1\n        flag+=chr(xx)\n    print( flag )\n```\n\n得到`flagispolybius`\n\nflag:`flag{flagispolybius}`\n\n# 救世捷径\n\n```\n一个名叫CPU的神秘大陆有26个国家，有些国家之间会有一条无向路，每条路径都有不同的长度和一段神秘代码，救世主尼奥要从国家1出发，赶往国家26拯救大陆，请你帮助救世主选择最短路径，而走过的路的神秘代码连接起来便是flag。 以下是数行数据，每行第一个，第二个数字代表这条路的两个端点国家，第三个数字代表路途长度，最后一个字符串便是神秘代码。路在附件中~ 帮助救世主尼奥吧，他快被吓尿了。。。 注意：得到的 flag 请包上 flag{} 提交\n1 2 100 FLAG{\n2 3 87 AFQWE\n2 4 57 ETKLS\n2 5 50 WEIVK\n2 6 51 AWEIW\n3 7 94 QIECJF\n3 8 78 QSXKE\n3 9 85 QWEIH\n4 13 54 WQOJF\n4 14 47 KDNVE\n4 15 98 QISNV\n5 10 43 AEWJV\n5 11 32 QWKXF\n5 12 44 ASJVL\n6 16 59 ASJXJ\n6 17 92 QJXNV\n6 18 39 SCJJF\n6 23 99 SJVHF\n7 19 99 WJCNF\n8 20 96 SKCNG\n9 20 86 SJXHF\n10 21 60 SJJCH\n11 21 57 SJHGG\n12 22 47 SJCHF\n14 10 55 EJFHG\n16 17 59 ASJVH\n18 12 53 SJFHG\n18 24 93 SHFVG\n21 22 33 SJFHB\n19 25 88 ASHHF\n20 25 96 SJVHG\n22 25 23 SJVHJ\n25 26 75 SDEV}\n```\n\n---\n\n最短路问题 [洛谷·P4779 【模板】单源最短路径（标准版）](https://www.luogu.com.cn/problem/P4779)\n\n```\ng = []\nfor i in range( 27 ):\n    g.append([])\nfor i in range( 27 ):\n    for j in range( 27 ):\n        g[i].append( 1000000 )\nf = open( 'c.txt' , 'r' ).readlines()\nl = []\nfor i in f:\n    l.append(i.strip().split(' '))\nprint( l )\nfor i in l:\n    print( i )\n    g[int(i[0])][int(i[1])] = int( i[2] )\n    g[int(i[1])][int(i[0])] = int( i[2] )\n\ndef dij():\n    dv = [1000000 for i in range(27)]\n    route = [1 for i in range(27)]\n    vis = [0 for i in range(27)]\n    for i in range( 2 , 27 ):\n        dv[i] = g[i][1]\n    dv[1] = 0\n    vis[1] = 1\n    for i in range(26):\n        minn = 1000000\n        tmp = -1\n        for j in range( 2 , 27 ):\n            if vis[j] == 0 and minn > dv[j]:\n                minn = dv[j]\n                tmp = j\n        vis[tmp] = 1\n        for j in range( 2 , 27 ):\n            if dv[j] > dv[tmp] + g[tmp][j]:\n                dv[j] = dv[tmp] + g[tmp][j]\n                route[j] = tmp\n    return ( route , dv )\n\nroute , dv = dij()\ny = 26\nwhile y!=1:\n    print( y )\n    y = route[y]\n```\n\n得到路径\n\n```\n26\n25\n22\n12\n5\n2\n```\n\n得到flag\n\nflag:`flag{WEIVKASJVLSJCHFSJVHJSDEV}`\n\n## 坏蛋是雷宾\n\n```\n老牌刺客之王混进了女王的住所。一天，女王得到了一个匿名举报，说她的侍卫里有一个刺客，叫做Rabin，而他的信息就在一份文件里，文件中有附带一个Pk，是523798549，密文是162853095，校验码二进制值是110001，根据说明是放在明文后一起加密的，明文与密文长度相同。加密算法和这位老牌刺客同名。快拯救女王，答案是求得的明文，进行32位md5小写哈希字符串，提交即可。 注意：得到的 flag 请包上 flag{} 提交\n```\n\n---\n\n```\nfrom gmpy2 import *\nimport hashlib\nn=523798549\np=10663\nq=49123\ne=2\nc=162853095\ninv_p = invert(p, q)\ninv_q = invert(q, p)\n\nmp = powmod(c, (p + 1) // 4, p)\nmq = powmod(c, (q + 1) // 4, q)\n\na = (inv_p * p * mq + inv_q * q * mp) % n\nb = n - int(a)\nc = (inv_p * p * mq - inv_q * q * mp) % n\nd = n - int(c)\n\nfor i in (a, b, c, d):\n    print(bin(i)[2:])\n    \nm='10010011100100100101010'\nmc=str(int(m,2))\nmd=hashlib.md5()\nmd.update(mc.encode(\"utf8\"))\nprint( md.hexdigest() )\n```\n\nflag:`flag{ca5cec442b2734735406d78c88e90f35}`\n\n## [BJDCTF2020]编码与调制\n\ntag：差分曼彻斯特编码\n\n<img src=\"buuoj古典密码学wp\\image-20240208182640371.png\" alt=\"image-20240208182640371\" style=\"zoom:33%;\" />\n\n```\n密文：2559659965656A9A65656996696965A6695669A9695A699569666A5A6A6569666A59695A69AA696569666AA6\n```\n\n---\n\n（好像从哪里见过，而且这道题更简单一点）见代码\n\n```\nfrom Crypto.Util.number import long_to_bytes\n\ntxt = \"2559659965656A9A65656996696965A6695669A9695A699569666A5A6A6569666A59695A69AA696569666AA6\"\ntxt = bin(int( txt , 16 ))[2:]\nm = \"\"\n\nfor i in range( 0,len(str(txt)),2 ):\n    if txt[i] == \"0\":\n        m += \"0\"\n    else:\n        m += \"1\"\n\nprint( long_to_bytes(int(m,2)) )\n```\n\nflag:`BJD{DifManchestercode}`\n\n## EasyProgram\n\ntag:misc\n\n![](buuoj古典密码学wp\\image-20240208214801863.png)\n\n```\nget buf unsign s[256]\nget buf t[256]\nwe have key:whoami\nwe have flag:????????????????????????????????\n\nfor i:0 to 256\n    set s[i]:i\n\nfor i:0 to 256\n    set t[i]:key[(i)mod(key.lenth)]\n\nfor i:0 to 256\n    set j:(j+s[i]+t[i])mod(256)\n        swap:s[i],s[j]\n\nfor m:0 to 38\n    set i:(i + 1)mod(256)\n    set j:(j + S[i])mod(256)\n    swap:s[i],s[j]\n    set x:(s[i] + (s[j]mod(256))mod(256))\n    set flag[m]:flag[m]^s[x]\n\nfprint flagx to file\n```\n\n---\n\n因为和flag相关的只有异或操作，可逆，故加密和解密过程代码相同\n\n伪代码不初始化默认为0\n\n```\ntxt = \" 00 BA 8F 11 2B 22 9F 51 A1 2F AB B7 4B D7 3F EF E1 B5 13 BE C4 D4 5D 03 D9 00 7A CA 1D 51 A4 73 B5 EF 3D 9B 31 B3\".replace(\" \",\" 0x\").split(\" \")[1:]\nkey = \"whoami\"\n\ns = []\nt = []\nfor i in range( 256 ):\n    s.append(i)\nfor i in range( 256 ):\n    t.append(key[i%len(key)])\n\nj = 0\nfor i in range( 256 ):\n    j = ( j + s[i] + ord( t[i] ) ) % 256\n    s[i] , s[j] = s[j] , s[i]\n\ni = 0\nj = 0\nflag = \"\"\nfor m in range( 38 ):\n    i = ( i + 1 ) % 256\n    j = ( j + s[i] ) % 256\n    s[i] , s[j] = s[j] , s[i]\n    x = ( s[i] + ( s[j] % 256 ) ) % 256\n    flag += chr( int(txt[m],16) ^ s[x] )\n\nprint( flag )\n```\n\nflag:`flag{f238yu28323uf28u2yef2ud8uf289euf}`\n\n## [UTCTF2020]hill\n\ntag:线性代数 | 希尔密码\n\n```\nwznqca{d4uqop0fk_q1nwofDbzg_eu}\n```\n\n---\n\n希尔密码：左乘一个密钥矩阵进行加密\n\nflag前六位为：`utflag`\n\n```\nm = \"wznqca\"\nc = \"utflag\"\n\nfor i in m:\n    if ord(i)>=ord('a') and ord(i)<=ord('z'):\n        print( ord(i) - ord('a') , end = \" \" )\nprint()\nfor i in c:\n    if ord(i)>=ord('a') and ord(i)<=ord('z'):\n        print( ord(i) - ord('a') , end = \" \" )\n```\n\n得到 $K^{-1}*M=C \\ mod \\ 26$\n\n![](buuoj古典密码学wp\\fsadhjgnbsfegrdthf.jpg)\n\n有两种方式，一种是暴力搜索，另一种是解方程（翻译：手搓），这里我们只写第一种\n\n```\nfrom numpy import *\n\nM = mat([[22,13,2],[25,16,0]])\nC = mat([[20,5,0],[19,11,6]])\n\nfor a in range( 100 ):\n    for b in range( 100 ):\n        for c in range( 100 ):\n            for d in range( 100 ):\n                K = mat([[a,b],[c,d]])\n                if ((K*C)%26==M).all():\n                    print( K )\n                    assert 0\n```\n\n得到$K$的一个解是`[[ 1 22],[11 13]]`\n\n有了密钥，使用[在线工具](http://practicalcryptography.com/ciphers/hill-cipher/)即可得到flag\n\n<img src=\"buuoj古典密码学wp\\image-20240209150414038.png\" alt=\"image-20240209150414038\" style=\"zoom:50%;\" />\n\n填回其他字符，修正大小写即可\n\nflag:`utflag{d4nger0us_c1pherText_qq}`\n","tags":["cryptoCTF"]},{"title":"基于SM9的属性基在线离线签名方案 论文阅读总结","url":"/2024/09/24/基于SM9的属性基在线离线签名方案-论文阅读总结/","content":"\n本文用于记录 [本篇论文](https://crad.ict.ac.cn/article/doi/10.7544/issn1000-1239.202220530) 的阅读和知识总结与学习\n\n<!--more-->\n\n## 前置内容\n\n### 关键词\n\nSM9;在线/离线签名;属性基签名;随机谕言机模型;q-SDH 问题\n\n#### [SM9算法](https://openstd.samr.gov.cn/bzgk/gb/std_list?p.p1=0&p.p90=circulation_date&p.p91=desc&p.p2=sm9)\n\n基于双线性对，可以实现属性基加密签名\n\n相对而言，SM2基于椭圆曲线，无属性基相关属性\n\n#### [在线/离线签名](https://citeseerx.ist.psu.edu/document?repid=rep1&type=pdf&doi=e8e24b884e1004dbf28e5af58a2532fa3576d370)\n\n在线签名在服务器（可信的）等设备上进行，离线签名在轻量级设备上；离线签名在在线签名的基础上进行签名，可以减少轻量级设备的运算开销\n\n#### 随机谕言机模型\n\n可以视为一个安全的哈希函数\n\n#### [q-SDH 问题](https://eprint.iacr.org/2010/215.pdf)\n\n多个参与者的DH密钥交换，而且更强，而且抗量子\n\n### 预备知识\n\n#### 双线性映射\n\n给定安全系数 [$\\kappa$](#kappa)，生成一个双线性元组 $BP=(G_1,G_2,G_T,e,p)$ \n\n令 $P$ 是 $G_1$ 的一个[生成元](#生成元)，令 $Q$ 是 $G_2$ 的一个生成元，一个双线性映射 $e:G_1\\times G_2\\rightarrow G_T$ 有：[双线性 非退化性 可计算性](#三个性质) 三个性质\n\n此外，在 $G_1$ 和 $G_2$ 之间存在一个能有效且能公开计算的[同构映射](#同构映射) $\\psi:G_2\\rightarrow G_1$ ，即 $\\psi(Q)=P$\n\n#### q-SDH(q-strong Diffie-Hellman) 困难问题和困难问题假设\n\nq-SDH困难问题，令 $P,Q$ 分别为 $G_1,G_2$ 的生成元，在 $(G_1,G_2)$ 群上的 q-SDH 问题可以表述为：给定 $q+2$ 个元素的元组 $(P,Q,aQ,a^2Q,...,a^qQ)$ ，找到一堆元素 $(c,\\frac{1}{c+a}P)$ ，其中 $c\\in \\mathbb{Z}_p^*$\n\n$(t,\\varepsilon)-$q-SDH 困难问题假设：若不存在概率多项式时间 $t$ 的算法至少以不可忽略的概率 $\\varepsilon$ 解决 $(G_1,G_2)$ 上的 q-SDH 问题，则称 q-SDH 问题在 $(G_1,G_2)$ 是 $(t,\\varepsilon)$ 困难的\n\n`q-strong` 指的是 $q$ 个用户，而不是量子`quantum`的意思\n\n#### [分叉引理](#分叉引理)\n\n看不懂一点，暂时跳过\n\n## 形式化定义和安全模型\n\n![](基于SM9的属性基在线离线签名方案-论文阅读总结\\image-20240925143622469.png)\n\n#### ABOOS方案的形式化定义\n\n\n\n#### 安全模型\n\n\n\n## 方案构造\n\n\n\n\n\n\n\n\n\n## 附录\n\n#### $\\kappa$<span id=\"kappa\"></span>\n\n安全系数 $\\kappa$，LaTex写作 `kappa`，通常用来量化密码系统抵抗攻击的强度\n\n它表示安全性级别，通常与密钥长度、加密算法的复杂性等因素相关。较大的 $\\kappa$ 值意味着更强的安全性，抵御暴力破解和其他攻击的能力更强。\n\n一个经典的例子是基于双线性映射的身份基加密（IBE）。在IBE中，用户的公钥可以是其身份信息（如电子邮件地址），而私钥由一个私钥生成中心生成。假设安全系数 $\\kappa$ 为 128 位，这意味着攻击者需要消耗大约 $2^{128}$ 次操作才能成功破解密钥。通过双线性映射，公钥和私钥的生成、加密和解密操作可以高效完成，同时保持与 $\\kappa$ 相关的安全性。\n\n#### 生成元<span id=\"生成元\"></span>\n\n一个元素 $g$ 称为群 $G$ 的生成元，如果对于群 $G$ 中的任意元素 $x$，存在一个整数 $k$ 使得 $x = g^k$。换句话说，生成元是通过其幂（或反复运算）可以生成群中所有元素的元素。\n\n#### 双线性 非退化性 可计算性<span id=\"三个性质\"></span>\n\n- 双线性 $e(aP,bQ)=e(P,Q)^{ab}$\n\n具体的，如果 $a=2,b=3$，那么 $e(2P, 3Q) = e(P, Q)^{2 \\times 3} = e(P, Q)^6$。\n\n- 非退化性 任意 $P\\in G_1,Q\\in G_2$，有 \\neq 1$\n\n只要 $P$ 和 $Q$ 同时是有效的点，则 $e(P,Q)$ 必然不等于 $1$\n\n- 可计算性 任意 $P\\in G_1,Q\\in G_2$，有 $e(P,Q)$ 可以被有效计算\n\n映射 $e(P, Q)$ 应能在多项式时间内计算。如果你有 $P$ 和 $Q$ 的坐标，可以通过预先定义的双线性映射算法快速计算出 $e(P, Q)$。\n\n#### 同构映射<span id=\"同构映射\"></span>\n\n对于两个群，一个映射 $\\psi:G_2\\rightarrow G_1$，需要满足：\n\n1. 一一对应 $a,b\\in G_2$，如果 $\\psi(a)=\\psi(b)$，则 $a=b$\n2. 运算保持 $a,b\\in G_2$，都有 $\\psi(a\\cdot b)=\\psi(a)\\cdot\\psi(b)$\n\n同构映射是可逆的\n\n#### 分叉引理<span id=\"分叉引理\"></span>\n\n若攻击者能够成功生成有效的签名，即使在有限的查询次数后，我们可以利用这一点来构造另一个有效签名，这通常通过一种“分叉”的方式实现。\n\n1. 输入与图灵机：\n   - 令 $A$ 为一个输入仅包含公共信息的概率多项式时间的图灵机。这意味着 $A$ 是一个能在多项式时间内运行的算法，且其输入不包含秘密信息（例如签名密钥）。\n\n2. 签名查询与随机谕言机：\n   - $A$ 进行 $n$ 次签名查询和 $m$ 次随机谕言机查询。签名查询是指 $A$ 请求生成某个消息的签名，而随机谕言机查询则是指 $A$ 请求随机数或其它公用信息。\n\n3. 生成有效签名元组：\n   - 敌手 $A$ 可以在概率多项式时间内，以 $\\epsilon$ 的概率产生一个有效的消息签名元组 $(m, \\sigma)$，其中 $m$ 是消息，$\\sigma$ 是该消息的签名，且 $H(m)$ 表示与消息 $m$ 相关的哈希值。\n\n4. 不可区分的分布：\n   - 如果这个签名元组可以在不知道签名密钥的情况下以不可区分的分布概率进行模拟，意味着攻击者 $A$ 的行为与一个理想模型中没有秘密信息的情况没有显著差异。\n\n5. 构造另一台图灵机：\n   - 根据分叉引理，如果存在这样一个模拟，那么就存在另一台概率多项式时间的图灵机 $B$，它可以在理想情况下，通过控制攻击者 $A$ 的模拟与签名者的交互，生成两个有效的消息签名元组 $(m_1, \\sigma_1)$ 和 $(m_2, \\sigma_2)$，使得这两个签名都是有效的，并且 $H(m_1) = H(m_2)$。\n\n通过分叉引理，证明了即使攻击者 $A$ 能够生成有效的签名，我们仍然可以利用这一过程来找到两个不同的消息的签名，使得它们具有相同的哈希值，从而说明签名方案的安全性是值得怀疑的。这通常意味着该方案不满足抗重放攻击或抗伪造攻击的要求。\n\n","tags":["Crypto","unfixed"]},{"title":"关于维纳攻击的学习总结","url":"/2024/09/23/关于维纳攻击的学习总结/","content":"\n嘻嘻，还没开始写\n\n参考资料：https://zhuanlan.zhihu.com/p/400818185\n","tags":["cryptoCTF","unfixed"]},{"title":"hexo新建博客但是要求输入第二行","url":"/2024/09/21/hexo新建博客但是要求输入第二行/","content":"\n今天遇到了以下问题\n\n![](hexo新建博客但是要求输入第二行\\image-20240921214332499.png)\n\n解决方案：引号输入改为英文（字体太小了没看到（悲\n","tags":["misc"]},{"title":"撬开后量子的大门","url":"/2024/09/21/撬开后量子的大门/","content":"\n笔者刚开始接触后量子，这里是学习笔记\n\n<!--more-->\n\n## 量子力学基础\n\n### 量子叠加原理\n\n#### 概念：\n\n一个量子系统可以同时处于多个可能状态的叠加状态，而不是像经典物理中那样只能处于一个确定的状态。这意味着，一个量子比特（qubit）可以同时表示0和1两种状态的叠加态，而不仅仅是0或1。这种量子叠加为量子计算提供了并行计算的能力，使得量子计算机能够在某些问题上比传统计算机更快地得出答案。\n\n叠加原理可以用一个简单的例子来说明。假设我们有一个量子比特，它是一个自旋向上的电子和一个自旋向下的电子的叠加态。根据量子叠加原理，这个量子比特可以同时表示自旋向上和自旋向下的状态。当我们对这个量子比特进行测量时，它只会塌缩到一个确定的状态，即自旋向上或自旋向下，但测量前的状态是两者同时存在的。\n\n#### 数学表示：\n\n假设一个量子比特有两个状态，记为 $|0\\rangle$ 和 $|1\\rangle$。量子叠加态可以用一个线性组合来表示：\n\n$|\\psi\\rangle = \\alpha|0\\rangle + \\beta|1\\rangle$\n\n其中 $\\alpha$ 和 $\\beta$ 是复数，并且满足：\n\n$|\\alpha|^2 + |\\beta|^2 = 1$\n\n这是因为测量的概率必须等于1，$|\\alpha|^2$ 和 $|\\beta|^2$ 分别表示测量结果为 $|0\\rangle$ 和 $|1\\rangle$ 的概率。\n\n### 量子纠缠原理\n\n#### 概念\n\n量子纠缠是一种特殊的量子态，其中多个量子比特的状态是相互关联的，不能单独描述一个量子比特的状态。\n\n纠缠态不能用独立的量子比特描述，纠缠的特性是量子信息传递中的重要资源，如量子通信和量子密钥分发（QKD）。\n\n#### 数学表示\n\n对于两个量子比特系统，一个典型的纠缠态是**Bell态**[$^{(1)}$](#Bell态)，如：\n\n$|\\psi\\rangle = \\frac{1}{\\sqrt{2}}(|00\\rangle + |11\\rangle)$\n\n这意味着两个量子比特的状态是共同决定的，如果测量第一个比特为0，那么第二个比特也必然是0，反之亦然。两者之间的状态是完全纠缠的。\n\n### 量子测量\n\n#### 概念\n\n量子测量是指对量子态进行观测，测量会导致量子态的坍缩（collapse），即量子系统从叠加态“坍缩”到一个确定的状态。\n\n量子测量的不可预测性是量子力学的本质特性之一，测量后系统的叠加态消失，转变为经典状态。\n\n#### 数学表示\n\n如果一个量子比特处于叠加态 $|\\psi\\rangle = \\alpha|0\\rangle + \\beta|1\\rangle$，测量后系统会以概率 $|\\alpha|^2$ 得到结果 $|0\\rangle$，以概率 $|\\beta|^2$ 得到结果 $|1\\rangle$，测量会使系统坍缩到测量所得的状态。\n\n---\n\n### 量子态\n\n#### 概念\n\n量子态是描述量子系统的完整信息，可以是单个粒子的状态，也可以是多个粒子的联合状态。\n\n#### 数学表示\n\n单个量子比特的量子态如 $|\\psi\\rangle = \\alpha|0\\rangle + \\beta|1\\rangle$。多个量子比特的量子态则是张量积，比如两个量子比特的状态可以表示为：\n\n$|\\psi\\rangle = (\\alpha_1|0\\rangle + \\beta_1|1\\rangle) \\otimes (\\alpha_2|0\\rangle + \\beta_2|1\\rangle)$\n\n张量积是构建多比特系统的重要工具。\n\n### 量子比特（qubit）\n\n#### 概念\n\n量子比特是量子计算的基本单位，类似于经典计算中的比特。不同之处在于量子比特可以处于 $|0\\rangle$、$|1\\rangle$ 或两者的叠加状态。\n\n量子比特可以通过叠加、纠缠、操作等多种方式处理信息，具有比经典比特更强大的信息表达和处理能力。\n\n#### 数学表示\n\n量子比特的状态 $|\\psi\\rangle$ 可以表示为：\n\n$|\\psi\\rangle = \\alpha|0\\rangle + \\beta|1\\rangle$\n\n其中 $\\alpha$ 和 $\\beta$ 是满足 $|\\alpha|^2 + |\\beta|^2 = 1$ 的复数。\n\n### 量子门操作\n\n#### 概念\n\n量子门是对量子态进行操作的基本单元，类似于经典计算中的逻辑门。量子门操作是可逆的，并且可以用矩阵来表示。\n\n量子门可以实现各种量子态操作，是构建量子电路和量子算法的基础。\n\n#### 常见的量子门操作\n\n1. Hadamard门（H门）：将一个量子比特从经典态转变为叠加态：\n   \n   $H = \\frac{1}{\\sqrt{2}} \\begin{pmatrix} 1 & 1 \\\\ 1 & -1 \\end{pmatrix}$\n   \n   对状态 $|0\\rangle$ 和 $|1\\rangle$ 的作用为：\n   \n   $H|0\\rangle = \\frac{1}{\\sqrt{2}}(|0\\rangle + |1\\rangle), \\quad H|1\\rangle = \\frac{1}{\\sqrt{2}}(|0\\rangle - |1\\rangle)$\n   \n2. Pauli门（X、Y、Z门）：\n   - $X$ 门类似于经典的NOT门，交换 $|0\\rangle$ 和 $|1\\rangle$：\n     \n     $X = \\begin{pmatrix} 0 & 1 \\\\ 1 & 0 \\end{pmatrix}$\n     \n   - $Y$ 和 $Z$ 门分别进行不同的相位操作：\n     \n     $Y = \\begin{pmatrix} 0 & -i \\\\ i & 0 \\end{pmatrix}, \\quad Z = \\begin{pmatrix} 1 & 0 \\\\ 0 & -1 \\end{pmatrix}$\n   \n3. CNOT门（控制非门）：一个两比特门，作用是翻转目标比特的状态，但仅当控制比特为 $|1\\rangle$ 时才翻转：\n   \n   $CNOT = \\begin{pmatrix} 1 & 0 & 0 & 0 \\\\ 0 & 1 & 0 & 0 \\\\ 0 & 0 & 0 & 1 \\\\ 0 & 0 & 1 & 0 \\end{pmatrix}$\n   \n\n## 量子计算原理\n\n### shor算法\n\nShor算法的高效性在于其量子部分能在多项式时间内找到周期，而这个周期信息又能用来找到大整数的因子。正因如此，Shor算法被视为量子计算对现有公钥密码体制（如RSA）的威胁。\n\n目标：用于因式分解大整数，破解基于大数分解难题的公钥密码（如RSA）。\n\n工作原理：\n\n1. 选择随机数：选择一个随机整数 $a$，使其小于待分解的整数 $N$（即 $1 < a < N$）。\n\n2. 计算最大公约数：计算 $\\text{gcd}(a, N)$，如果结果大于1，则找到了一个因子。这一步可以使用欧几里得算法在经典计算机上完成。\n\n3. 量子周期性：如果 $\\text{gcd}(a, N) = 1$，则继续执行以下步骤：\n\n   - 找到一个周期 $r$，使得 $a^r \\equiv 1 \\mod N$\n   - 这意味着 $a$ 的 $r$ 次幂模 $N$ 为1。\n\n4. 使用量子计算找周期：利用量子傅里叶变换（QFT）找到周期 $r$。具体步骤：\n\n   - 初始化量子位：准备一个包含 $2n$ 个量子位的系统，$n$ 是 $N$ 的位数。\n   - 超位置态：将量子位置于超位置态，表示所有可能的结果。\n   - 应用oracle：通过一个oracle函数来实现对 $a^x \\mod N$ 的计算，从而编码周期信息。\n   - 量子傅里叶变换（QFT）：对量子位（一个周期函数）进行量子傅里叶变换，提取周期的信息，周期与整数因式相关联。\n\n5. 测量和计算：\n\n   - 测量量子态，得到的结果可以用于估计周期 $r$（即解决离散对数问题）\n   - 使用继续的经典算法，验证找到的 $r$ 是否符合 $a^r \\equiv 1 \\mod N$。\n\n6. 找到因子：\n\n   - 确定 $r$ 后，检查 $r$ 是否为偶数。\n\n   - 如果 $a^{r/2} \\not\\equiv -1 \\mod N$，则：\n\n     $\\text{factor1} = \\text{gcd}(a^{r/2} - 1, N)$\n\n     $\\text{factor2} = \\text{gcd}(a^{r/2} + 1, N)$\n\n   - 如果这两个因子不等于1和$N$，则它们即为 $N$ 的非平凡因子。\n\n### Grover算法\n\n1. 目的：通过量子叠加和干涉，加速无结构（无序）数据库的搜索，常用于破解对称加密，可将搜索时间从 $O(N)$ 降低到 $O(\\sqrt{N})$。\n\n2. 叠加态初始化：（将所有可能的候选解放入量子叠加态）\n\n   - 准备 $n$ 个量子位，表示 $N = 2^n$ 个可能的解的超位置态：\n\n     $\\frac{1}{\\sqrt{N}} \\sum_{x=0}^{N-1} |x\\rangle$\n\n3. Oracle：\n\n   - 定义一个oracle函数 $O_f$，用于标记正确解 $x_0$。对于任意输入 $x$，oracle的作用为：\n     $$\n     O_f |x\\rangle = \\begin{cases}\n     -|x\\rangle & \\text{if } x = x_0 \\\\\n     |x\\rangle & \\text{otherwise}\n     \\end{cases}\n     $$\n\n   - 这意味着，如果输入是正确解，输出的相位会反转。\n\n4. 振幅增强：\n\n   - 使用Grover的扩展步骤，通过应用两个操作增强标记解的概率幅度：\n\n     1. 应用oracle：对所有量子位应用oracle $O_f$。\n\n     2. 振幅增强：执行反射操作 $R$，通过以下步骤：\n\n       $R = 2|\\psi\\rangle\\langle\\psi| - I$\n\n       其中 $|\\psi\\rangle$ 是当前的量子态，$I$ 是单位算符。\n\n     - 这个步骤使得标记解的幅度增加。（逐步放大正确解的概率幅度）\n\n5. 重复步骤：\n\n   - 重复执行oracle和振幅增强的过程 $O(\\sqrt{N})$ 次。\n\n6. 测量：\n\n   - 最后，测量量子态，得到的结果会更倾向于正确解 $x_0$，以概率接近1。\n\n### 量子计算与经典计算的区别\n\n经典计算使用经典比特，经典比特只能是0或1；量子计算使用量子比特（qubits），每个量子比特可以处于 $|0\\rangle$ 和 $|1\\rangle$ 的叠加态。\n\n- 叠加（Superposition）：量子比特可以同时处于多个状态的叠加态，允许量子计算并行处理多个计算路径。而经典比特只能处于确定的状态 $0$ 或 $1$。\n  - 经典比特：单一状态，例如 $0$ 或 $1$。\n  - 量子比特：叠加态，例如 $|\\psi\\rangle = \\alpha|0\\rangle + \\beta|1\\rangle$。\n\n- 量子纠缠（Entanglement）：多个量子比特之间可以处于纠缠态，导致它们的状态是相互关联的。即使这些比特相距很远，测量一个比特的状态会影响另一个比特的状态。在经典计算中，位之间没有这种关联性。\n  - 经典比特：独立的状态。\n  - 量子比特：关联的纠缠态。\n\n- 量子干涉（Quantum Interference）：量子计算通过干涉效应增强正确解的概率幅度，抑制错误解的幅度。这是如Grover算法中用于加速搜索的关键原理。\n  - 经典算法：没有干涉现象。\n  - 量子算法：通过干涉增强正确解的概率。\n\n- 测量与坍缩（Measurement & Collapse）：量子计算在执行时，量子比特可以处于叠加态或纠缠态，但一旦测量就会坍缩到某个确定的状态。经典计算中的比特始终处于确定的状态。\n  - 经典比特：一直是确定值。\n  - 量子比特：测量时随机坍缩到一个状态，概率受叠加态系数控制。\n\n- 并行计算能力：量子计算可以并行执行多个计算路径（通过叠加态），从而显著提升某些问题的求解效率。\n  - 经典计算模拟量子计算需要指数级的资源。\n\n- 量子算法的效率：量子算法可以提供指数或平方加速。例如，Shor算法对于因数分解问题的加速是指数级的，Grover算法对于无结构搜索问题的加速是平方级的。\n  - Shor算法：经典复杂度为指数级，量子复杂度为多项式级。\n  - Grover算法：经典复杂度为 $O(N)$，量子复杂度为 $O(\\sqrt{N})$。\n\n## 数学基础\n\n略\n\n## 密码学基础\n\n略\n\n## 后量子密码学概念\n\n本篇文章只是简单了解，具体实现见下一篇博客\n\n### 后量子密码学的核心算法设计\n\n#### 基于格的密码（Lattice-based Cryptography）\n\n- 原理：基于格理论中的困难问题，如最短向量问题（SVP）和最接近向量问题（CVP）。\n- 特点：\n  - 即使在量子计算机上，求解这些问题仍然非常困难。\n  - 可以支持丰富的密码学功能，如全同态加密（Fully Homomorphic Encryption）和数字签名。\n- 常见算法：\n  - NTRU加密算法：一种基于格的公钥加密方案，抗量子攻击。\n  - LWE（Learning With Errors）：基于格的加密和签名方案，广泛应用于后量子密码学。\n- 优势：具有较强的抗量子攻击能力，并且可以高效实现。\n- 挑战：密钥和签名较大，效率与经典算法相比仍需优化。\n\n#### 代码密码（Code-based Cryptography）\n\n- 原理：基于纠错码的困难问题，如广义辛德尔（Goppa）码的解码问题。\n- 特点：\n  - 主要基于解码随机线性码的难题，类似于求解高维空间中的矢量错误纠正问题。\n  - 经典的McEliece公钥加密方案就是一种基于代码的密码。\n- 常见算法：\n  - McEliece加密算法：基于纠错码，提出于1978年，至今未被破解。\n  - Niederreiter加密算法：McEliece的变体，效率更高。\n- 优势：公钥加密方案历史悠久，具有极高的安全性。\n- 挑战：公钥非常大，使得在存储和传输上需要较多资源。\n\n#### 基于多变量多项式的密码（Multivariate Quadratic Cryptography）\n\n- 原理：基于多变量二次方程（MQ）问题的求解困难性，这在量子计算机上仍然是困难的。\n- 特点：\n  - 主要用于数字签名方案，解决方程组中的未知数是NP困难问题。\n- 常见算法：\n  - Unbalanced Oil and Vinegar（UOV）：一种多变量的数字签名算法。\n- 优势：签名过程非常快。\n- 挑战：公钥较大，且可能面临更高效的攻击手段。\n\n#### 哈希签名（Hash-based Cryptography）\n\n- 原理：基于哈希函数的安全性。\n- 特点：\n  - 主要用于构建数字签名方案，依赖于现有的哈希函数安全性。\n  - 由于哈希函数在量子计算下的安全性较好，因此可以通过扩展哈希长度来提高安全性。\n- 常见算法：\n  - Lamport签名：一种经典的哈希签名方案。\n  - XMSS（eXtended Merkle Signature Scheme）：一种高效的哈希签名方案，已经标准化。\n- 优势：可以使用现有的哈希函数构建，结构简单且易于实现。\n- 挑战：签名方案的使用次数有限。\n\n#### 基于同源映射的密码（Isogeny-based Cryptography）\n\n- 原理：基于椭圆曲线同源映射问题的困难性。\n- 特点：\n  - 量子计算机在求解同源映射时没有明显优势，这使其成为一种抗量子攻击的潜在方案。\n- 常见算法：\n  - SIDH（Supersingular Isogeny Diffie-Hellman）：一种基于同源映射的密钥交换协议。\n- 优势：密钥非常小，适用于需要高效传输的场景。\n- 挑战：计算复杂性较高，仍然需要进一步研究其安全性。\n\n---\n\n### 设计抵抗量子攻击的安全协议\n\n#### 量子攻击的威胁\n\n量子计算主要依赖两种算法对现有加密协议构成威胁：\n\n- Shor算法：能高效解决大数分解和离散对数问题，威胁到RSA、ECC等基于这些问题的非对称加密方案。\n- Grover算法：能够加速无结构搜索任务，影响对称加密和哈希函数，但其影响相对较小。\n\n#### 后量子安全协议设计\n\n在设计安全协议时，必须确保协议能够抵御量子计算攻击，这包括以下方面：\n\n- 密钥交换协议：\n  - 经典方案的脆弱性：如DH密钥交换（基于离散对数问题）和RSA密钥交换（基于大数分解问题）都会被Shor算法破坏。\n  - 后量子方案：可以使用基于格的加密方案（如Kyber）或基于同源映射的协议（如SIDH）来代替。\n\n- 数字签名协议：\n  - 经典方案的脆弱性：RSA和ECDSA签名会被量子计算机破坏。\n  - 后量子方案：哈希签名（如XMSS）或基于格的签名方案（如Dilithium）可用于构建安全的数字签名。\n\n- 对称加密：\n  - 经典方案的安全性：对称加密算法（如AES）在量子攻击下的安全性会下降一半（通过Grover算法），例如AES-128的安全性会等效于AES-64。\n  - 应对方案：通过增加密钥长度（如使用AES-256）来抵御量子攻击。\n\n- 混合方案：\n  - 过渡方案：由于当前的量子计算机还不成熟，可以采用“混合”加密方案，即将现有的经典加密算法与后量子加密算法结合使用。这使得在量子计算技术未完全成熟前，依然可以保证协议的安全性。\n\n#### 协议设计原则\n\n- 安全性证明：设计基于难解数学问题的算法时，必须提供强有力的安全性证明。对于后量子密码学，安全性通常是基于现有的NP困难问题，且这些问题在量子计算机下仍然保持难解。\n- 效率考虑：后量子加密算法的效率往往低于经典算法，设计时应兼顾安全性和性能。例如，格密码虽然安全性高，但在实际应用中需要优化以减少密钥和签名的大小。\n- 灵活性与可扩展性：随着量子计算技术的进步，协议设计应具有灵活性，以便可以在未来采用新的、更安全的算法。\n\n## 如何学习并模拟量子攻击\n\n- 量子计算模拟器：使用量子计算模拟器（如Qiskit、Cirq或Microsoft Quantum Development Kit）来模拟Shor算法和Grover算法的执行。这可以帮助研究人员理解量子算法如何对特定的加密方案（如RSA或对称加密算法）构成威胁。\n\n- 后量子密码学库：使用后量子密码学算法（如Lattice-based、Code-based、Multivariate等）进行对比，评估这些算法在量子攻击下的安全性。这可以通过对比量子算法与后量子算法在攻击成功率和计算复杂度上的差异。\n\n- 量子硬件：在可用的情况下，可以在真实的量子计算机上运行实验，比如IBM Q Experience。通过量子硬件，可以直接测试某些攻击场景，验证量子算法的实际效果。\n\n- 安全性分析工具：使用专门的安全性分析工具（如CryptoVerif、ProVerif等）来评估量子计算对现有加密协议的威胁。这些工具可以帮助研究人员分析加密协议在量子攻击下的脆弱性。\n\n- 公开挑战：参与量子密码学领域的公开挑战，如NIST的后量子密码学标准化项目，了解不同算法的竞争和实际应用情况。\n\n---\n\n## addition\n\n<span id=\"Bell态\"></span>\n\n### (1) Bell态\n\nBell态（Bell state）是两量子比特纠缠态的特定形式，是量子纠缠的经典示例。Bell态描述了一对量子比特的状态，这些量子比特之间存在极强的量子关联，无论它们相距多远，测量其中一个比特的状态都会影响另一个比特的状态。这种现象体现了量子纠缠的本质。\n\n有四种Bell态，通常写为 $|\\Phi^{\\pm}\\rangle$ 和 $|\\Psi^{\\pm}\\rangle$，它们的定义如下：\n\n1. $|\\Phi^+\\rangle$： $|\\Phi^+\\rangle = \\frac{1}{\\sqrt{2}} (|00\\rangle + |11\\rangle)$\n\n   这表示两个比特要么同时是 $|0\\rangle$，要么同时是 $|1\\rangle$，两种状态以相等的概率叠加。\n\n2. $|\\Phi^-\\rangle$： $|\\Phi^-\\rangle = \\frac{1}{\\sqrt{2}} (|00\\rangle - |11\\rangle)$\n\n   与 $|\\Phi^+\\rangle$ 类似，但两个状态之间存在相位差（负号）。\n\n3. $|\\Psi^+\\rangle$： $|\\Psi^+\\rangle = \\frac{1}{\\sqrt{2}} (|01\\rangle + |10\\rangle)$\n\n   这表示一个比特是 $|0\\rangle$ 而另一个比特是 $|1\\rangle$，或者反之，且两者叠加。\n\n4. $|\\Psi^-\\rangle$： $|\\Psi^-\\rangle = \\frac{1}{\\sqrt{2}} (|01\\rangle - |10\\rangle)$\n\n   与 $|\\Psi^+\\rangle$ 类似，但在两个状态之间有相位差（负号）。\n\n#### 物理意义\n\n- Bell态是一种最大纠缠态，这意味着两个量子比特的状态是完全相关的，不能用单独的量子态来描述每个比特。\n- 如果我们测量其中一个量子比特并得到 $|0\\rangle$，另一个量子比特立刻处于对应的状态（即 $|0\\rangle$ 或 $|1\\rangle$），即使它们相距很远。这种关联是量子纠缠的独特表现，爱因斯坦称之为“幽灵般的远距作用”。\n\n#### 应用\n\n- 量子隐形传态（Quantum Teleportation）：通过纠缠态和经典通信将量子信息从一个地方传送到另一个地方。\n- 量子密钥分发（QKD）：如BB84协议，使用Bell态的量子纠缠特性来保证通信的安全性。\n- 量子纠错：纠缠态在量子纠错码中可以用来检测和修正量子系统中的错误。\n","tags":["Crypto"]},{"title":"记录一道考研数学-关于三角函数的极限","url":"/2024/09/21/记录一道考研数学-关于三角函数的极限/","content":"\n题目：$lim_{n\\rightarrow \\infty}n\\pi sin(n\\pi)=?$\n\n<!--more-->\n\n因为是填空题，所以一眼能看出来得 $0$ \n\n为什么是零呢？因为感觉不是正数也不是负数（对偶性），所以只能是 $0$\n\n学长的讲解：\n\n当 $n \\to \\infty$ 时，可以把问题理解为一个数列的极限，也就是趋于正无穷的实数。但是，直接看 $n \\pi \\sin(n \\pi)$ 的极限是行不通的，因为这个表达式相当于 $0 \\times \\infty$ 的形式。在这种情况下，你可能想把 $0$ 单独拿出来处理，但根据乘法运算的规则，只有当两个乘数都存在时，才能进行这样的操作。\n\n所以我们先不要直接看极限，而是先看表达式 $n \\pi \\sin(n \\pi)$ 本身。在 $n$ 为实数的情况下，$\\sin(n \\pi)$ 总是 $0$，因此这个表达式无论 $n$ 是多少，都是 $0$。即使把极限带入，结果也是 $0$。尽管你可能会觉得这种形式是“无穷小乘无穷大”，不一定是 $0$，但实际上这是 $0$ 乘以任何数，结果必然是 $0$。\n\n无穷小和 $0$ 是不同的，$0$ 是无穷小的一种特殊情况。虽然无穷小乘无穷大的结果并不总是 $0$，但在这里，表达式的极限确实是 $0$。\n\n---\n\n但是我的问题在于，随着 $n$ 的增大（只考虑趋向于正无穷大），函数值高速震荡，感觉不像是有界的\n\n![](记录一道考研数学-关于三角函数的极限\\image-20240921201843743.png)\n\n之后发现它确实是有界的，因为：\n\n```\n在判别函数的有界性时，我们需要先知道以下两个重要结论，即： 如果f（x）在闭区间［a，b］上连续，那么f（x）在闭区间［a，b］上有界。 如果f（x）在开区间（a，b）上连续且函数的极限存在于其端点处，则f（x）在开区间（a，b）上有界。\n```\n\n这个函数包连续的，所以理所当然的有界\n\n既然都有界了，那么极限存在\n\n---\n\n后记：\n\n结合网上的说法和gpt4o给出的答案，$\\lim_{n \\to \\infty} n \\pi \\sin(n \\pi)$ 不存在\n\n当且仅当 $n\\in N^*$ 时，$\\lim_{n \\to \\infty} n \\pi \\sin(n \\pi)=0$\n\n如果 $n$ 是非整数实数，$\\sin(n \\pi)$ 会在 $[-1, 1]$ 之间振荡。而由于 $n \\pi$ 趋向无穷大，乘积 $n \\pi \\sin(n \\pi)$ 是一个无穷大乘以振荡的值，无法直接确定这个极限。\n\n因此，严格来说，$\\lim_{n \\to \\infty} n \\pi \\sin(n \\pi)$ 是发散的，并不存在一个简单的极限值。如果我们只考虑 $n$ 为整数的情况，则结果为 $0$，否则该极限无法求出。\n\n $\\lim_{n \\to \\infty} n \\pi \\sin(n \\pi)$ 存在，当且仅当 $\\lim_{x \\to \\infty} \\sin(x)$ 存在；众所周知的，$f(x)=\\sin(x)$ 既不收敛也不发散（在讨论整个序列时，极限存在与收敛实际上是等价的），故极限不存在\n\n","tags":["mathematics"]},{"title":"2024.9.20南洋理工密码学报告 观后总结","url":"/2024/09/20/2024-9-20南洋理工密码学报告-观后总结/","content":"\n讲座主题：门限密码\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_095029.jpg)\n\n蚌埠住了，我一直以为门限密码是门陷密码\n\n门限密码指的是 `n个里满足k个` 即可解密\n\n而陷门密码通常指的是单向函数\n\n---\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_095032.jpg)\n\n从一开始就懵懵的，唯二能学习到的是这个教授很厉害，和如何制作PPT\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_095347.jpg)\n\n这一张基本上是唯一能看懂的了；用RSA的例子讲解了同态加密\n\n大概是门限密码具有同态加密的性质\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_095752.jpg)\n\n这两些貌似讲的是如何进行的操作？\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_100043.jpg)\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_100341.jpg)\n\n这一张貌似是得到结论，是个`NP-hard`问题\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_101048.jpg)\n\n然后就开始讲门限块密码了\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_101200.jpg)\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_101333.jpg)\n\n貌似实现过程很复杂，这一段没看懂\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_101444.jpg)\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_101743.jpg)\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_102220.jpg)\n\n这一张用图解释了PHF（感觉很生动的图片）\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_102326.jpg)\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_102331.jpg)\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_102438.jpg)\n\n这一段，用门锁的概念揭示了解密过程\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_102720.jpg)\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_102824.jpg)\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_103200.jpg)\n\n最后这一张，主要讲述的是效率的提升\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_103448.jpg)\n\n最后的最后，张福泰教授说\n\n```\n（这篇报告把）对称用门限去做\n要从组合数学的观点去做\n（使对称加密）有了同态的性质\n```\n\n![](2024-9-20南洋理工密码学报告-观后总结\\IMG_20240920_104226.jpg)\n\n主讲人：使用多重AES，每个用户掌握一个密钥（虽然效率会下降）\n\n张教授：sm2的门限密码，公平性能不能做到（要么同时拿到最终的签名，要么都拿不到）\n\n主讲人：目前业内很少做类似的\n\n---\n\n总结：\n\n- 听讲座之前，一定要预先了解讲座主题\n\n- 下次有讲座，要占个相对靠前一点的，不然拍照都照不到\n- 狠狠学习做ppt skill···\n  - 善用标红标蓝加黑\n  - 对应的位置，用相同的颜色（引起串联\n  - 多用图表\n","tags":["meetings"]},{"title":"密码学论文分类","url":"/2024/09/19/密码学论文分类/","content":"\n三大顶会与信息安全四大顶会\n\n密码学三大顶会是指CRYPTO (美密) 、EUROCRYPT (欧密) 、ASIACRYPT (亚密) 。\n\nBig4上的隐私计算文章一般离应用更近一些，而三大密有可能是纯理论的结果。\n\nCrypto会议主要关注密码学理论和实践的最新发展，EUROCRYPT和ASIACRYPT则更加侧重于密码学的应用和实现。\n\n<!--more-->\n\nJ Cryptol 比密码学三大顶会更牛，35 年以来中国大陆作为第一单位和第一作者仅有 8 篇文章 [[信息来源\\]](https://www.view.sdu.edu.cn/info/1021/163402.htm) 。\n\n很离谱中科院竟把 ` Journal of Cryptology` 分到 3 区（大概是直接按影响因子排序然后划分分区）\n\n[IACR Fellows](https://iacr.org/fellows/) 华人只有姚期智 (Andrew Yao, 2010 当选) 和王小云 (Xiaoyun Wang, 2019 当选)\n\n信息安全四大顶会则是指CCS、NDSS、IEEE S&P和USENIX Security。这些会议是信息安全领域最具影响力的学术会议之一，涵盖了网络安全、系统安全、应用安全等方面的研究。CCS和NDSS更加关注网络和系统安全，IEEE S&P则更加关注安全协议和标准，而USENIX Security则更加关注应用安全和隐私保护。\n\n在网络与信息安全领域，CCF（中国计算机学会）推荐了一些重要的会议和期刊。在2022年，CCF推荐的A类会议包括IEEE S&P、USENIX Security、CCS和NDSS等，而推荐的A类期刊则包括IEEE TDSC、IEEE TIFS、ACM/IEEE TACoS等。这些会议和期刊都是网络与信息安全领域的重要学术交流平台，为学者们提供了分享研究成果、交流学术思想的机会。\n\n综上所述，密码学三大顶会和信息安全四大顶会是密码学和信息安全领域最权威的学术会议之一。在网络与信息安全领域，CCF推荐的A类会议和期刊也是重要的学术交流平台。参加这些会议和期刊可以促进学术交流，推动密码学和信息安全领域的发展。同时，了解这些会议和期刊的投稿要求和流程，对于想要发表研究成果的学者来说也是非常重要的。\n\n信息安全四大顶会\n\n一、[USENIX Security](https://www.usenix.org/conference/usenixsecurity14/technical-sessions)\n\n1. 介绍：USENIX 是一个计算机类会议的总称，而USENIX Security只是USENIX中的安全会议，并且USENIX Security会议涵盖的安全领域也非常多，包含：二进制安全、固件安全、取证分析、Web安全、隐私保护、恶意分析等。\n2. 论文下载：\n   会议的论文直接在官网提供下载，有很多格式(PDF、EPUB、MOBI)。\n\n二、[S&P：IEEE Symposium on Security and Privacy](http://www.ieee-security.org/TC/SP-Index.html)\n\n1. 介绍：S&P又分为两类：SP Conference Information、SP Workshops Information。\n2. 论文下载：\n   - 这个会议的演讲论文在主页以及每个会议的首页(需要点击进入每个会议网页哈)都有下载。\n   - 若学校有购买IEEE论文数据库，可以通过IEEE的会议搜索进行会议搜索。\n\n三、[CCS：ACM Conference on Computer and Communications Security](http://www.sigsac.org/ccs.html)\n\n1. 介绍：始于1993年。\n2. 论文下载：\n   会议的论文可以通过网站的链接看到历年的论文记录,当然这个论文库是在acm数据库，或者使用dblp数据库进行搜索，一般都可以搜到PDF。\n\n四、[NDSS： Network and Distributed System Security Symposium]([https://www.ndss-symposium.org)\n\n1. 介绍：\n   网络和分布式系统安全研讨会（NDSS）促进了网络和分布式系统安全的研究人员和从业者之间的信息交流。 目标受众包括那些对网络和分布式系统安全的实际方面感兴趣的人，重点是实际的系统设计和实现。 主要目标是鼓励并使互联网社区能够应用，部署和推进可用安全技术的状态。\n2. 论文下载：万能的google\n   参考链接：\n   - http://blog.ourren.com/2015/01/20/top_security_conference/\n   - https://www.jianshu.com/p/b97077272323\n\n| 类别 | 简称                                                         | 全称                                                         | 周期 | [CCF类别](https://www.ccf.org.cn/Academic_Evaluation/NIS/) |\n| ---- | ------------------------------------------------------------ | ------------------------------------------------------------ | ---- | ---------------------------------------------------------- |\n| 期刊 | [J Cryptol](https://www.letpub.com.cn/index.php?page=journalapp&view=detail&journalid=4395) | [Journal of Cryptology](https://www.iacr.org/jofc/)          | 月   | 安全-A                                                     |\n| 会议 | [CRYPTO](https://www.myhuiban.com/conference/293)            | [International Cryptology Conference](https://www.iacr.org/meetings/crypto/) | 年   | 安全-A                                                     |\n| 会议 | [EUROCRYPT](https://www.myhuiban.com/conference/294)         | [European Cryptology Conference](https://www.iacr.org/meetings/eurocrypt/) | 年   | 安全-A                                                     |\n| 会议 | [ASIACRYPT](https://www.myhuiban.com/conference/299)         | [Annual International Conference on the Theory and Application of Cryptology and Information Security](https://www.iacr.org/meetings/asiacrypt/) | 年   | 安全-B                                                     |\n| 会议 | [TCC](https://www.myhuiban.com/conference/298)               | [Theory of Cryptography Conference](https://tcc.iacr.org/)   | 年   | 安全-B                                                     |\n| 会议 | [CHES](https://www.myhuiban.com/conference/560)              | [The Conference on Cryptographic Hardware and Embedded Systems](https://www.iacr.org/meetings/ches/) | 年   | 安全-B                                                     |\n| 会议 | [FSE](https://www.myhuiban.com/conference/585)               | [The Conference on Fast Software Encryption](https://www.iacr.org/meetings/fse/) | 年   | 安全-B                                                     |\n| 会议 | [PKC](https://www.myhuiban.com/conference/300)               | [International Conference on Practice and Theory in Public Key Cryptography](https://www.iacr.org/meetings/pkc/) | 年   | 安全-B                                                     |\n| 会议 | [FC](https://www.myhuiban.com/conference/966)                | [Financial Cryptography and Data Security](http://www.ifca.ai/) | 年   | 安全-C                                                     |\n| 会议 | [CT-RSA](https://www.myhuiban.com/conference/588)            | [The Cryptographer’s Track at RSA Conference](https://ct-rsa-2023.eecs.oregonstate.edu/) | 年   | 安全-C                                                     |\n\n每天看的论文，应当分为精读和泛读\n\n精读论文一般看A类会议（选择同方向的）\n\n泛读论文一般看大致方向的（bigford，三大密，和其他安全相关的）\n\n看论文一般看AB类会议，A刊（A刊也有水的，但是可以快速入门）\n\n例如《Identity-Based Chameleon Hash  and Applications》这篇文章，就是变色龙哈希方向比较好的论文；自从区块链火了之后，变得很难投了\n\n","tags":["Crypto"]},{"title":"2024.9.18组会","url":"/2024/09/19/2024.9.18组会/","content":"\n做ppt，如果有引用则必须**注明来源**（用于让读者区分，这一段是自己写的还是引用的）；对于**重点部分**需要使用黑体或者彩色字体\n\n汇报分为一对一和一对多。如果是一对一，那就是个人汇报，需要讲的详细一点；如果是一对多，那么需要**通俗**一点，需要注意论文的 `motivation` 和 `contribution` 以及应用，对于算法部分，只需要讲哪部分分别实现了什么功能即可\n\n做汇报的两个问题：1. 看没看懂 2. 看懂之后有什么想法\n\n方法论：讲解论文哪里哪里好，需要先说传统的，然后提出本文的贡献；搞懂的过程是：自己懂 $\\rightarrow$ 让小同行懂 $\\rightarrow$ 让大同行懂 $\\rightarrow$ 让外行懂\n\n一些顶会（三大密会）公开的视频（iacr中有链接）的汇报，主要内容是吸引听众，对于技术实现的讲解并不细致\n\n汇报**别做动画**\n\n看论文一定要关注论文**作者**和**出版期刊/会议**\n\n---\n\n**小同行**：通常指的是在具体的、较为细分的研究方向上与研究者研究内容高度相关的同行。例如，假设你研究的是**密码学中的零知识证明**，那么小同行就是那些专门研究零知识证明、加密协议或相关领域的研究者。这些人往往对你的研究细节有深刻理解，能提供更具体、更专业的反馈。\n\n**大同行**：通常指的是广义上在同一学科领域内的同行，但他们的研究方向可能更广泛。比如，在你研究**密码学**时，大同行可能是其他从事网络安全、信息安全甚至理论计算机科学的研究人员。他们可能不深入了解你的具体研究方向，但对该领域有较全面的了解。\n\n**小同行**往往是你在同行评审、学术会议或合作研究中最常打交道的群体，而**大同行**则可能出现在学科评估、跨学科合作或广泛学术讨论中。\n","tags":["meetings"]},{"title":"2024年9月16日到9月22日周总结清单","url":"/2024/09/18/2024年9月16日到9月22日周总结清单/","content":"\n本周计划完成情况：\n\n1. 上次目标：下周一定精读至少一篇论文\n\n结果：未遂\n\n原因：英文论文太难读啦，英语基础薄弱；任务未分块\n\n改进：每天学习TED 30分钟；论文阅读任务分块完成\n\n2. 上次目标：完成10道密码题\n\n结果：未遂*2\n\n改进：赶进度吧···\n\n3. 算法竞赛完成题目大约3-8题\n\n原因：没有规划出固定时间\n\n改进：每天把第二天的题目列出三题，至少完成一题\n\n4. 一场codeforces比赛完成，但是尚未补题\n\n改进：cf时间太晚，以后不打了\n\n5. 一场密码学竞赛（初赛）完成，感谢师兄师姐带飞\n6. 完成25道数学题目，完成度35%\n\n原因：未能很好的利用时间\n\n改进：下周将每次的题目提前列好，不超额定计划\n\n7. 背诵0个英语单词\n\n原因：忘光了（悲\n\n改进：每天晚上背诵20个单词，不背完睡觉\n\n8. 完成0套ielts习题\n\n原因：题目太难，能力不足，需要沉淀\n\n改进：下周完成2集TED的听读（超过五遍），暂时不制定习题要求\n\n9. 每天23:30之前睡觉完成的很好，主要原因是养成习惯了（我相信其他几项也会像这一项一样好\n10. 跑步4次完美完成！\n11. 锻炼0次（悲）\n\n原因：原本把锻炼安排到晚上，但是晚上筋疲力尽，光顾着睡觉了\n\n改进：和英语背诵结合，不干完不睡觉，晚上回宿舍之后立即干！\n\n---\n\n总结：\n\n由于是第一周，完成度一般，但是略超预期；希望下周能在本周的总结上改进\n\n---\n\n心得：\n\n- zotero的整段翻译，真的不能用（不仅大相径庭，还容易误导人）；需要整段翻译可以找gpt\n- 急需养成良好习惯，就像早睡和按时跑步一样\n","tags":["misc"]},{"title":"关于ctf卷王排行榜的项目说明","url":"/2024/09/17/关于ctf卷王排行榜的项目说明/","content":"\n[开源网址](https://github.com/coperlm/ctf_juanwangbang)\n\n<!--more-->\n\n版本1.0\n\n本程序的大致原理是，使用cookie进行登录并发送GET请求，获取响应文本然后提取，得到指定用户的指定方向（categories）做题数量\n\n程序主体分为三个部分：\n\n- 文件读写的函数（控制台的输出数据仅供调试使用）\n\n- 获取用户的做题数量，此部分需要使用者自行输入api\n- 通过已知的uid，返回对应的用户名，用于生成榜单\n\n后续需要做的事情：\n\n- 优化代码看起来奇奇怪怪的部分（\n- cookie登录存在弊端\n- 优化前端设计并实现榜单生成部分\n- 按周或者按天计算刷题量（可能比较好做，但是这是另一项工作了，暂时束之高阁）\n- 实现自动化生成榜单\n- 下次不能把一个zip直接扔进仓库里去了\n\n后续版本的更新日志见 `README.md`\n","tags":["misc"]},{"title":"记录typora+hexo+next使用圆圈数字和多行latex","url":"/2024/09/16/记录typora-hexo-next使用圆圈数字和多行latex/","content":"\n在编辑 [这篇博客](https://coperlm.github.io/2024/09/15/%E8%AE%B0%E5%BD%95%E4%B8%80%E9%81%93%E6%B3%B0%E5%8B%92%E5%85%AC%E5%BC%8F%E7%9B%B8%E5%85%B3%E7%9A%84%E8%80%83%E7%A0%94%E6%95%B0%E5%AD%A6%E9%A2%98/)，遇到了两个问题\n\n<!--more-->\n\n1. 如何展示圆圈里面数字\n\n看了一下网上教程，一般是更改平台导入宏包或者使用`\\textcircled`语法，但是前者可能出现更多的问题 后者我这边本地不凑效\n\n然后看了 [这篇博客](https://blog.csdn.net/wait_for_eva/article/details/111300723) 学习到了一个切实可行的写法\n\n```\n$$\n\\enclose{circle}{1} \\\\\n\\enclose{circle}[mathcolor=\"red\"]{2} \\\\\n\\enclose{box}{3} \\\\\n\\enclose{circle,box}{4} \\\\\n\\enclose{circle}{\\enclose{box}{5}} \\\\\n\\enclose{box}{\\enclose{circle}{6}} \\\\\n\\enclose{circle}{\\enclose{circle}{7}} \\\\\n\\enclose{box}{\\enclose{box}{8}}\n$$\n```\n\n效果：\n$$\n\\enclose{circle}{1} \\\\\n\\enclose{circle}[mathcolor=\"red\"]{2} \\\\\n\\enclose{box}{3} \\\\\n\\enclose{circle,box}{4} \\\\\n\\enclose{circle}{\\enclose{box}{5}} \\\\\n\\enclose{box}{\\enclose{circle}{6}} \\\\\n\\enclose{circle}{\\enclose{circle}{7}} \\\\\n\\enclose{box}{\\enclose{box}{8}}\n$$\n补充：我安装了的包\n\n```\n$ npm list --depth=0\nhexo-site@0.0.0 C:\\Users\\coper\\Desktop\\myblog\n├── hexo-asset-image@0.0.5\n├── hexo-asset-img@1.1.0\n├── hexo-blog-encrypt@3.1.9\n├── hexo-deployer-git@4.0.0\n├── hexo-filter-mathjax@0.9.0\n├── hexo-generator-archive@2.0.0\n├── hexo-generator-category@2.0.0\n├── hexo-generator-index@4.0.0\n├── hexo-generator-searchdb@1.4.1\n├── hexo-generator-tag@2.0.0\n├── hexo-math@5.0.0\n├── hexo-renderer-ejs@2.0.0\n├── hexo-renderer-kramed@0.1.4\n├── hexo-renderer-pandoc@0.4.0\n├── hexo-renderer-stylus@3.0.1\n├── hexo-server@3.0.0\n├── hexo-theme-landscape@1.0.0\n├── hexo-wordcount@6.0.1\n└── hexo@7.3.0\n```\n\n---\n\n多行latex中，会出现多出来一对 `$$`\n\n举个例子：\n\n原文：![](记录typora-hexo-next使用圆圈数字和多行latex\\image-20240916145615417.png)\n\n实际：\n\n![](记录typora-hexo-next使用圆圈数字和多行latex\\image-20240916145629909.png)\n\n经过F12调试发现，格式和正常的也不太对\n\n然后一通摸索之后发现，把这个去掉就可以了\n\n![](记录typora-hexo-next使用圆圈数字和多行latex\\image-20240916145713065.png)\n\n然后恢复正常\n\n![](记录typora-hexo-next使用圆圈数字和多行latex\\image-20240916145755297.png)\n\n（一开始还以为是直接使用字符的数字圆圈导致的显示不正常，才去搞基于latex的数字圆圈，后来才知道是因为我多打换行了）\n","tags":["misc"]},{"title":"记录一道泰勒公式相关的考研数学题","url":"/2024/09/15/记录一道泰勒公式相关的考研数学题/","content":"\n今天，有个学长（烤盐糕守）发给了我一道树穴题（据说是刚出锅的热乎题）\n\n问题：极限 $lim_{x\\rightarrow 0}\\dfrac{(x-ln(1+x))(1-cosx)}{x^2-sin^2xcosx}=?$\n\n<!--more-->\n\n方法一：洛！\n\n计算量巨大，不做展开\n\n方法二：泰勒\n\n先放答案：\n$$\n\\begin{align*}\n  \t&\\ \\ \\ \\ \\ lim_{x\\rightarrow 0}\\dfrac{(x-ln(1+x))(1-cosx)}{x^2-sin^2xcosx}\\enclose{circle}{1}\\\\\n    &= lim_{x\\rightarrow 0}\\dfrac{(x-ln(1+x))(1-cosx)}{x^2-(x-\\frac{1}{6}x^3)^2(1-\\frac{x^2}{2})}\\enclose{circle}{2}\\\\\n    &= lim_{x\\rightarrow 0}\\dfrac{(x-ln(1+x))(1-cosx)}{\\frac{5}{6}x^4}\\enclose{circle}{3}\\\\\n    &= lim_{x\\rightarrow 0}\\dfrac{(x-(x-\\frac{x^2}{2}))\\frac{x^2}{2}}{\\frac{5}{6}x^4}\\enclose{circle}{4}\\\\\n    &= \\frac{3}{10}\\enclose{circle}{5}\n\\end{align*}\n$$\n\n\n1. 分母（式①到式②）怎么来的？\n\n因为无穷小的运算法则：$o(x^n)+o(x^m)=o(x^{min(n,m)})$，低阶（无穷小）相应的更大，而分母的泰勒展开是直接要最小项的（无穷小的运算法则让它展开为最小项），所以要用更大的那个无穷小去算\n\n对于分母 ${x^2-sin^2xcosx}$，cos的阶数是 平方，所以取 $x^4$ 作为实质的最小项（$x^2$ 消掉了）\n$$\n\\begin{align*}\n  \t&\\ \\ \\ \\ \\ lim_{x\\rightarrow 0}\\ {x^2-sin^2xcosx}\\\\\n    &= lim_{x\\rightarrow 0}\\ x^2-(x-\\frac{1}{6}x^3)^2(1-\\frac{x^2}{2})\\\\\n    &= lim_{x\\rightarrow 0}\\ x^2-(x^2-\\frac{1}{3}x^4+\\frac{1}{36}x^6)(1-\\frac{x^2}{2})\\\\\n    &容易观察到，x^2项全消了，所以最小项就是x^4\\\\\n    &= lim_{x\\rightarrow 0}\\ \\frac{1}{3}x^4 * 1 + x^2 * \\frac{x^2}{2} \\\\\n\t&= lim_{x\\rightarrow 0} \\frac{5}{6}x^4\n\\end{align*} \\\\\n$$\n如果只取sin的第一项：\n$$\n(错误示范)\\\\\n\\begin{align*}\n  \t&\\ \\ \\ \\ \\ lim_{x\\rightarrow 0}\\ {x^2-sin^2xcosx}\\\\\n    &= lim_{x\\rightarrow 0}\\ x^2-x^2(1-\\frac{x^2}{2})\\\\\n    &= lim_{x\\rightarrow 0}\\ \\frac{x^4}{2}\n\\end{align*} \\\\\n$$\n显然是不完整的，有一部分的 $x^4$ 未考虑\n\n综上所述：分母的泰勒展开是直接要最小项的，但是不是只取最终项，要完整的求出最小项（如本题中，是 $x^4$ ），根据如何得到最小项来判断泰勒展开需要多少项（其实展开多了也没事，反正不会是最小项）\n\n2. 分子（式③到式④）怎么来的？\n\n分子泰勒展开，展开~~到和分母一样的阶数~~即可⑤\n\n式子 $lim_{x\\rightarrow 0}\\dfrac{(x-ln(1+x))(1-cosx)}{\\frac{5}{6}x^4}$ 中，~~分母是四次方，所以分子也要展开到四次方~~（见后文，删除线中的内容和因果关系是错误的，但是本题中确实是展开到四次方）\n$$\n\\begin{align*}\n  \t&\\ \\ \\ \\ \\ lim_{x\\rightarrow 0}\\ (x-ln(1+x))(1-cosx) \\\\\n    &= lim_{x\\rightarrow 0}\\ (x-(x-\\frac{1}{2}x^2))\\frac{x^2}{2} \\\\\n    &= lim_{x\\rightarrow 0}\\ \\frac{x^4}{4}\n\\end{align*}\n$$\n相关例题：\n\n试计算 $lim_{x\\rightarrow 0}\\ \\frac{x-sinx}{x^3}$\n\n解：\n$$\n\\begin{align*}\n  \t&\\ \\ \\ \\ \\ lim_{x\\rightarrow 0}\\ \\frac{x-sinx}{x^3}\\\\\n  \t&\\ \\ \\ \\ \\ 因为分母的最高项是三次方，故这里sinx也展开到三次方(这句话也是错误的，见下文 \\\\\n    &= lim_{x\\rightarrow 0}\\ \\frac{x-(x-\\frac{1}{6}x^3)}{x^3}\\\\\n    &= lim_{x\\rightarrow 0}\\ \\frac{x-(x-\\frac{1}{6}x^3)}{x^3}\\\\\n    &= lim_{x\\rightarrow 0}\\ \\frac{\\frac{1}{6}x^3}{x^3}\\\\\n    &= \\frac{1}{6}\n\\end{align*} \\\\\n$$\n\n3. 为什么分子分母要等阶（⑤）？\n\n高阶无穷小+低阶无穷小=低阶无穷小\n\n所以无论展开几项都是一样的，都会只有最低阶（即展开后较靠前的部分）对于极限的计算有影响\n\n故 **无论分子分母，只需要展开到最低阶**（即最终式子剩下的最低阶）\n\n无需证明是否在极限值附近有界，只需要分子分母分别展开即可（这也是上文中删除线中句子错误的原因）\n\n4. 总结\n\n计算此类题目（无法使用等价无穷小），只需要将分子分母中可以展开的项分别展开（目的是为了消项），展开到保留（最终结果的）最小项，再进行运算比较即可\n","tags":["mathematics"]},{"title":"使用wifi发射模块串通网络的debug过程","url":"/2024/09/13/使用wifi发射模块串通网络的debug过程/","content":"\n之前尝试连接内网，实现任意两点的数据传输和互联网的访问，采取了网线和蓝牙的方式，最终以失败告终。今天新买的wifi接收/发射模块到货了，插上试了一下\n\n<!--more-->\n\n前置知识 `win+R` ，输入 `ncpa.cpl` 打开 `网络连接`\n\n刚插上会多一个这个图标\n\n![](使用wifi发射模块串通网络的debug过程\\image-20240913194954282.png)\n\n打开热点会多一个这个图标\n\n![](使用wifi发射模块串通网络的debug过程\\image-20240913194857209.png)\n\n使用第二台设备直接连接，会出现 `正在搜索ip` 等字样\n\n百度一下，发现需要打开共享\n\n右键需要共享的网络点击属性\n\n![](使用wifi发射模块串通网络的debug过程\\image-20240913200303258.png)\n\n点击允许共享，`家庭网络连接`填写 **发送** 热点信号的网络（模块）\n\n![](使用wifi发射模块串通网络的debug过程\\image-20240913201038762.png)\n\n**如果没有这个选项**，需要用其他奇技淫巧来解决（别问我怎么知道的）\n\n咱买的wifi模块，不是也能发射也能接收嘛\n\n你先别用有线网（以太网）线连接电脑，先开一下手机热点，连上电脑\n\n然后（我这台电脑）在 `WLAN` 里就出现了 `本地连接* 11` 的选项\n\n不要断，立即切换到以太网，然后就成功了\n\n这个是最终的效果\n\n![](使用wifi发射模块串通网络的debug过程\\image-20240913201351937.png)\n\n重新启动了电脑，依旧可以正常连接（学计算机的不会真的有人关电脑吧（bushi））\n","tags":["misc"]},{"title":"2024.9.11组会","url":"/2024/09/11/2024.9.11组会/","content":"\n- 汇报，不要讲得太深\n\n- 身份基加密IBE：基于身份集的匹配，n个属性满足其中的k个即可\n\n  虹膜：成本高，抗干扰；指纹：成本低，不抗干扰\n\n- 功能上的优化比性能上的优化简单得多\n\n- 做PPT的一个例子：最上面是一个知识点，正下方是一个图表（例子或流程图）用于说明这个知识点（作为旁证）\n\n- 写综述：引用的论文需要超过100，一作负责下载和分类所有的论文，并给大家打个样（表格）\n","tags":["meetings"]},{"title":"如何阅读paper","url":"/2024/09/11/如何阅读paper/","content":"\n2024.11.06二编\n\n多读解决一切问题\\~\n\n---\n\n2024.9.6下午，我开始干啃《Chameleon Hashing and Signature》这篇文章；十分钟之后，感觉头顶冒烟了~\n\n如果单单阅读 Abstract 和 Introduction 部分，虽然可以快速领会文章的大意，但是其内容对读者的提升同样巨大\n\n故总结了几篇高推荐文章，作为今后论文阅读的指导\n\n<!--more-->\n\n论文获取：\n\n- 询问导师和同门\n- Google Scholar运用合适的关键词收集30篇左右论文（高引用量论文优先收集）\n- 高引论文的参考文献\n\n论文如何阅读：\n\n一篇期刊论文，主要分成三个部分。\n\n1. Abstract：\n\n这篇论文的：主要贡献、方法特色与主要内容。\n\n只看 Abstract 和 Introduction 判断篇论文的重点和你的研究有没有直接关联，从而决定要不要把它给读完\n\n2. Introduction：\n\n功能：介绍问题的背景和起源，交代前人在这个题目上已经有过的主要贡献，说清楚前人留下来的问题，以及在这个背景下这篇论文想解决的问题和它的意义。\n\n对初学的学生而言，从这里可以了解以前研究的概况。先把跟你题目可能相关的论文收集个 30～40篇，每篇都只读Abstract 和 Introduction，而不要读 Main Body（本文），只在必要时稍微参考一下后面的 Illustrative examples和 Conclusions，直到你能回答下面这四个问题：\n\n- （2A）在这领域内最常被引述的方法有哪些？\n- （2B）这些方法可以分成哪些主要派别？\n- （2C）每个派别的主要特色（含优点和缺点）是什么？\n- （2D）这个领域内大家认为重要的关键问题有哪些？有哪些特性是大家重视的优点？有哪些特性是大家在意的缺点？这些优点与缺点通常在哪些应用场合时会比较被重视？在哪些应用场合时比较不会被重视？\n\n问题是，你怎么去找到这最初的30～40篇论文？有一种期刊论文叫做review paper，专门在一个题目下面整理出所有相关的论文，并且做简单的回顾。你可以在搜寻 Compendex 时在 keywords 中加一个review而筛选出这类论文。然后从相关的数篇review paper 开始，从中根据 title 与 Abstract 找出你认为跟你研究题目较相关的30～40篇论文。\n\n通常只要你反复读过该领域内30～40篇论文的Abstract 和 Introduction，你就应该可以从Introduction的评论中回答（2A）和（2B）这两个问题。尤其要记得，当你阅读的目的是要回答（2A）和（2B）这两个问题时，你一定要先挑那些 Introduction写得比较有观念的论文念（很多论文的Introduction 写得像流水帐，没有观念，这种论文刚开始时不要去读它）。假如你读过30～40篇论文的 Abstract 和 Introduction之后，还是回答不了（2C），先做下述的工作。\n\n\n\n你先根据（2A）的答案，把这领域内最常被引述的论文找齐，再把他们根据（2B）的答案分成派别，每个派别按日期先后次序排好。然后，你每次只重新读一派的 Abstract 和 Introduction（必要时简略参考内文，但目的只是读懂Introduction内与这派有关的陈述，而不需要真的看懂所有内文），照日期先后读 ，读的时候只企图回答一个问题：这一派的创意与主要诉求是什么？这样，你逐派逐派地把每一派的Abstract 和 Introduction 给读完，总结出这一派主要的诉求 、方法特色和优点（每一篇论文都会说出自己的优点，仔细读就不会漏掉）。\n\n其次，你再把这些论文拿出来，但是只读Introduction，认真回答下述问题：每篇论文对其它派别有什么批评？然后你把读到的重点逐一记录到各派别的“缺点”栏内。\n\n\n\n通过以上程序，你就应该可以掌握到（2A）、（2B）和（2C）三个问题的答案。这时你对该领域内主要方法、文献之间的关系算是相当熟稔了，但是你还是只仔细读完Abstract 和 Introduction而已，内文则只是笼统读过。\n\n\n\n这时候，你已经掌握到这领域主要的论文，你可以用这些论文测试看看你用来搜寻这领域论文的 keywords 到底恰不恰当，并且用修正过的 keywords 再搜寻一次论文，把这领域的主要文献补齐，也把原来30～40篇论文中后来发现关系较远的论文给筛选掉，只保留大概20篇左右确定跟你关系较近的文献。如果有把握，可以甚至删除一两个你不想用的派别（要有充分的理由），只保留两、三个派别（也要有充分的理由）继续做完以下工作。\n\n\n\n然后你应该利用（2C）的答案，再进一步回答一个问题（2D）：\n\n- **这个领域内大家认为重要的关键问题有哪些？**\n- **有哪些特性是大家重视的优点？**\n- **有哪些特性是大家在意的缺点？**\n- **这些优点与缺点通常在哪些应用场合时会比较被重视？**\n- **在哪些应用场合时比较不会被重视？**\n\n\n\n然后，你就可以整理出这个领域（研究题目）主要的应用场合，以及这些应用场合上该注意的事项。\n\n\n\n最后，在你真正开始念论文的 main body 之前，你应该要先根据（2A）和（2C）的答案，把各派别内的论文整理在同一个档案夹里，并照时间先后次序排好。然后依照这些派别与你的研究方向的关系远近，一个派别一个派别地逐一把各派一次念完一派的 main bodies。\n\n\n\n3. Main body（含simulation and/or experimental examples）：\n   \n\n在你第一次有系统地念某派别的论文 main bodies 时，你只需要念懂：\n\n- （3A）这篇论文的主要假设是什么（在什么条件下它是有效的），并且评估一下这些假设在现实条件下有多容易（或多难）成立。愈难成立的假设，愈不好用，参考价值也愈低。\n- （3B）在这些假设下，这篇论文主要有什么好处。\n- （3C）这些好处主要表现在哪些公式的哪些项目的简化上。至于整篇论文详细的推导过程，你不需要懂。除了三、五个关键的公式（最后在应用上要使用的公式，你可以从这里评估出这个方法使用上的方便程度或计算效率，以及在非理想情境下这些公式使用起来的可靠度或稳定性）之外，其它公式都不懂也没关系，公式之间的恒等式推导过程可以完全略过去。假如你要看公式，重点是看公式推导过程中引入的假设条件，而不是恒等式的转换。\n- （3D）这一派主要的缺点有哪些。\n\n但是，在你开始根据前述问题念论文之前，你应该先把这派别所有的论文都拿出来，逐篇粗略地浏览过去（不要勉强自己每篇或每行都弄到懂，而是轻松地读，能懂就懂，不懂就不懂），从中挑出容易念懂的 papers，以及经常被引述的论文。然后把这些论文按照时间先后次序依序念下去。记得：你念的时候只要回答（3A）、（ 3B）、（3C）三个问题就好，不要念太细。\n\n这样念完以后，你应该把这一派的主要发展过程，主要假设、主要理论依据、以及主要的成果做一个完整的整理。其次，你还要在根据（2D）的答案以及这一派的主要假设，进一步回答下一个问题：（3D）这一派主要的缺点有哪些。最后，根据（ 3A）、（3B）、（3C）、（3D）的答案综合整理出：这一派最适合什么时候使用，最不适合什么场合使用。　　\n\n当你是生手的时候，你要评估一个方法的优缺点时，往往必须要参考它Examples。但是，要记得：老练的论文写作高手会故意只 present 成功的案例而遮掩失败的案例。所以，simulation examples and/or experiments 很棒不一定表示这方法真的很好。你必须要回到这个方法的基本假设上去，以及他在应用时所使用的主要公式（resultant equations）去，凭自己的思考能力， 并且参考（2C）和（2D）的答案，自己问问看：当某某假设在某些实用场合上无法成立时，这个方法会不会出什么状况？猜一猜，预测一下这个方法应该会在哪些条件下（应用场合）表现优异，又会在哪些条件下（应用场合）出状况？根据这个猜测再检验一次simulation examples and/or experiments，看它的长处与短处是不是确实在这些examples 中充分被检验，且充分表现出来。\n\n那么，你什么时候才需要弄懂一篇论文所有的恒等式推导过程，或者把整篇论文细细读完？**NEVER！**你只需要把确定会用到的部分给完全搞懂就好，不确定会不会用到的部分，只需要了解它主要的点子就够了。\n\n\n\n---\n\nReference:\n\n[一文教你如何快速高效阅读Paper（硕士生版）](https://www.jiqizhixin.com/articles/2019-02-22-5)","tags":["Crypto"]},{"title":"荔枝橙味拱腰觅马糕守","url":"/2024/09/11/荔枝橙味拱腰觅马糕守/","content":"\n本篇文章旨在记录笔者阅读《公钥密码方案构造及安全证明的知识要点和方法论》的学习总结和收获\n\n<!--more-->\n\n![](荔枝橙味拱腰觅马糕守\\公钥密码方案构造及安全证明的知识要点和方法论.png)\n\n## Introduction\n\n- 归纳总结了构造可证明安全的公钥密码方案所需掌握的知识要点\n\n  - 基本概念\n\n  - 数学基础\n\n  - 简单问题和困难问题\n  \n  - 算法\n  \n  - 安全规约证明\n  \n  - -> 学习方案构造以及安全证明不可或缺的基础部分 需要最先掌握\n  \n- 学习构造可证明安全的公钥密码方案的方法\n\n  - 方案构造学习（如何学习方案构造）\n\n    - 算法定义和安全模型定义\n\n    - 经典方案推荐\n\n    - 尝试发现方案构造错误\n\n    - -> 使读者具备构造方案的基本能力\n\n    - -> 方案的构造与方案的安全证明相互影响，在缺乏安全证明的学习下，读者尚无能力构造可证明安全的方案\n\n  - 安全证明学习（如何学习安全证明，规约相关）\n\n    - 概念学习\n\n    - 证明训练\n\n    - 经典方案推荐\n\n    - 尝试发现证明错误\n\n  - 构造可证明安全密码方案（对构造可证明安全密码的方案方法的建议）\n\n    - 文献阅读\n\n    - 尝试方案构造和安全证明\n\n- 30个经典方案及其证明用于该阶段的练习\n\n\n\n## 知识要点\n\n两本书籍《Modern Cryptography: Theory and Practice》，《INTRODUCTION TO  MODERN CRYPTOGRAPHY》\n\n### 基本概念\n\n- 复杂性理论\n\n  - 时间复杂度\n\n    - L-notation(Landau Notation)：也成为渐进符号，主要用于描述算法的时间和空间复杂度的增长趋势；包括 $O()\\ \\Omega()\\ \\Theta()$，分别表示算法在 最坏、最好和平均情况下的时间或空间复杂度；$\\Omega()$ 表示算法的 下界，$\\Theta()$ 表示算法的 精确界。\n    - Probabilistic Polynomial Time (PPT)：指可以在多项式时间内通过概率算法解决的问题。概率算法在某些情况下可能会给出错误的答案，但运行时间是多项式级别的。如：蒙特卡洛算法。\n    - Sub-exponential Time：亚指数时间，指的是算法的运行时间比指数增长慢但比多项式时间快，通常表示为 $2^{o(n)}$，是介于多项式时间和指数时间之间的复杂度。如：$n^{log\\ n}$是亚指数时间，但 $2^n$ 是指数时间。\n    - Exponential Time：指数时间，指算法的运行时间随着输入规模 $n$ 的增加呈指数增长，常用形式如 $O(2^n)$ 或 $O(c^n)$ （其中$ c>1$）。这类算法运行时间增长非常快。如：旅行商问题 $O(n!)$。\n\n  - 计算复杂性\n\n    - P (Polynomial Time)：多项式时间类。所有能够在多项式时间内解决的问题的集合。如：快速排序和归并排序。\n\n    - NP (Nondeterministic Polynomial Time)：非确定性多项式时间类。可以容易验证解是否正确，但难以找解。如：子集和问题，如果给定一个可能的解，可以快速验证它是否正确，但找到该解的过程可能非常耗时。如：起点到终点是否有至少一条小于100个单位长度的路线。（所有P类问题都是NP问题）\n\n    - NPC (NP-Complete)：NP 完全问题。这是一类最难的 NP 问题，所有 NP 问题都可以通过多项式时间归约到这类问题。如：旅行商问题（判定版本）、3-SAT 问题\n\n    - NP-Hard ：NP难问题至少和NP问题一样难，可能更难；NP难问题不一定是NP问题，也就是说，它们的解不一定能够在多项式时间内验证。如：旅行商问题、停止问题（Halting Problem）（给定一个程序和输入，判断程序在这个输入上是否会停止）\n\n  - 计算模型相关术语\n\n    - Computation Model (计算模型)：这是定义如何进行计算的理论框架，用于定义什么可以被计算和如何计算。如“”模型包括图灵机、随机存取机（RAM）和有限状态自动机等。\n    - Turing Machine (图灵机)：由计算理论之父艾伦·图灵提出的抽象计算模型。由一个无限长的纸带（表示内存）和一个读写头组成。图灵机的每一步计算由状态和符号决定，能够通过改变符号和移动读写头来执行计算。图灵机是复杂性理论中用于定义可计算性和时间复杂度的基础模型。\n\t\n- 攻击\n\n  - Birthday Attack（生日攻击）\n    - 攻击对象：哈希函数\n    - 攻击目标：找到两个不同的输入具有相同的哈希值（哈希碰撞）。\n    - 例子：对 MD5 哈希函数进行生日攻击，攻击者可能找到两个不同的消息产生相同的哈希值，从而进行数字签名伪造或文件篡改。\n\n  - Man-in-the-middle Attack (中间人攻击)\n\n    - 攻击对象：通信协议（特别是缺乏认证的加密协议）\n    - 攻击目标：拦截并篡改双方之间的通信，而通信双方并不察觉。\n    - 例子：攻击者在 Alice 和 Bob 之间建立两个独立的加密会话，拦截并解密他们发送的消息，然后篡改内容再发送给对方。\n  - Brute-force Attack (暴力破解攻击)\n    \n    - 攻击对象：密码或加密密钥\n    - 攻击目标：通过穷举所有可能的组合找到密码或密钥。\n    - 例子：对使用短位数密码（如 4 位数字 PIN）的系统，攻击者可以尝试所有 10000 种可能的组合，直到找到正确的密码。\n    \n  - Eavesdropping Attack (窃听攻击)\n    \n    - 攻击对象：未加密或不安全的通信\n    - 攻击目标：窃听通信内容，获得敏感信息。\n    - 例子：攻击者在未加密的 Wi-Fi 网络上捕获用户发送的明文密码或信用卡号。\n    \n  - Meet-in-the-middle Attack\n    \n    - 攻击对象：双重加密系统（如 2DES）\n    - 攻击目标：通过分别攻击加密的前半部分和后半部分，减少破解加密所需的时间。\n    - 例子：攻击 2DES，攻击者使用一个中间状态同时攻击加密的前半部分（第一轮加密）和后半部分（第二轮加密），从而减少暴力破解的时间复杂度。\n    \n  - Collusion Attack (共谋攻击)\n    \n    - 攻击对象：多方协议或共享资源的系统\n    - 攻击目标：多个恶意方合作以欺骗系统或窃取信息。\n    - 例子：在分布式投票系统中，多方共谋可以合谋修改投票结果或操纵选举。\n    \n  - Side-channel Attack (旁道攻击)\n    \n    - 攻击对象：硬件实现的加密算法\n    - 攻击目标：通过观察硬件泄露的信息（如电磁辐射、功耗、运行时间）来推测密钥或加密数据。\n    - 例子：攻击者通过测量加密设备的功耗，推测出设备运行不同指令时的耗电差异，从而推测出加密密钥。\n    \n  - Statistical Attack (统计攻击)\n    \n    - 攻击对象：加密算法或协议\n    - 攻击目标：通过分析加密文本或通信中不同部分的统计特性来破译密文或找到加密弱点。\n    - 例子：攻击者通过分析加密文本中字符的频率，破译简单替换密码，因为某些字母（如英文中的 “e”）出现频率较高。\n    \n  -  Replay Attack (重放攻击)\n    \n    - 攻击对象：认证协议或通信协议\n    - 攻击目标：通过截获和重放有效的数据包来伪装合法用户。\n    - 例子：攻击者截获并重放用户登录系统时发送的认证请求，从而在不知晓密码的情况下再次登录。\n    \n  - Rainbow Attack (彩虹表攻击)\n    \n    - 攻击对象：加密的密码或哈希值\n    - 攻击目标：通过使用预先计算的哈希表（彩虹表）来反向查找密码。\n    - 例子：攻击者使用彩虹表匹配存储的 MD5 哈希值，找到对应的明文密码，从而绕过系统的哈希加密机制。\n  \n- 基本工具\n\n  - 单向函数 (One-way Function)\n  - 输入：任意大小的输入值（通常是整数或比特串）。\n  \n  - 输出：固定长度或与输入长度相关的输出值。\n  \n  - 输入输出关系：单向函数易于从输入计算输出，但从输出反推出输入非常困难（计算上不可行）。\n  \n  - 应用场景：单向函数是许多密码学协议（如哈希函数、数字签名、密码算法）的基础。常见应用包括：\n  \n    - 密码散列\n      - 认证机制中的口令验证\n    - 零知识证明中的承诺方案\n  \n- 陷门单向函数 (Trapdoor One-way Function)\n    - 输入：任意大小的输入值和一个“陷门”信息（通常是密钥）。\n    \n    - 输出： 固定长度或与输入相关的输出值。\n\n    - 输入输出关系：在没有陷门信息的情况下，从输出推回输入非常困难；而有陷门信息时，可以有效地反推出输入。\n\n    - 应用场景：陷门单向函数广泛应用于公钥加密和数字签名。例如：\n\n      - RSA加密：只有拥有私钥的用户能够轻松解密用公钥加密的消息。\n  - 数字签名：签名者使用私钥进行签名，验证者使用公钥验证签名。\n  \n- 伪随机函数 (Pseudo-random Function, PRF)\n  \n  - 输入：一个密钥和一个输入值（通常是比特串）。\n    - 输出：一个伪随机的输出值，类似于随机数生成器的输出。\n  - 输入输出关系：PRF 生成的输出看起来像随机的，但它是确定的，即对于同一个密钥和输入，输出总是相同的。只有拥有密钥的用户能够区分伪随机输出和真实随机输出。\n    - 应用场景：PRF 被广泛用于对称密钥加密、消息验证码 (MAC)、伪随机数生成、以及密钥派生函数 (KDF) 中。\n  \n- 哈希函数 (Hash Function)\n  \n  - 输入：任意长度的输入数据。\n  \n    - 输出： 固定长度的哈希值。\n  \n    - 输入输出关系：哈希函数将任意长度的输入映射到固定长度的输出。理想的哈希函数具有抗碰撞性，即找到两个不同输入映射到同一输出的概率应该非常低。\n\n    - 应用场景：\n\n      - 数据完整性：用于校验数据是否被篡改（如SHA-256用于数字签名）。\n    - 密码存储：存储用户密码的哈希值，而不是明文密码。\n      - 区块链：用来确保区块内容的不可篡改性。\n\n  - 硬核谓词 (Hard-core Predicates)\n  - 输入：单向函数的输入值和输出值。\n    - 输出： 比特值（0或1）。\n  - 输入输出关系：对于给定的单向函数 $f$ 和输入 $x$，计算 $f(x)$ 很容易，但对于某些特殊比特（称为硬核谓词），即使知道$f(x)$，要猜出该比特的值也非常困难。\n    - 应用场景：硬核谓词用于设计更加安全的加密协议，如流密码生成器中的位选择机制。常见的硬核谓词包括 Blum-Micali 伪随机生成器中的二次剩余判定。\n\n  - 熵函数 (Entropy Function)\n    - 输入：概率分布或随机变量。\n  \n  - 输出：熵值（衡量随机变量的不确定性或信息量，通常以比特为单位）。\n  \n  - 输入输出关系：熵函数给出输入随机变量的不确定性度量，熵越大，信息越难预测；熵越小，信息越确定。\n  \n    - 应用场景：\n  \n      - 密码安全性评估：用于评估随机数生成器的质量。\n    - 信息论：熵函数用于分析通信系统中传递信息的有效性。\n      - 数据压缩：根据数据的熵来决定最佳的压缩算法，如Huffman编码。\n\n- 认证\n\n- 加密\n\n- 模型\n\n  - Random Oracle Model（随机预言机模型）\n\n    - 概念：将哈希函数视为一个理想化的随机预言机，即每次查询哈希函数时都会返回一个随机值，不考虑实际哈希函数的实现细节。\n    - 应用场景：这个模型通常用于证明密码方案的安全性，尤其是在设计签名算法、加密方案或零知识证明时，随机预言机模型简化了安全分析。例如，很多实际使用的加密方案，如RSA-OAEP和HMAC，在这个模型下被证明是安全的。\n    - 优点：可以简化安全性证明并提供很强的安全性保证。\n    - 局限性：实际中的哈希函数并不是理想的随机预言机，因此在现实中可能存在攻击漏洞。\n\n  - Standard Model（标准模型）\n    - 概念：不依赖随机预言机等理想化的假设，而是依赖于基于已知的数学问题（如离散对数、因数分解等）的假设进行安全性证明。\n    - 应用场景：标准模型下的安全性证明更接近现实，通常用于密码学协议的严格安全性分析。例如，基于困难数学问题（如RSA、Diffie-Hellman）的加密和签名方案，通常在标准模型下证明其安全性。\n    - 优点：提供更为现实的安全性保证，避免使用理想化的假设。\n    - 局限性：安全性证明往往更复杂，并且可能导致效率低下的方案。\n    \n  - Common Reference String Model（公共参考字符串模型）\n    - 概念：在这种模型中，所有参与方在协议开始之前都会共享一个公共的随机字符串，该字符串由一个可信方生成。\n    - 应用场景：该模型经常用于零知识证明系统和多方安全计算（MPC）中。公共参考字符串用于保证协议的正确性和安全性。例如，Groth-Sahai证明系统就依赖于这个模型。\n    - 优点：简化了复杂密码协议的设计，并提供强大的安全性。\n    - 局限性：公共参考字符串需要由一个可信第三方生成，如果其生成过程不安全，整个系统的安全性将受到威胁。\n    \n  - Security Model（安全模型）\n    - 概念：安全模型是用来定义密码协议在特定攻击场景下的安全性。常见的安全模型包括选择密文攻击（CCA）安全模型、选择明文攻击（CPA）安全模型、完全前向安全模型等。\n    - 应用场景：不同的安全模型适用于不同类型的密码协议。例如，针对加密协议的选择密文攻击（CCA）安全模型广泛应用于分析公共密钥加密方案的安全性，如RSA、ElGamal等。选择明文攻击（CPA）模型则用于较弱的攻击假设下的分析。\n    - 优点：通过不同的攻击模型，研究者可以更精细地评估协议在不同攻击情境下的安全性。\n    - 局限性：模型之间的安全性可能不一致，需要针对特定的威胁模型进行全面分析。\n    \n  - Generic Group Model（通用群模型）\n    - 概念：假设在这个模型中，攻击者不能直接操作群元素，只能通过一个黑盒进行群运算。这种模型假设攻击者无法利用群的具体结构信息，而只能使用通用的群操作。\n    - 应用场景：通用群模型通常用于证明基于群的密码协议（如椭圆曲线密码学、Diffie-Hellman等）的安全性。这个模型对分析与离散对数问题相关的加密方案（如Diffie-Hellman协议）特别有用。\n    - 优点：简化了分析过程，并能提供对基于群的方案的广泛适用性。\n    - 局限性：在现实中，攻击者可能能够利用群结构的具体性质，从而使得通用群模型中的安全性证明无法完全反映实际的安全性。\n  \n- 第三方实体\n\n  - Key Distribution Center (KDC) — 密钥分发中心\n\n    - 功能：KDC 负责在网络中的各方之间分发对称密钥。它生成并安全地传输会话密钥，确保各方能够使用对称加密进行安全通信。KDC 通常是可信的中心实体，负责管理密钥的分发和更新。\n    - 应用场景：主要用于对称密钥加密系统中，尤其是在需要多个用户之间进行安全通信的环境下，如：\n      - Kerberos 协议：KDC 在 Kerberos 协议中生成会话密钥并分发给通信双方，以便实现身份验证和加密通信。\n      - 企业内部网络安全：KDC 用于集中管理员工设备之间的加密通信。\n    - 优势：减少了各方之间建立安全通信时需要直接共享密钥的风险。\n    - 局限性：KDC 成为单点故障，如果被破坏或泄露，整个网络的安全将受到威胁。\n\n  - Key Generation Center (KGC) — 密钥生成中心\n\n    - 功能：KGC 是负责生成公钥和私钥对的中心实体，通常用于基于身份的加密（Identity-Based Encryption, IBE）系统中。KGC 基于用户的身份信息（如电子邮件地址）生成私钥，并分发给用户。\n    - 应用场景：主要用于基于身份的加密系统，特别是在分布式和多用户环境中，如：\n      - 电子邮件加密：用户通过其电子邮件地址作为公钥进行加密，KGC 提供私钥解密信息。\n      - 无需证书的加密系统：KGC 的存在消除了使用传统公钥基础设施（PKI）系统中对证书的需求。\n    - 优势：无需管理公钥证书，简化了加密系统的管理。\n    - 局限性：KGC 必须完全可信，因为它能生成所有用户的私钥，可能导致潜在的隐私和安全问题。\n\n  - Private-Key Generator (PKG) — 私钥生成器\n\n    - 功能：PKG 是类似于 KGC 的实体，负责生成用户的私钥。它主要用于基于身份的加密系统中，用户的私钥是由 PKG 根据用户的身份信息生成的。PKG 通常也会生成公钥，但这些公钥是基于用户的身份生成的，而不需要显式地存储或分发。\n    - 应用场景：用于身份加密系统和签名方案，如：\n      - Shamir 的身份加密系统：PKG 为用户生成私钥，用户身份作为公钥。\n      - Pairing-based Cryptography：在基于双线性对的密码学系统中，PKG 负责生成和管理密钥。\n    - 优势：消除传统 PKI 系统对证书管理的需求，简化了密钥管理过程。\n    - 局限性：与 KGC 相同，PKG 必须是完全可信的，否则会导致整个系统的安全性崩溃。\n\n  - Certificate Authority (CA) — 证书颁发机构\n\n    - 功能：CA 是公钥基础设施（PKI）中的核心实体，负责验证用户的身份并颁发数字证书。数字证书包含用户的公钥及其身份信息，并由 CA 签名，以证明该公钥确实属于该用户。CA 还负责吊销证书、更新证书和维护证书的有效性。\n    - 应用场景：CA 广泛应用于互联网安全、身份验证和加密通信场景中，如：\n      - HTTPS/TLS 协议：CA 颁发 SSL/TLS 证书，确保用户访问的网站是可信的。\n      - 电子邮件加密（如 S/MIME）：CA 颁发数字证书用于电子邮件加密和签名，确保通信的真实性和机密性。\n    - 优势：通过数字证书验证公钥的真实性，确保用户之间可以安全通信。\n    - 局限性：如果 CA 被攻击或误发不安全的证书，整个系统的信任链条会被打破。此外，CA 通常是高度集中化的，这可能导致管理和成本问题。\n\n  - Trust Third Party (TTP) — 可信第三方\n\n    - 功能：TTP 是一种在通信双方之间建立信任的第三方实体，通常负责验证双方身份并促进安全通信。TTP 可以用于密钥分发、身份验证、数字签名认证等场景。\n    - 应用场景：TTP 常用于分布式系统、电子商务、合同签署等场景中，如：\n      - 电子合同签名：TTP 验证各方签署的数字签名，并确保合同的真实性和有效性。\n      - 在线身份验证：TTP 在用户和服务器之间充当中介，帮助进行身份验证。\n    - 优势：通过引入一个可信的第三方，简化了安全通信的流程，减少了直接信任的需求。\n    - 局限性：TTP 是一个集中化的实体，如果它被破坏或失去信任，整个系统的安全性都会受到影响。\n  \n- 协议\n\n  - Key Exchange Protocol — 密钥交换协议\n     - 应用场景：当 Alice 和 Bob 需要安全通信时，他们需要协商出一个共享密钥，其他第三方无法得知此密钥。典型的例子包括 Diffie-Hellman 密钥交换和 ECDH（椭圆曲线 Diffie-Hellman）。\n     - 解决的问题：\n       - 安全共享密钥：协议确保参与方协商出一个共享密钥，用于后续加密通信。\n       - 防止中间人攻击：通过认证机制（如公钥基础设施）防止恶意第三方伪装成通信参与者。\n     - 示例：Alice 和 Bob 在一个不安全的网络上协商生成共同的密钥，双方使用密钥进行后续加密通信，避免第三方窃听。\n  \n  - Fair Exchange Protocol — 公平交换协议\n     - 应用场景：公平交换用于确保两方在协议中公平交换某种数字资产或信息，比如数字签名、加密货币、合同等。典型的应用场景包括电子商务中的支付协议和数字签名的公平交换。\n     - 解决的问题：\n       - 确保交易公平：如果 Alice 提供了她的签名或信息，Bob 也必须在相同条件下提供他的。\n       - 防止单方违约：保证交易的一方无法单方面获得他人的资产或信息而不履行自己的部分。\n     - 示例：在数字合同签署中，Alice 和 Bob 可以使用公平交换协议确保签署过程公平，即 Alice 和 Bob 都签署合同或都不能签署。\n  \n  - Secret Sharing Protocol — 秘密共享协议\n     - 应用场景：当一个秘密需要在多个参与方之间分配并保密时使用，通常应用于分布式系统、银行加密、文件恢复等场景。Shamir's Secret Sharing 是其中的经典协议。\n     - 解决的问题：\n       - 安全存储秘密：允许将秘密分成多个部分，每个参与者只拥有一部分，只有足够多的参与者联合才能恢复秘密。\n       - 容错性：即使部分参与者失去密钥，秘密仍然可以恢复。\n     - 示例：一个公司董事会需要投票决策，他们可以使用秘密共享协议将密钥分发给多名董事，只有达成多数票数后才能解密决策结果。\n  \n  - Oblivious Transfer Protocol — 遗忘传输协议\n     - 应用场景：当一方希望从另一方获取部分信息，但不希望让另一方知道他选择了哪部分信息时使用。常见于隐私保护机制、密码学应用和安全多方计算中。\n     - 解决的问题：\n       - 隐私保护：在 Alice 从 Bob 获取信息的过程中，Bob 无法知道 Alice 选择了哪些信息。\n       - 防止过多泄露：确保 Alice 只获取了她请求的部分信息，而不是 Bob 所有的信息。\n     - 示例：Alice 想从 Bob 那里选择一本书的某一页内容，但 Bob 不知道 Alice 想要哪一页，Alice 也不会看到除她选择之外的其他页。\n  \n  - Commitment Protocol — 承诺协议\n     - 应用场景：承诺协议用于在信息未公开之前确保其不可更改，常用于加密签名、选举系统、博弈论等场景。\n     - 解决的问题：\n       - 防篡改：承诺的值在揭示之前不能更改。\n       - 保密性：承诺值在揭示之前是保密的，不被他人知道。\n     - 示例：在电子投票系统中，Alice 对她的投票进行承诺，在投票结束后再揭示，这样她无法在投票期间更改票选。\n  \n  - Multi-party Computation (MPC) — 多方计算协议\n     - 应用场景：MPC 允许多个参与方在不暴露其输入的情况下，联合计算某一函数的结果。常见应用包括隐私保护数据分析、分布式系统和财务分析。\n     - 解决的问题：\n       - 隐私计算：参与者可以合作完成计算而不暴露各自的输入数据。\n       - 公平性：即使有恶意参与者，也能保证计算结果正确。\n     - 示例：多家银行可以在不分享客户数据的情况下，通过 MPC 计算某个统计数据，例如总交易额。\n  \n  - Zero-Knowledge Proof (ZKP) — 零知识证明\n     - 应用场景：ZKP 允许一方（证明者）向另一方（验证者）证明她知道某个秘密信息，但不会泄露该信息本身。ZKP 常用于身份验证、加密货币、区块链技术中。\n     - 解决的问题：\n       - 安全验证：证明者可以证明她知道某个秘密或满足某个条件，而无需泄露秘密。\n       - 隐私保护：在身份验证或认证过程中，敏感信息不会泄露。\n     - 示例：Alice 可以通过 ZKP 向 Bob 证明她知道一个密码，而无需告诉 Bob 这个密码是什么。\n  \n- 技术方法\n\n  - Accumulator\n       - 基本原理：Accumulator 是一种将多个元素“累积”成一个单一值的数据结构，并允许验证某个元素是否包含在该累积值中的过程。Accumulator 的一个重要特性是它可以在不存储所有元素的情况下进行验证。\n       - 应用场景：\n         - 数字签名和零知识证明：Accumulator 常用于密码学协议中，如零知识证明和数字签名中，用于高效的集合成员身份验证。\n         - 区块链：Accumulator 可以用于验证某个交易或数据是否存在于一个更大的数据集（如区块链中的交易集）。\n\n  - Bloom Filter\n       - 基本原理：Bloom Filter 是一种空间高效的数据结构，用于测试一个元素是否在一个集合中。它允许有一定的错误率（假阳性），但不会出现假阴性。这意味着某个元素可能被错误地判断为在集合中，但如果 Bloom Filter 判断某个元素不在集合中，那么该判断一定是正确的。\n       - 应用场景：\n         - 数据库查询：在大规模数据查询系统中用于加速查询过程，快速判断某个元素是否在数据库中。\n         - 网络缓存：在内容分发网络（CDN）中，Bloom Filter 用于高效判断是否需要缓存某些内容。\n\n  - Hash Chain\n       - 基本原理：Hash Chain 是通过反复对一个初始值进行哈希运算生成的一系列哈希值链。每个链中的值通过对前一个值进行哈希运算获得。其性质是前面的哈希值很容易计算，但无法从后面的哈希值推断前面的哈希值。\n       - 应用场景：\n         - 一次性密码：在身份验证系统中使用 Hash Chain 生成一次性密码（OTP），每个密码只能使用一次，增强安全性。\n         - 区块链：Hash Chain 用于区块链中数据的不可篡改性，通过链式的哈希保证数据的完整性和安全性。\n\n  - Hash Tree (Merkle Tree, Binary Hash Tree)\n       - 基本原理：Hash Tree（哈希树）是一种树形结构，其中每个叶节点是数据的哈希值，非叶节点是其子节点的哈希值。Merkle Tree 是一种常见的哈希树，用于验证大规模数据集的完整性。通过树的结构，可以快速验证某个特定数据是否在大集合中。\n       - 应用场景：\n         - 区块链：Merkle Tree 被广泛应用于区块链中，用于验证块中交易的完整性，允许节点高效验证交易是否包含在区块中。\n         - 文件系统：用于大文件或分布式文件系统中，通过 Hash Tree 验证文件的完整性，确保数据没有被篡改。\n\n  - Chameleon Hash Function\n       - 基本原理：Chameleon Hash 是一种特殊的哈希函数，它具有碰撞可控的特性。即在给定某个初始值的情况下，攻击者可以找到另一个值使得两者哈希结果相同。Chameleon Hash 的这一特性允许某些场景下的灵活性，同时仍保持数据的不可篡改性。\n       - 应用场景：\n         - 可撤回的数字签名：在某些数字签名应用中，可以使用 Chameleon Hash 允许签名者撤回签名或改变内容，但这种修改是可控且可验证的。\n         - 区块链：Chameleon Hash 可以用于区块链的隐私保护或可修改的智能合约，允许在一定条件下对某些数据进行修改而不破坏系统的整体完整性。\n\n\n### 数学基础\n\n需要专门阅读书目去学习，此章节待更新\n\n### 简单问题和困难问题\n\n#### 简单问题\n\n能在多项式时间内解决的计算问题\n\n存在一个概率算法，将简单问题的一个例子作为算法的输入，改算法可以在多项式时间内以一个不可忽略的[优势](#优势)输出该例子的正确答案。例如：<span id=\"优势_back\"></span>\n\n- 给定 $(g,g^a)\\in \\mathbb{G}$，计算 $(g^s,g^{\\frac{1}{a+s}})$，其中 $s\\in\\mathbb{Z}_p$ 任意值\n\n#### 困难问题\n\n不能在多项式时间内解决的计算问题\n\n不存在这样一个概率算法，将困难问题的一个例子作为输入，该算法可以在多项式时间内以一个不可忽略的优势输出正确的答案\n\n- 给定 $(g,g^a)\\in \\mathbb{G}$，计算 $(s,g^{\\frac{1}{a+s}})$，其中 $s\\in\\mathbb{Z}_p$ 任意值\n\n#### 128个困难问题\n\n《Final Report on Main Computational Assumption in Cryptography》[9]\n\n内容\n\n#### 优势<span id=\"优势\"></span>\n\n用于评估攻击者相对于随机猜测或最坏情况下的表现有多大提升，描述攻击者的成功概率与基准成功概率之间的差异。\n\n定义：攻击者的优势通常被定义为攻击者成功概率与随机猜测或标准概率之间的差。\n\n$Advantage=P_{attack\\ success}−P_{baseline(random\\ guess)}$\n\n例子：如果一个密码算法的密钥长度为 $128$ 位，攻击者随机猜中密钥的概率是 $\\frac{1}{2^{128}}$。假设攻击者利用某种方法攻击，成功的概率为 $\\frac{1}{2^{120}}$，那么攻击者的优势就是：\n\n$\\text{Advantage} = \\frac{1}{2^{120}} - \\frac{1}{2^{128}} \\approx \\frac{1}{2^{120}}$\n\n[返回](#优势_back)\n\n### 算法\n\n算法指用给定的输入以某种计算方式产生对应的输出\n\n算法包括具体的输入参数、输出参数和计算过程，而算法定义只描述了输入和输出的参数对象\n\n#### 数字签名的算法定义\n\n$SysGen$，目的是生成系统公共参数，由权威机构运行；$KeyGen$，目的是生成公私钥对，由签名者运行；$Sign$，目的是对消息签名，由签名者运行；$Verify$，目的是验证签名，由验证者运行。\n\n- $SysGen:(1^\\lambda)\\rightarrow SP$，其中，$\\lambda$ 表示系统安全参数，$SP$ 表示系统公共参数\n- $KeyGen:(SP)\\rightarrow(pk,sk)$，其中，$pk$ 是签名者的公钥，$sk$是签名者的私钥\n- $Sign:(SP,sk,M)\\rightarrow\\sigma_M$，其中，$M$ 是消息，$\\sigma_M$ 是签名者对消息 $M$ 的签名\n- $Verify:(SP,pk,M,\\sigma_M)\\rightarrow1/0$，其中，$1$ 代表 $\\sigma_M$ 是 $M$ 的合法签名，$0$ 表示签名错误\n\n#### 公钥加密的算法定义\n\n$SysGen$，目的是生成系统公共参数，由权威机构运行；$KeyGen$，目的是生成公私钥对，由解密者运行；$Encrypt$，目的是对消息加密，由加密者运行；$Decrypt$，目的是解密密文，由解密者运行。\n\n- $SysGen:(1^\\lambda)\\rightarrow SP$，其中，$\\lambda$ 表示系统安全参数，$SP$ 表示系统公共参数\n- $KeyGen:(SP)\\rightarrow(pk,sk)$，其中，$pk$ 是签名者的公钥，$sk$是签名者的私钥\n- $Encrypt:(SP,sk,M)\\rightarrow CT$，其中，$M$ 是消息，$CT$ 是加密者对 $M$ 加密后的密文\n- $Decrypt:(SP,pk,M,CT)\\rightarrow M/\\perp$，其中，$\\perp$ 代表解密失败\n\n### 安全模型\n\n安全模型里只涉及到算法的输入参数和输出参数\n\n一个密码概念可能有多个不同的安全需求, 而每一个安全需求对应一个安全模型\n\n- 初始化\n- 询问\n- 攻击\n- 优势\n\n\n\n常见安全模型中的组成部分\n\n- 数字签名\n- 公钥加密\n\n\n\n### 安全规约证明\n\n\n\n- 模拟\n- 解决困难问题\n- 分析\n\n\n\n## 方案构造学习\n\n### 算法定义和安全模型定义\n\n#### 密码概念\n\n\n\n#### 安全模型概念\n\n1. 安全模型 (Security Model)\n\n安全模型是用于定义和分析密码系统安全性的框架。在安全模型中，我们规定了攻击者的能力、目标、以及系统的反应，以便评估系统在各种攻击情景下的表现。\n\n 形式化分析：安全模型通常基于数学模型，通过明确攻击者的能力（比如能够访问某些信息、对系统某部分做出操作等）来分析系统的安全性。\n 目标：设计一个安全模型是为了证明加密方案在某些假设下是安全的（或不安全的）。\n\n常见的安全模型有 随机预言模型、标准模型 等。\n\n 2. 挑战者 (Challenger)\n\n挑战者是在安全模型中负责与攻击者互动的一方，通常代表加密方案或协议的实例。在安全性分析过程中，挑战者模拟加密方案的行为，并根据攻击者的查询作出响应。\n\n 角色：挑战者充当系统的实现者，负责加密、解密、响应查询等。\n 目的：攻击者通过与挑战者互动，试图破坏协议的安全性。\n\n 3. 攻击者/对手 (Adversary)\n\n攻击者（Adversary） 是安全模型中的对立方，其目标是试图破坏系统的安全性。攻击者拥有一定的能力，如访问密文、发送查询请求，甚至可能控制系统部分资源。\n\n 角色：攻击者通过利用安全模型中允许的能力和资源，试图破译密文、伪造签名或进行其他形式的攻击。\n 目标：获取未经授权的信息，或使协议失效。\n\n 4. 查询 (Query)\n\n查询是攻击者与挑战者互动的手段。攻击者向挑战者提出请求（查询），以尝试获取信息或影响加密方案的行为。\n\n 常见类型的查询：\n   密文查询：攻击者请求挑战者提供某个消息的密文。\n   解密查询：攻击者请求对某个密文进行解密。\n   签名查询：攻击者请求某个消息的签名。\n\n 5. 响应 (Response)\n\n响应是挑战者对攻击者查询的回复。根据攻击者的查询，挑战者会返回相应的结果，如密文、解密后的消息或签名。\n\n 目的是：使攻击者能够根据这些响应试图破坏系统的安全性。\n\n 6. 获胜 (Win)\n\n获胜（Win）指的是攻击者在安全模型中成功破坏了系统的安全性。成功的标准由安全模型定义，比如攻击者能够区分密文、伪造签名等。\n\n 具体例子：\n   在 不可区分加密 模型中，攻击者能够通过与挑战者交互，成功区分出不同的密文，表明系统不安全。\n   在 不可伪造性 的签名方案中，攻击者能够伪造一个有效的签名。\n\n 7. 自适应攻击 (Adaptive Attack)\n\n自适应攻击是一类攻击，其中攻击者根据之前与挑战者交互过程中获得的信息来调整其后续查询或攻击策略。换句话说，攻击者的行为可以随着与系统互动的结果动态变化。\n\n 自适应性增强了攻击的有效性，因为攻击者能够根据已有信息做出更有针对性的查询和攻击。\n 例子：攻击者可以先进行一系列查询，从这些查询的响应中学习有用的信息，然后发起一个更具针对性的攻击。\n\n 8. 平凡攻击 (Trivial Attack)\n\n平凡攻击是指那些无需任何复杂分析或特殊技巧就能够轻易破坏系统安全的攻击。通常是由于设计中的明显漏洞造成的，属于显而易见的攻击方式。\n\n 示例：假如加密方案没有密钥保护，攻击者直接读取密钥即可解密密文，这就属于平凡攻击。\n\n 9. 优势 (Advantage)\n\n优势（Advantage）是量化攻击者成功率的一个指标。它衡量了攻击者比随机猜测更有多少机会成功攻击系统。\n\n 定义：在密码学中，攻击者的优势通常定义为攻击者成功破坏系统的概率与随机猜测成功概率的差值。\n 形式化表示：如果攻击者能以 \\( p \\) 的概率破坏系统，而随机猜测的成功概率是 $\\frac{1}{2}$，则攻击者的优势是  $\\text{Adv}=p-\\frac{1}{2}$。\n\n 10. 强安全模型 (Strong Security Model)\n\n强安全模型是在攻击者能力或资源非常强大的情况下定义的安全模型。加密方案在强安全模型下证明安全，意味着即使攻击者能力极大，方案依旧能够抵御攻击。\n\n 例子：在强安全模型中，攻击者可能有能力进行自适应查询或对抗密钥泄露等场景。\n\n 11. 弱安全模型 (Weak Security Model)\n\n弱安全模型是一种对攻击者能力作出较多限制的安全模型。在这种模型下，攻击者的能力较弱，方案只在特定条件下能抵御攻击。\n\n 例子：攻击者只能进行固定的查询，不能根据结果调整策略。\n\n 12. 标准安全模型 (Standard Security Model)\n\n标准安全模型是基于现实中的假设（如计算困难性）和不依赖额外理想假设的安全模型。与随机预言模型不同，标准安全模型只依赖广泛接受的数学假设。\n\n 现实性：标准安全模型更贴近实际应用环境，不依赖于不切实际的假设（如理想哈希函数）。\n\n\n\n\n\n\n\n### 经典方案推荐&尝试发现方案构造错误\n\n篇幅过多，详见文章 [公钥密码学经典方案30篇 学习笔记](../../../../../2024/09/27/%E5%85%AC%E9%92%A5%E5%AF%86%E7%A0%81%E5%AD%A6%E7%BB%8F%E5%85%B8%E6%96%B9%E6%A1%8830%E7%AF%87-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/)\n\n## 安全证明学习\n\n\n\n### 归约相关概念学习\n\n\n\n### 证明训练\n\n\n\n\n\n\n\n## 文献阅读\n\n","tags":["常驻","Crypto"]},{"title":"括号书写规范","url":"/2024/09/09/括号书写规范/","content":"\n今天记笔记，遇到一段话，中英夹杂不知道应当如何使用括号\n\n```\n- 新方案：提出基于变色龙哈希的支付协议——变色龙哈希时间锁定合约（Chameleon Hash Time-Lock Contract, CHTLC），解决支付路径泄露问题\n- 优势：使用多层变色龙哈希函数来确保没有用户可以修复支付路径（条件：至少有一个中间支付节点是诚实的）\n- 比较：对于相同的支付路径，与 Multi-hop Hash Time-Lock Contract(MHTLC)相比，CHTLC支付初始化速度快了五倍，通信所需带宽从17000KB降到7.7KB\n```\n\n<!--more-->\n\n询问`gpt`未果\n\n![](括号书写规范\\image-20240909130005620.png)\n\n![](括号书写规范\\image-20240909130017955.png)\n\n两次询问，得到了不同的结果\n\n后来，在[国家教育部官网](http://www.moe.gov.cn/ewebeditor/uploadfile/2015/01/13/20150113092346124.pdf)上找到了一种使用方法\n\n![](括号书写规范\\image-20240909172337348.png)\n\n非正式地说，主要内容是中文就用中文括号，主要内容是英文就用英文括号\n\n更改后的文段如下\n\n```\n- 新方案：提出基于变色龙哈希的支付协议——变色龙哈希时间锁定合约（Chameleon Hash Time-Lock Contract, CHTLC），解决支付路径泄露问题\n- 优势：使用多层变色龙哈希函数来确保没有用户可以修复支付路径（条件：至少有一个中间支付节点是诚实的）\n- 比较：对于相同的支付路径，与 Multi-hop Hash Time-Lock Contract（MHTLC）相比，CHTLC支付初始化速度快了五倍，通信所需带宽从17000KB降到7.7KB\n```\n\n","tags":["Crypto"]},{"title":"typora生成思维导图","url":"/2024/09/09/typora生成思维导图/","content":"\n\n\n```mermaid\ngraph LR\nA[公钥密码方案构造及安全证明的知识要点和方法论]\nB[归纳总结了构造可证明安全的公钥密码方案所需掌握的知识要点]\nC[-> 学习方案构造以及安全证明不可或缺的基础部分 需要最先掌握]\nA-->B-->C\n```\n\n后记：此方法可以在`typora`中显示思维导图，但是在`hexo`生成的博客中显示的还是原文件格式，所以目前的解决方案依旧是 幕布+图片插入\n\n记得格式改为`mermaid`\n","tags":["misc"]},{"title":"Chameleon Hashing and Signatures阅读笔记","url":"/2024/09/07/Chameleon Hashing and Signatures阅读笔记/","content":"\n### 文献简介\n\n标题：Chameleon Hash and Signatures\n\n作者：Hugo Krawczyk , Tal Rabin\n\n<!--more-->\n\n期刊：无\n\n年份：1998\n\n重要程度：4\n\n### 摘要\n\n- 引入变色龙签名，提供不可抵赖签名（和常规数字签名一样）\n- 不允许接收方在未经允许的情况下向第三方披露明文（和不可抵赖签名相关，但是算法简单和高效实现）\n- 本质上不交互，不涉及零知识证明的设计和复杂性（传统不可抵赖签名基于零知识证明）。哈希函数的产生通过标准的`hash then sign`\n- 此哈希函数 对签名者是抗碰撞的，但是对于接收者是碰撞可控的\n- 构造变色龙哈希函数，可以基于很多标准密码学假设（数学困难问题）\n\n### 引言\n\n##### 背景介绍\n\n-  \n\n##### 研究的目的和意义（课题开展的原因）\n\n- \n\n##### 重要结果/结论\n\n- \n\n### 研究内容\n\n##### 作者新发现\n\n- \n\n##### 作者研究对象\n\n- \n\n### 研究意义\n\n##### 理论价值\n\n- \n\n##### 应用价值\n\n- \n\n##### 能解决的难题\n\n- \n\n### 研究方法\n\n##### 作者使用的方法\n\n- \n\n##### 有没有更好的方法\n\n- \n\n##### 哪些是我还需要学习的\n\n- \n\n### 思考\n\n##### 对我的课题有什么启发\n\n- \n\n##### 作者是怎样做到比前人好的\n\n- \n\n##### 能否想到其他方法能达到和作者一样或更好的的效果\n\n- \n\n### 总结（思维导图）\n\n文章关键词/年份/期刊\n\n- 标题Title\n  - 网络连接\n- 背景Background\n  - What's known\n  - What's news\n    - 虽然之前研究证明了......，但是......还没被研究过/存在争议\n  - What's are the implication\n- 实验方法Methods\n- 实验结果Results\n  - 逻辑重点：这一部分为了验证什么假设——研究结果\n  -  \n- 启示Inspirations\n  - 边读 边思考 边补充\n  \n    - “不允许接收方在未经允许的情况下向第三方披露明文”，其中disclose指的是“披露并证明”\n  \n      接收方即便知道消息和相应的哈希值，他们依然无法向第三方证明或验证消息，因为他们没有生成碰撞的能力。这意味着接收方无法凭借手中的消息和哈希值向第三方揭露原始消息的真伪。\n  \n      更进一步，如果接收方试图向第三方泄露消息和哈希值，生成者可以在拥有私钥的情况下创建一个新的碰撞消息，使得第三方无法确定哪个消息是真实的。因此，即使接收方试图透露明文，也会被生成者的碰撞消息所混淆，从而使明文的真实性存疑。\n  \n    - 读的时候不懂的需要请教他人先记下来\n    - 对自己的论文选题头脑风暴\n    - 对自己的研究有启发（如图片好看可以借鉴，行文逻辑可以借鉴为模板，研究思路需要再琢磨下）\n  - 回过头思考和复盘\n    - 这篇文章最大的亮点是什么\n    - 为什么他们可以发刊\n    - 对于我的研究课题/科研思路有何借鉴\n    - 挑挑毛病\n\n---\n\n在精读每一篇密码学论文时，以下问题可以帮助你深入理解论文的内容，并确保你对论文有全面的把握：\n\n - **研究的主要问题是什么？**\n   \n   - 论文试图解决的核心问题或挑战是什么？\n\n     该论文研究了如何将基于身份的加密应用于变色龙哈希函数，并介绍了第一个基于身份的变色龙哈希方案。主要解决的问题是密钥分发的复杂性及其在变色龙签名中的应用。\n   \n - **该论文的主要贡献是什么？**\n   - 论文提出了首个基于身份的变色龙哈希函数，解决了公钥拥有者不需要检索关联的秘密密钥的问题。该哈希方案用于构建基于身份的变色龙签名，还应用于一个鲁棒且通信高效的密封投标拍卖方案。提出了哪些新方法、新算法或新协议？\n   \n - **现有的解决方案有哪些不足？**\n   \n   - 传统的变色龙签名方案要求接收者管理复杂的公钥基础设施（PKI）和密钥分发。而基于身份的加密消除了对证书和密钥分发中心的依赖，简化了操作。\n   \n - **论文采用了哪些理论工具或模型？**\n   - 论文使用了基于身份的密码学（如Shamir提出的方案）和变色龙哈希函数，结合了哈希-签名范式。还使用了RSA签名等经典加密工具来验证哈希函数的安全性。\n   \n - **研究方法和技术细节是什么？**\n   - 研究提出了一种新的ID-based变色龙哈希方案，并详细介绍了其哈希算法、伪造算法及其安全性分析。该方案采用公开的身份字符串生成公钥，避免了复杂的密钥管理流程。\n   \n - **论文的假设条件是什么？**\n   - 假设用户的身份可以由公开的、唯一的身份字符串描述，如电子邮件地址，且信任的第三方可以安全生成并管理密钥。安全性依赖于RSA签名的不可伪造性。\n\n - **论文的结果和结论是什么？**\n   - 论文验证了该基于身份的变色龙哈希方案的安全性，并成功应用于密封投标拍卖中，展示了其在实际应用中的高效性和鲁棒性。\n   \n - **该研究有哪些局限性？**\n   - 论文未深入探讨其方案在多方协作环境中的扩展性和潜在的安全风险，比如当多个实体共享同一身份字符串时，可能会面临身份冲突问题。\n\n - **参考文献中是否有关键文献？**\n   - 论文引用了关于变色龙签名和基于身份加密的基础性研究，如Krawczyk和Rabin提出的变色龙签名和Shamir提出的基于身份的密码学等。\n\n - **未来的研究方向是什么？**\n   \n    - 未来研究可以进一步优化该方案在其他应用场景中的适用性，例如多方计算或其他安全协议中，同时探讨如何提升该方案的隐私保护性能。\n\n","tags":["Crypto","unfixed"]},{"title":"后量子密码-LWE问题","url":"/2024/09/04/后量子密码-LWE问题/","content":"\nLWE(Learning With Errors)问题，基于格\n\n<!--more-->\n\n问题简化：\n\n1. 密码向量：设一个位置的秘密向量 $s\\in\\mathbb{Z}_q^n$ （$\\mathbb{Z}_q^n$是模 $q$ 的整数环，$n$ 是向量的维度）\n1. 线性方程组：给定一系列的线性方程 $ai⋅s+ei\\ (\\mod q\\ )$，其中 $a_i\\in\\mathbb{Z}_q^n$ 是已知的随机向量，$e_i$ 是从某个噪声分布中抽取的小整数噪声。\n1. 目标：给定这些方程（即给定多个 $a_i,b_i=a_i\\cdot s+e_i$  对），求解秘密向量 $s$。\n\n\n\n","tags":["Crypto","unfixed"]},{"title":"2024.9.4组会","url":"/2024/09/02/2024.9.4组会/","content":"\n强对抗环境：（strong adversarial environment）指的是一种假设敌手（对手）能力极强、具备充分资源和知识的环境。在这种环境下，敌手不仅能够拦截、篡改、重放和伪造信息，还可以主动发起各种复杂的攻击，如选择明文攻击（Chosen Plaintext Attack, CPA）、选择密文攻击（Chosen Ciphertext Attack, CCA）、旁路攻击（Side-Channel Attacks）等。\n\n这种假设帮助设计者确保加密方案在极端情况下仍然安全。密码学协议在强对抗环境下的安全性通常意味着即使面对最强大的敌手，协议仍然能够保持其机密性、完整性和不可否认性。 \n\n通常，密码学研究中会先假设较弱的对手环境，逐步提升对手能力，直到达成强对抗环境下的安全性证明。这也是为什么强对抗环境下的安全性证明具有很高的价值，因为它展示了算法在最严苛条件下仍能可靠运行。\n\n---\n\n现阶段密码学，理论偏后量子；新加坡\\*\\*大学全部导师方向都包含后量子\n\n变色龙哈希这样的理论，近几年并没有IF很高的论文，因为理论已经基本完善，剩下的多在于应用\n\n---\n\nSCI规定英文论文 标题中的介词 3个字母以上大写 例如 $With$ $and$\n\n首个单词和最后一个单词一定大写\n\n其他期刊有的 $with$ 小写\n\n---\n\n计划书中不要提及“力争”、“试图”等词汇\n\n---\n\n论文注意事项（中文）：\n\n区分中英标点符号，可以使用宏定义；中文文字之间要用逗号，公式间用英文逗号\n\n参考文献从[1]开始？期刊要求，一般是**出现排序**和**姓名排序**\n\n英文句号后面要加空格\n\n忌用口语化用语\n\n语句是否通顺，前后表达一致\n\n论文注意事项（英文）：\n\n`()`括号前后有空格\n\n逻辑自洽\n\n时态：introduction-一般现在时\n\n第一次出现词汇：用全称；之后用缩写\n\n","tags":["meetings"]},{"title":"XFlow安装教程","url":"/2024/08/23/XFlow安装教程/","content":"\nXFlow是仿真流体动力学的软件\n\n正版软件好贵贵，然后我下载了整整一个下午的破解版\n\n按顺序阅读了以下三篇博客，最终成功打开XFlow\n\n<!--more-->\n\nhttps://www.xqu5.com/thread-2105-1-1.html\n\nhttps://www.ittel.cn/archives/13613.html\n\nhttps://blog.csdn.net/weixin_39461079/article/details/127909834\n\n我也不知道为什么能成功打开的，好奇怪\n","tags":["RoboMaster"]},{"title":"2024青工会 南航飞镖内容总结","url":"/2024/08/23/2024青工会-南航飞镖内容总结/","content":"\n2024.11.06二次编辑\n\n没时间回来看了，直接着手做吧，有问题再回来找经验\n\n<!--more-->\n\n- 官方镖头设计的不是很好，但是阻力可以接受\n- 弹道解算，有控镖和无控镖都可以使用\n\n\n\n- 迫击炮/摩擦轮型，把重量拉满，可以增加抗扰性\n- 对碳板前缘倒圆角，升力提高阻力减小（小迎角可行，大迎角雷诺数较高进而失真）\n- 官方镖头对升力系数影响不大，对阻力影响较大\n\n![](2024青工会-南航飞镖内容总结\\image-20240823133633513.png)\n\n- 增加边条翼，可以调节气动中心\n\n![](2024青工会-南航飞镖内容总结\\image-20240823133813225.png)\n\n- 相对抽象的设计\n\n![](2024青工会-南航飞镖内容总结\\image-20240823133959553.png)\n\n好处：有充足的升力\n\n坏处：容易坏\n\n![](2024青工会-南航飞镖内容总结\\image-20240823134138862.png)\n\n机翼经过特殊设计，升阻比能到6以上\n\n很耐摔\n\n两个舵机用来控制\n\n- 飞镖的雷诺数值比昆虫大一点，比鸟小\n\n所以不针对该雷诺数进行翼型设计，或者特殊处理，将会很容易失速\n\n- 对称翼型容易失速，越厚越容易失速\n\n![](2024青工会-南航飞镖内容总结\\image-20240823134624814.png)\n\nNACA0002这种类似平板，反而更不容易分离\n\n如果分离，会变得非线性\n\n- 增加一个后掠，在前缘拉出一个脱体涡来延缓分离\n\n![](2024青工会-南航飞镖内容总结\\image-20240823135040506.png)\n\n后掠角越大，可用引脚越大\n\n![](2024青工会-南航飞镖内容总结\\image-20240823135139885.png)\n\nS翼在0力矩（俯仰力矩为零）的时候是有升力的\n\n- 快速加速，陀螺仪可能会\n","tags":["RoboMaster"]},{"title":"MoeCTF2024wp","url":"/2024/08/21/MoeCTF2024wp/","content":"\n# CRYPTO\n\n<!--more-->\n\n### 现代密码学入门指北\n\n````\nfrom Crypto.Util.number import bytes_to_long, getPrime\nfrom secret import flag\np = getPrime(128)\nq = getPrime(128)\nn = p*q\ne = 65537\nm = bytes_to_long(flag)\nc = pow(m, e, n)\nprint(f\"n = {n}\")\nprint(f\"p = {p}\")\nprint(f\"q = {q}\")\nprint(f\"c = {c}\")\n'''\nn = 40600296529065757616876034307502386207424439675894291036278463517602256790833\np = 197380555956482914197022424175976066223\nq = 205695522197318297682903544013139543071\nc = 36450632910287169149899281952743051320560762944710752155402435752196566406306\n```\n````\n\n---\n\n```\nfrom Crypto.Util.number import long_to_bytes\nimport gmpy2\n\nn = 40600296529065757616876034307502386207424439675894291036278463517602256790833\np = 197380555956482914197022424175976066223\nq = 205695522197318297682903544013139543071\nc = 36450632910287169149899281952743051320560762944710752155402435752196566406306\ne = 65537\n\nphi = (p-1)*(q-1)\nd = gmpy2.invert( e , phi )\nm = pow( c , d , n )\nprint( long_to_bytes(m) )\n```\n\nflag:`moectf{the_way_to_crypto}`\n\n### Signin\n\n```\nfrom Crypto.Util.number import*\nfrom secret import flag\n\n\nm = bytes_to_long(flag)\np = getPrime(1024)\nq = getPrime(1024)\nn = p*q\ne = 65537\nc = pow(m,e,n)\npq = (p-1)*(q-2)\nqp = (q-1)*(p-2)\np_q = p + q\n\n\nprint(f\"{c = }\")\nprint(f\"{pq = }\")\nprint(f\"{qp = }\")\nprint(f\"{n = }\")\nprint(f\"{p_q = }\")\n'''\nc = 5654386228732582062836480859915557858019553457231956237167652323191768422394980061906028416785155458721240012614551996577092521454960121688179565370052222983096211611352630963027300416387011219744891121506834201808533675072141450111382372702075488292867077512403293072053681315714857246273046785264966933854754543533442866929316042885151966997466549713023923528666038905359773392516627983694351534177829247262148749867874156066768643169675380054673701641774814655290118723774060082161615682005335103074445205806731112430609256580951996554318845128022415956933291151825345962528562570998777860222407032989708801549746\npq = 18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687154230787854196153067547938936776488741864214499155892870610823979739278296501074632962069426593691194105670021035337609896886690049677222778251559566664735419100459953672218523709852732976706321086266274840999100037702428847290063111455101343033924136386513077951516363739936487970952511422443500922412450462\nqp = 18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687077087914198877794354459669808240133383828356379423767736753506794441545506312066344576298453957064590180141648690226266236642320508613544047037110363523129966437840660693885863331837516125853621802358973786440314619135781324447765480391038912783714312479080029167695447650048419230865326299964671353746764860\nn = 18047017539289114275195019384090026530425758236625347121394903879980914618669633902668100353788910470141976640337675700570573127020693081175961988571621759711122062452192526924744760561788625702044632350319245961013430665853071569777307047934247268954386678746085438134169871118814865536503043639618655569687534959910892789661065614807265825078942931717855566686073463382398417205648946713373617006449901977718981043020664616841303517708207413215548110294271101267236070252015782044263961319221848136717220979435486850254298686692230935985442120369913666939804135884857831857184001072678312992442792825575636200505903\np_q = 279533706577501791569740668595544511920056954944184570513187478007551195831693428589898548339751066551225424790534556602157835468618845221423643972870671556362200734472399328046960316064864571163851111207448753697980178391430044714097464866523838747053135392202848167518870720149808055682621080992998747265496\n'''\n```\n\n---\n\n设  $q\\_p = p - q$\n\n因为  $pq=(p-1)*(q-2)\\\\ qp = (q-1)*(p-2)$\n\n即  $pq=p*q-2*p-1*q+2\\\\ qp = p*q-1*p-2*q+2$\n\n两式相减得到  $pq-qp=-p+q$ ，即  $q\\_p=-p+q$\n\n又已知  $p\\_q = p + q$\n\n只需解方程二元一次方程  $\\left\\{\\begin{array}{**lr**}q\\_p=-p+q\\\\p\\_q = p + q\\end{array}\\right.$  ，其中 $q\\_p , p\\_q$ 为已知量，$p,q$为未知量\n\n```\nfrom Crypto.Util.number import*\nimport gmpy2\n\nc = \npq = \nqp = \nn = \np_q = \ne = 65537\n\nq_p = pq - qp\n\np = (p_q + q_p)//2\nq = (p_q - q_p)//2\n\nassert p*q==n\n\nphi = (p-1)*(q-1)\nd = gmpy2.invert( e , phi )\nm = pow( c , d , n )\nprint( long_to_bytes(m) )\n```\n\nflag:`moectf{Just_4_signin_ch4ll3ng3_for_y0u}`\n\n### ez_hash\n\n```\nfrom hashlib import sha256\nfrom secret import flag, secrets\n\nassert flag == b'moectf{' + secrets + b'}'\nassert secrets[:4] == b'2100' and len(secrets) == 10\nhash_value = sha256(secrets).hexdigest()\nprint(f\"{hash_value = }\")\n# hash_value = '3a5137149f705e4da1bf6742e62c018e3f7a1784ceebcb0030656a2b42f50b6a'\n```\n\n---\n\n已知密文前四位（共10位）和sha256后的结果，爆破剩余6位即可得到flag\n\n```\nfrom hashlib import sha256\n\nsecrets = b'2100'\nfor i in range( 1000000 ):\n    tmp = secrets + str(i).encode()\n    # print( tmp )\n    hash_value = sha256(tmp).hexdigest()\n    #print( tmp , hash_value )\n    if hash_value == '3a5137149f705e4da1bf6742e62c018e3f7a1784ceebcb0030656a2b42f50b6a':\n        print( tmp )\n```\n\nflag:`moectf{2100360168}`\n\n### Big and small\n\n```\nfrom secret import flag\nfrom Crypto.Util.number import*\nm = long_to_bytes(flag)\np = getPrime(1024)\nq = getPrime(1024)\nn = p*q\ne = 3\nc = pow(m,e,n)\n'''\nc = 150409620528288093947185249913242033500530715593845912018225648212915478065982806112747164334970339684262757\ne = 3\nn = 20279309983698966932589436610174513524888616098014944133902125993694471293062261713076591251054086174169670848598415548609375570643330808663804049384020949389856831520202461767497906977295453545771698220639545101966866003886108320987081153619862170206953817850993602202650467676163476075276351519648193219850062278314841385459627485588891326899019745457679891867632849975694274064320723175687748633644074614068978098629566677125696150343248924059801632081514235975357906763251498042129457546586971828204136347260818828746304688911632041538714834683709493303900837361850396599138626509382069186433843547745480160634787\n'''\n```\n\n---\n\n低密度指数攻击\n\n```\nfrom Crypto.Util.number import*\nimport gmpy2\n\nc = \ne = 3\nn = \n\nfor i in range( 100 ):\n    if gmpy2.iroot( c+n*i , e )[1] == True:\n        m = gmpy2.iroot( c+n*i , e )[0]\n        print( long_to_bytes(m) )\n        exit()\n```\n\nflag:`flag{xt>is>s>b}`\n\n### baby_equation\n\n```\nfrom Crypto.Util.number import *\nfrom secret import flag\n\n\nl = len(flag)\nm1, m2 = flag[:l//2], flag[l//2:]\na = bytes_to_long(m1)\nb = bytes_to_long(m2)\nk = 0x2227e398fc6ffcf5159863a345df85ba50d6845f8c06747769fee78f598e7cb1bcf875fb9e5a69ddd39da950f21cb49581c3487c29b7c61da0f584c32ea21ce1edda7f09a6e4c3ae3b4c8c12002bb2dfd0951037d3773a216e209900e51c7d78a0066aa9a387b068acbd4fb3168e915f306ba40\nassert ((a**2 + 1)*(b**2 + 1) - 2*(a - b)*(a*b - 1)) == 4*(k + a*b)\n```\n\n---\n\n这一组题里最难的一题\n\n已知 `((a**2 + 1)*(b**2 + 1) - 2*(a - b)*(a*b - 1)) == 4*(k + a*b)`\n\n可以使用python自带库来解方程\n\n```\nfrom sympy import symbols, Eq, solve\nk = 0x2227e398fc6ffcf5159863a345df85ba50d6845f8c06747769fee78f598e7cb1bcf875fb9e5a69ddd39da950f21cb49581c3487c29b7c61da0f584c32ea21ce1edda7f09a6e4c3ae3b4c8c12002bb2dfd0951037d3773a216e209900e51c7d78a0066aa9a387b068acbd4fb3168e915f306ba40\na , b = symbols('a b')\neq1 = Eq( (a**2 + 1)*(b**2 + 1) - 2*(a - b)*(a*b - 1) - 4*(k + a*b) , 0 )\nsolution = solve( eq1 , (a,b) )\nprint( solution )\n```\n\n得到结果是\n\n```\n[((8699621268124163273600280057569065643071518478496234908779966583664908604557271908267773859706827828901385412151814796018448555312901260593 - b)/(b - 1), b), ((-b - 8699621268124163273600280057569065643071518478496234908779966583664908604557271908267773859706827828901385412151814796018448555312901260591)/(b - 1), b)]\n```\n\n我们先只看前半段\n\n`((8699621268124163273600280057569065643071518478496234908779966583664908604557271908267773859706827828901385412151814796018448555312901260593 - b)/(b - 1), b)`\n\n设 `t=8699621268124163273600280057569065643071518478496234908779966583664908604557271908267773859706827828901385412151814796018448555312901260593`\n\n故有  $((t-b)/(b-1),b)$\n\n设  $a=((t-b)/(b-1),b)$\n\n移项得到  $t=a*b-a+b$\n\n上式等价于  $t-1=(a+1)*(b-1)$\n\n使用 `yafu-x64`即可分解 `t-1`得到\n\n```\n***factors found***\n\nP1 = 2\nP1 = 2\nP1 = 2\nP1 = 2\nP1 = 3\nP1 = 3\nP2 = 31\nP2 = 61\nP3 = 223\nP4 = 4013\nP6 = 281317\nP7 = 4151351\nP13 = 5404604441993\nP9 = 370523737\nP9 = 339386329\nP14 = 26798471753993\nP29 = 25866088332911027256931479223\nP44 = 64889106213996537255229963986303510188999911\n\nans = 1\n```\n\n也就是说，以上十八个数字分成两组，这两组数分别的乘积就是 $a+1$ 和 $b-1$，而且这两组数的乘积相差较小（即 $a$ 和 $b$ 的相差较小）；我们不妨设答案的解是相差**最小**的一组\n\n考虑一个长度为 `18` 的 **01串**，`0`表示分到一组，`1`表示分到另一组，依次可以编写代码\n\n```\ndef generate_binary_strings(n, current_string='', index=0):\n    \"\"\"\n    递归生成所有长度为n的01串，并计算两个子集的乘积。\n    \n    :param n: 01串的长度\n    :param current_string: 当前构建的01串\n    :param index: 当前构建01串的位置\n    :return: 最小的乘积差值和对应的两个子集的乘积\n    \"\"\"\n    if index == n:\n        # 当生成了一个完整的01串时，计算两个子集的乘积\n        subset1_product = 1\n        subset2_product = 1\n        for i in range(n):\n            if current_string[i] == '1':\n                subset1_product *= numbers[i]\n            else:\n                subset2_product *= numbers[i]\n        \n        # 计算两个子集乘积的差值\n        diff = abs(subset1_product - subset2_product)\n        return diff, (subset1_product, subset2_product)\n    \n    # 递归生成下一个位为0的情况\n    diff_0, result_0 = generate_binary_strings(n, current_string + '0', index + 1)\n    \n    # 递归生成下一个位为1的情况\n    diff_1, result_1 = generate_binary_strings(n, current_string + '1', index + 1)\n    \n    # 返回乘积差更小的那个情况\n    if diff_0 < diff_1:\n        return diff_0, result_0\n    else:\n        return diff_1, result_1\n\nnumbers = [2,2,2,2,3,3,31,61,223,4013,281317,4151351,339386329,370523737,5404604441993,26798471753993,25866088332911027256931479223,64889106213996537255229963986303510188999911]\ndiff, (product1, product2) = generate_binary_strings(len(numbers))\nprint(f\"最小差距是{diff}\")\nprint(f\"a={product1}\")\nprint(f\"b={product2}\")\n```\n\n得到的结果是\n\n```\n最小差距是1706794914313264370032744337649343424996898390647397437784379904184\na=2948658764987911698882278955266869405625105496652193856947916257370492\nb=2950365559902224963252311699604518749050102395042841254385700637274676\n```\n\n计算 $a+1$ 和 $b-1$ 即可得到 flag\n\n```\nfrom Crypto.Util.number import *\na = 2948658764987911698882278955266869405625105496652193856947916257370492 + 1\nb = 2950365559902224963252311699604518749050102395042841254385700637274676 - 1\nprint( long_to_bytes(b) + long_to_bytes(a)  )\n```\n\nflag:`moectf{7he_Fund4m3nt4l_th30r3m_0f_4rithm3tic_i5_p0w4rful!}`\n\n### 大白兔\n\n### More_secure_RSA\n\n### ezlegendre\n\n```\nfrom sympy import *\nfrom Crypto.Util.number import *\na = 288260533169915\np = 1007621497415251\n\nFLAG = b'moectf{xxxxxxxxxxxxxxxxxxxxx}'\n\n\ndef encrypt_flag(flag):\n    ciphertext = []\n    plaintext = ''.join([bin(i)[2:].zfill(8) for i in flag])\n    for b in plaintext:\n        e = randprime(2, p)\n        if b == '1':\n            n = pow(a, -e, p)\n            ciphertext.append(n)\n        else:\n            n = pow(-a, e ,p)\n            ciphertext.append(n)\n    return ciphertext\n\n\nprint(encrypt_flag(FLAG))\n```\n\n---\n\n离散对数的题还挺爱出\n\n此题和\n\n```\n[DASCTF Sept X 浙江工业大学秋季挑战赛]签到\n2020网鼎杯——you_raise_me_up wp\n```\n\n这两道题考点一致\n\n直接出代码了\n\n```\nfrom sympy import *\nfrom Crypto.Util.number import *\na = 288260533169915\np = 1007621497415251\n\ndef decode_flag( ciphertext ):\n    plaintext = \"\"\n    for i in ciphertext:\n        try:\n            e_temp = discrete_log( p , i , a )\n        except:\n            plaintext += \"0\"\n        else:\n            plaintext += \"1\"\n        if len(plaintext) == 8:\n            print( chr(int(plaintext,2)) , end=\"\" )\n            plaintext = \"\"\n\nCiphertext = []\nprint(decode_flag(Ciphertext))\n```\n\nflag:`moectf{minus_one_1s_n0t_qu4dr4tic_r4sidu4_when_p_mod_f0ur_equ41_to_thr33}`\n\n### new_system\n\n\n\n# RE\n\n### 逆向工程入门指北\n\n直接运行题目给的脚本即可\n\n```\n#include <iostream>\nint main()\n{\nchar password_enc[] = {\n123, 121, 115, 117, 98, 112, 109, 100, 37, 96, 37, 100, 101, 37, 73, 39,\n101, 73, 119, 73, 122, 121, 120, 113, 73, 122, 121, 120, 113, 73, 97, 119,\n111, 73, 98, 121, 73, 115, 110, 102, 122, 121, 100, 115, 107, 22 };\n// 因为a^b=c时, b^c=a, 所以我们可以这样还原数据:\nchar password[47];\nfor (int i = 0; i < 46; i++) {\npassword[i] = password_enc[i] ^ 22;\n}\npassword[46] = 0; // 使用0字符来截断掉%s的无尽输出..\nprintf(\"%s\\n\", password); // 哈哈，这就是本题的f l a g，自己运行一下交上去吧！\nreturn 0;\n}\n```\n\nflag:`moectf{r3v3rs3_1s_a_long_long_way_to_explore}`\n\n### xor\n\n打开IDA，F5\n\n![](MoeCTF2024wp\\image-20240813013534437.png)\n\n双击`byte_1400022B8`进入\n\n![](MoeCTF2024wp\\image-20240813013709130.png)\n\n这一串异或上`0x24`就是flag\n\n```\ns = \"49h, 4Bh, 41h, 47h, 50h, 42h, 5Fh, 41h, 1Ch, 16h, 46h , 10h, 13h, 1Ch, 40h, 9, 42h, 16h, 46h, 1Ch, 9, 10h, 10h, 42h, 1Dh, 9, 46h, 15h, 14h, 14h, 9, 17h, 16h, 14h, 41h, 40h , 40h , 16h, 14h, 47h, 12h, 40h, 14h, 59h , 0\"\n\ns = s.replace(\"h\",\"\").replace(\" \",\"\").split(\",\")\n\nprint( s )\n\nfor i in s:\n    t = int(i,16)\n    print( chr(t^0x24) , end=\"\" )\n```\n\nflag:`moectf{e82b478d-f2b8-44f9-b100-320edd20c6d0}`\n\n### TEA\n\n64位无壳，拖进IDA F5一下\n\n![](MoeCTF2024wp\\image-20240813162141504.png)\n\n根据题目给出信息，倒过来就是decode代码了；需要注意运算的数域，这里我们直接使用cpp就可以省去手动取模\n\n```\n#include<iostream>\nusing namespace std;\nunsigned int v4 , v5;\nint v3;\n\nsigned main(){\n    v4 = 676078132;\n    v5 = 957400408;\n    v3 = 0;\n    for(int i = 0;i < 32;i ++){\n        v3 -= 1640531527;\n    }\n    for(int i = 0;i < 32;i ++){\n        v5 -= (v4 + v3) ^ (16 * v4 + 1634038898) ^ ((v4 >> 5) + 1634038904);\n        v4 -= (v5 + v3) ^ (16 * v5 + 1702060386) ^ ((v5 >> 5) + 1870148662);\n        v3 += 1640531527;\n    }\n    cout << v4 << \" \" << v5 << endl;\n    return 0;\n}\n```\n\n得到`2204193701 2382383549`\n\n然后转用python分离就可以了；需要注意这里是16进制\n\n```\nv4 = 2204193701\nv5 = 2382383549\n\nv10 = v4\nv9 = int(bin(v5)[18:34],2)\nv11 = int(bin(v5)[2:18],2)\n\nprint( hex(v4) , hex(v11) , hex(v9) )\n```\n\n输出`0x836153a5 0x8e00 0x49bd`\n\n得到的就是flag\n\n![](MoeCTF2024wp\\image-20240813162502951.png)\n\nflag:`moectf{836153a5-8e00-49bd-9c42-caf30620caaf}`\n\n### 逆向工程进阶之北\n\n给出这样一段代码\n\n![](MoeCTF2024wp\\image-20240813165701429.png)\n\n关键是这一行\n\n![](MoeCTF2024wp\\image-20240813165731665.png)\n\n直接加法变减法，乘法变逆元，异或变异或即可\n\n值得注意的是，加法的优先级高于异或运算，并且需要在 `0xffffffff+1` 域下进行运算\n\n```\nimport gmpy2\n\nl = [0xb5073388 , 0xf58ea46f , 0x8cd2d760 , 0x7fc56cda , 0x52bc07da , 0x29054b48 , 0x42d74750 , 0x11297e95 , 0x5cf2821b , 0x747970da , 0x64793c81]\np = 0xffffffff+1\nfor i in l:\n    temp = ((i^0xdeadbeef+0xd3906)-0xdeadc0de)*gmpy2.invert( 0xccffbbbb , p ) % p\n    temp = str(hex(temp))[2:]\n    flag = \"\"\n    for j in range(0,len(temp),2):\n        flag += chr(int(temp[j] + temp[j+1],16))\n    print( flag[::-1] , end=\"\" )\n```\n\nflag:`moectf{c5f44c32-cbb9-444e-aef4-c0fa7c7a6b7a}`\n\n### SecretModule\n\n给了一个zip，解压得到几个文件\n\n用记事本打开 `customize.sh` 文件，得到\n\n```\n#!/bin/bash\n eval   \"$(     printf 'QlpoOTFBWSZTWZspxEUAAfxfgFAwdef/6zfHz6D/79/uQAJSu07tCQ1BI09E9Q0DINA9TQA2oAAA0NAlCFPRpM0mjSNR+hIaek0AHqaGj1PUNNMeqDSEJ6gNBo0NNAAZNGjI0NBoAAlEjEo8ppp6NPVGCaaNNMR6g9EBoPUGgPAecJO66TH6u4xdFeH8fRdR4OSNOqLoVm2I39FZSS/irDMIJmggh2EyQovQos26HmeniQH4iRSw0JeeVV2C9E8NkJh+VZwioAZj5QpGcdTmdOSMoYLaiaaa8oZEhIRgQbKjP7VIopzl53axe+MJxXTyrg/duKuBYecUVQUUTMptuykt+JqZZmJSM0dQ/YaHpifbwN3wN0NYRAEYC0tkI6uE4GkS9r1eFB9zyCBef6dnGYwKo8BylS24xNYsXSUXIYpZC3fzxlQKVBUwrBawin+AaDPkLwbCSQNge45QjrBfoNLEJSWk8C0ajKPu8NORzYlfqGgjOQOQQ0YG7gCRaWFD6wkguEqEUi6bSFTxLE4Y3+pziYRKFVet5X1CrnXc2jLN+9tMTJ8beC0ED5k1K7n22efCha1ci53zQHgQBUKLg1Q3hPZoMCAp0g48QN02037Qy891pyxa+vZU5msKnsJryCXKyBdrCrWXljrC/S6i3MBzRikY4kZzLw7v8aL7oOYKGRkUCWxelwUWFKIOQyImQVnIKicgYFqJYjeY1CMSgaiR4dqQ7MomJ6LdpOEtDOvfhjsEplnGTvSo3NV1KnALfTTYMeOUngApQKa8IExBIGZhafHgZZjI0HAKg6bcV5QwiUHCoorQaSWUvNMLgejbZ/QJA9QFWitiup+KyAU5uTergMVuJ5jj/xdyRThQkJspxEU='   | base64   -d   |   bunzip2  -c    )\"   \n```\n\n编写相应的解码代码\n\n```\nimport base64\nimport bz2\n\n# 这是原始的 Base64 编码字符串\nencoded_str = 'QlpoOTFBWSZTWZspxEUAAfxfgFAwdef/6zfHz6D/79/uQAJSu07tCQ1BI09E9Q0DINA9TQA2oAAA0NAlCFPRpM0mjSNR+hIaek0AHqaGj1PUNNMeqDSEJ6gNBo0NNAAZNGjI0NBoAAlEjEo8ppp6NPVGCaaNNMR6g9EBoPUGgPAecJO66TH6u4xdFeH8fRdR4OSNOqLoVm2I39FZSS/irDMIJmggh2EyQovQos26HmeniQH4iRSw0JeeVV2C9E8NkJh+VZwioAZj5QpGcdTmdOSMoYLaiaaa8oZEhIRgQbKjP7VIopzl53axe+MJxXTyrg/duKuBYecUVQUUTMptuykt+JqZZmJSM0dQ/YaHpifbwN3wN0NYRAEYC0tkI6uE4GkS9r1eFB9zyCBef6dnGYwKo8BylS24xNYsXSUXIYpZC3fzxlQKVBUwrBawin+AaDPkLwbCSQNge45QjrBfoNLEJSWk8C0ajKPu8NORzYlfqGgjOQOQQ0YG7gCRaWFD6wkguEqEUi6bSFTxLE4Y3+pziYRKFVet5X1CrnXc2jLN+9tMTJ8beC0ED5k1K7n22efCha1ci53zQHgQBUKLg1Q3hPZoMCAp0g48QN02037Qy891pyxa+vZU5msKnsJryCXKyBdrCrWXljrC/S6i3MBzRikY4kZzLw7v8aL7oOYKGRkUCWxelwUWFKIOQyImQVnIKicgYFqJYjeY1CMSgaiR4dqQ7MomJ6LdpOEtDOvfhjsEplnGTvSo3NV1KnALfTTYMeOUngApQKa8IExBIGZhafHgZZjI0HAKg6bcV5QwiUHCoorQaSWUvNMLgejbZ/QJA9QFWitiup+KyAU5uTergMVuJ5jj/xdyRThQkJspxEU='\n\n# Base64 解码\ndecoded_data = base64.b64decode(encoded_str)\n\n# BZ2 解压\ndecompressed_data = bz2.decompress(decoded_data)\n\n# 打印解压后的内容\nprint(decompressed_data.decode('utf-8'))\n```\n\n得到输出内容，代码大致意思是使用`114514`和`1919810`来碰撞给定的MD5，编写脚本即可枚举\n\n ```\nimport hashlib\nimport itertools\n\n# Possible results of choose()\noptions = [\"114514\", \"1919810\"]\n\n# Target MD5 hash\ntarget_hash = \"77a58d62b2c0870132bfe8e8ea3ad7f1\"\n\n# Brute force all possible combinations\nfor combination in itertools.product(options, repeat=7):\n    concatenated = ''.join(combination)\n    generated_hash = hashlib.md5(concatenated.encode()).hexdigest()\n    if generated_hash == target_hash:\n        print(f\"Correct sequence: {combination}\")\n        print(f\"Flag: moectf{{{concatenated}}}\")\n        break\n ```\n\nflag:`moectf{114514114514191981011451411451419198101919810}`\n\n# MISC\n\n### signin\n\n按照题目要求，只给 `luo` 记缺勤，其他人都代签即可\n\nflag:`moectf{Thanks_For_You_signing_in_4ND_W3l0c0me_T0_M0ecTf_2024!!!}`\n\n### 罗小黑战记\n\n得到一张gif，使用stegsolve进行分解，发现第110张图片中有二维码，扫描二维码得到flag\n\nflag:`moectf{y0uu6r3th3m0st3r1nth1sf13ld}`\n\n### 杂项入门指北\n\n右侧有一列`.-`，是摩斯密码\n\n`.... ....- ...- . ..--.- .- ..--.- --. ----- ----- -.. ..--.- - .---- -- .`\n\nflag:`moectf{H4VE_A_G00D_T1ME}`\n\n# WEB\n\n### Web渗透测试与审计入门指北\n\n题目给了一个服务器的文件，要求自行搭建服务器\n\n查看文件，是php语言加密之后的内容\n\n打开`PHPstudy Pro`，点击`Nginx`的启动\n\n![](MoeCTF2024wp\\image-20240821155311822.png)\n\n\n\n点击`网站-管理-打开根目录`，将题目给的文件拖进去即可\n\n访问`http://localhost:80`即可得到flag\n\n![](MoeCTF2024wp\\image-20240821163245875.png)\n\nflag:`moectf{H3r3'5_@_flYinG_kIss_f0r_yoU!}`\n\n### 弗拉格之地的入口\n\n![](MoeCTF2024wp\\image-20240821164405545.png)\n\n爬虫？写了个爬虫，什么额外的东西都没有爬下来\n\n问问ai，他说\n\n```\n在运行爬虫前，请务必检查目标网站的robots.txt文件，确保您的行为符合该网站的规定。此外，频繁的请求可能会对网站服务器造成负担，因此在实际应用中应考虑添加适当的延时或其他更复杂的逻辑来避免被封禁。\n```\n\n那我们检查一下`robots.txt`，发现里面提到了一个文件\n\n![](MoeCTF2024wp\\image-20240821164600594.png)\n\n我们直接访问一下`/webtutorEntry.php`，然后就得到了flag\n\n![](MoeCTF2024wp\\image-20240821164640135.png)\n\nflag:`moectf{c0nGRATU14TiOn_f0r_kN0WlNg-R0BoT5_Txta02b}`\n\n### 垫刀之路01: MoeCTF？启动！\n\n回到根目录，看到一个flag文件，打开\n\n![](MoeCTF2024wp\\image-20240821165625544.png)\n\n得到提示检查环境变量\n\n![](MoeCTF2024wp\\image-20240821165715268.png)\n\n输入`env`检测环境变量，得到flag\n\n![](MoeCTF2024wp\\image-20240821165807674.png)\n\nflag:`moectf{w31CoME_TO-moEctF-4nd-r0@Dl_5T4RtuP-bY-sXrHHH5e}`\n\n### ez_http\n\n\n\n### ProveYourLove\n\n\n\n### 弗拉格之地的挑战\n\n![](MoeCTF2024wp\\image-20240821173635106.png)\n\n直接访问`http://127.0.0.1:53846/flag1ab.html`\n\n点击`F12`得到第一段flag\n\n![](MoeCTF2024wp\\image-20240821173737969.png)\n\n`flag1: bW9lY3Rm`\n\n然后访问`http://127.0.0.1:53846/flag2hh.php`\n\n`服务器通过网络传输过来的，除了这个页面，还有什么？`，F12打开`网络`在响应标头找到flag2\n\n`flag2：e0FmdEV`\n\n然后访问`http://127.0.0.1:53846/flag3cad.php`\n\n![](MoeCTF2024wp\\image-20240821200554497.png)\n\n使用hackbar传入\n\n![](MoeCTF2024wp\\image-20240821200709136.png)\n\n然后传入b参数\n\n![](MoeCTF2024wp\\image-20240821200855227.png)\n\n元素页面有提示`你知道 cookie 吗？`\n\n![](MoeCTF2024wp\\image-20240821201104980.png)\n\n\n\n然后就不知道怎么做了\n\n### ImageCloud前置\n\n\n\n### 垫刀之路02: 普通的文件上传\n","tags":["cryptoCTF"]},{"title":"记录一次关于hexo+next图片显示部分出错的debug过程","url":"/2024/08/20/记录一次关于hexo-next图片显示部分出错的debug过程/","content":"\n今天看自己的博客，发现有的图片显示正常，有些不正常\n\n<!--more-->\n\n![](记录一次关于hexo-next图片显示部分出错的debug过程\\image-20240820224255118.png)\n\n有的内容多一层路径，有的图片就正常显示\n\n经过多次对比发现是把`\\`打成`/`\n\n二者在typora中是都可以显示的，但是在生成博客时，如果没有使用反斜就会出错\n","tags":["misc"]},{"title":"BUUCTF Web wp","url":"/2024/08/16/BUUCTF-Web-wp/","content":"\n### [ACTF2020 新生赛]Exec\n\n<!--more-->\n\n输入`127.0.0.1;ls`\n\n![](BUUCTF-Web-wp\\image-20240816141656487.png)\n\n发现真的把 `index.php`（也就是`ls`的操作结果）真的输出了，说明没有过滤分号\n\n最终在`127.0.0.1;cd ../../../;ls`找到了flag文件\n\n![](BUUCTF-Web-wp\\image-20240816141854210.png)\n\n输入`127.0.0.1;cd ../../../;ls`得到flag\n\n![](BUUCTF-Web-wp\\image-20240816141948311.png)\n\nflag:`flag{4e3b851f-9a72-42c9-a57a-d6698548cdc0}`\n\n### [GXYCTF2019]Ping Ping Ping\n\n发现有一个`/?ip=`\n\n根据上一题的经验，我们输入`/?ip=127.0.0.1;ls`，得到\n\n![](BUUCTF-Web-wp\\image-20240816165534905.png)\n\n得知不能输入空格\n\n![](BUUCTF-Web-wp\\image-20240816165620729.png)\n\n所以我们需要绕过空格使用一下平替\n\n```\n${IFS}$9\n{IFS}\n$IFS\n${IFS}\n$IFS$1 //$1改成$加其他数字貌似都行\nIFS\n< \n<> \n{cat,flag.php}  //用逗号实现了空格功能，需要用{}括起来\n%20   (space)\n%09   (tab)\nX=$'cat\\x09./flag.php';$X       （\\x09表示tab，也可以用\\x20）\n```\n\n输入`/?ip=127.0.0.1;cat$IFS1flag.php`\n\n![](BUUCTF-Web-wp\\image-20240816170242335.png)\n\n我们查看index.php\n\n![](BUUCTF-Web-wp\\image-20240816171040850.png)\n\n使用 `/?ip=127.0.0.1;e=g;cat$IFS$1fla$e.php`\n\nF12即可得到flag\n\n![](BUUCTF-Web-wp\\image-20240816171951521.png)\n\n```\n;     前面的执行完执行后面的\n|     管道符，上一条命令的输出，作为下一条命令的参数（显示后面的执行结果）         \n||    当前面的执行出错时（为假）执行后面的\n&     将任务置于后台执行\n&&    前面的语句为假则直接出错，后面的也不执行，前面只能为真\n%0a  （换行）\n%0d  （回车）\n---\nps:有时会禁用cat:\n解决方法是使用tac反向输出命令：\nlinux命令中可以加\\，所以甚至可以ca\\t /fl\\ag\n---\n?ip=127.0.0.1;cat$IFS$9`ls`\n$IFS在Linux下表示为空格\n$9是当前系统shell进程第九个参数持有者，始终为空字符串，$后可以接任意数字\n这里$IFS$9或$IFS垂直，后面加个$与{}类似，起截断作用\n```\n\nflag:`flag{ef88dbb0-2c4d-4489-9fdb-02ce4c5d6fa1}`\n\n### [SUCTF 2019]EasySQL\n\n![](BUUCTF-Web-wp\\image-20240829192738522.png)\n\n堆叠注入查询数据库\n\n`1; show databases;`\n\n![](BUUCTF-Web-wp\\image-20240829192900891.png)\n\n查询表名\n\n![](BUUCTF-Web-wp\\image-20240829192936164.png)\n\n```\n1;show columns from Flag;#\nselect $_GET['query'] || flag from flag\n```\n\n尝试访问Flag，发现不行\n\n输入`*,1`\n\n![](BUUCTF-Web-wp\\image-20240829193113322.png)\n\n\n\n```\n这里的原理是\n\nsql=select.post[‘query’].\"||flag from Flag\";\n如果$post[‘query’]的数据为*,1，sql语句就变成了select *,1||flag from Flag，\n就是select *,1 from Flag，这样就直接查询出了Flag表中的所有内容。\n\n这里说一下我的理解\n\n这里输入*,1,这里会增加一个临时列，他的列名为1，然后那一列的值都为1。\n\n当我们只关心数据表有多少记录行而不需要知道具体的字段值时，类似“select 1 from tblName”是一个很不错的SQL语句写法，它通常用于子查询。这样可以减少系统开销，提高运行效率，因为这样子写的SQL语句，数据库引擎就不会去检索数据表里一条条具体的记录和每条记录里一个个具体的字段值并将它们放到内存里，而是根据查询到有多少行存在就输出多少个“1”，每个“1”代表有1行记录，同时选用数字1还因为它所占用的内存空间最小，当然用数字0的效果也一样。在不需要知道具体的记录值是什么的情况下这种写法无疑更加可取。\n```\n\nflag:`flag{70066add-3cd0-49ec-84b3-8e6ee05c3dd9}`\n\n### [强网杯 2019]随便注\n\n","tags":["CTF"]},{"title":"BUUCTF RE wp","url":"/2024/08/13/BUUCTF-RE-wp/","content":"\n### easyre\n\n<!--more-->\n\nF5一下出\n\n![](BUUCTF-RE-wp\\image-20240813004958292.png)\n\n直接打开的话，结束之后自动闪退，所以要用cmd\n\n![](BUUCTF-RE-wp\\image-20240813005154655.png)\n\nflag:`flag{this_Is_a_EaSyRe}`\n\n### reverse1\n\nshift+F12，然后Ctrl+F搜索关键词`flag`\n\n![](BUUCTF-RE-wp\\image-20240813010913141.png)\n\n双击进入，ctrl+x查看交叉引用\n\n![](BUUCTF-RE-wp\\image-20240813010954836.png)\n\n然后点击F5查看源码\n\n![](BUUCTF-RE-wp\\image-20240813011117186.png)\n\n得到这一段内容，选中数字单击 `r` 可以转化为ascll码对应的字母\n\n可以知道，for循环把str2的 `o` 替换为 `0`\n\n![](BUUCTF-RE-wp\\image-20240813011246912.png)\n\n双击 str2 进入，可以看到str2的数值\n\n![](BUUCTF-RE-wp\\image-20240813011339666.png)\n\n那么flag就是替换之后的\n\nflag:`flag{hell0_w0rld}`\n\n### reverse2\n\nIDA打开，一键F5\n\n![](BUUCTF-RE-wp\\image-20240813012032896.png)\n\n发现是把i和r替换为1\n\n![](BUUCTF-RE-wp\\image-20240813012108890.png)\n\n双击flag查看内容\n\n![](BUUCTF-RE-wp\\image-20240813012146130.png)\n\n发现有一段是`hacking_for_fun}`，替换即可得到flag\n\nflag:`flag{hack1ng_fo1_fun}`\n\n### 内涵的软件\n\n拖进查壳软件\n\n![](BUUCTF-RE-wp\\image-20240813114639646.png)\n\n发现是32位文件，拖进IDA32\n\nshift+F12即可看到flag\n\n![](BUUCTF-RE-wp\\image-20240813114803075.png)\n\nflag:`flag{49d3c93df25caad81232130f3d2ebfad}`\n\n### 新年快乐\n\n发现是32位程序\n\n![](BUUCTF-RE-wp\\image-20240813115004507.png)\n\n用IDA打开发现有壳\n\n![](BUUCTF-RE-wp\\image-20240813115526632.png)\n\n拖进FFI工具中自动去壳\n\n![](BUUCTF-RE-wp\\image-20240813115619957.png)\n\n然后拖进IDA，F5发现flag\n\n![](BUUCTF-RE-wp\\image-20240813115707835.png)\n\nflag:`flag{HappyNewYear!}`\n\n### xor\n\n32位\n\n![](BUUCTF-RE-wp\\image-20240813130910840.png)\n\n拖进IDA，F5\n\n![](BUUCTF-RE-wp\\image-20240813130945671.png)\n\n可以发现flag是异或得到的\n\n双击global，shift+E获得`aFKWOXZUPFVMDGH`的值\n\n![](BUUCTF-RE-wp\\image-20240813131706539.png)\n\n保存到十进制，编写脚本即可获得flag\n\n```\nl = [\n  102,  10, 107,  12, 119,  38,  79,  46,  64,  17, \n  120,  13,  90,  59,  85,  17, 112,  25,  70,  31, \n  118,  34,  77,  35,  68,  14, 103,   6, 104,  15, \n   71,  50,  79,   0\n]\n\nflag = \"\"\nflag += chr(l[0])\nfor i in range(1,len(l)):\n    flag += chr(l[i]^l[i-1])\n\nprint( flag )\n```\n\nflag:`flag{QianQiuWanDai_YiTongJiangHu}`\n\n### reverse3\n\n查壳发现没壳，32位，打开\n\n![](BUUCTF-RE-wp\\image-20240813133049766.png)\n\nshift+F12看到flag\n\n![](BUUCTF-RE-wp\\image-20240813135833713.png)\n\n双击，然后ctrl+x查看交叉引用，然后F5一下，得到以下页面\n\n![](BUUCTF-RE-wp\\image-20240813135940665.png)\n\n进入`sub_4110BE`函数，发现是base64加密\n\n后面还有一个简单的位移运算\n\n密文变量是 `Str2`，shift+E保存\n\n![](BUUCTF-RE-wp\\image-20240813140249918.png)\n\n编写脚本得到flag\n\n```\nimport base64\n\ns = [\n  101, 51, 110, 105, 102, 73, 72, 57, 98, 95, \n  67, 64, 110, 64, 100, 72\n]\nflag = \"\"\nfor i in range(len(s)):\n    flag += chr(s[i]-i)\n\nprint( flag )\nprint( base64.b64decode(flag) )\n```\n\nflag:`flag{i_l0ve_you}`\n","tags":["CTF"]},{"title":"厦大一日游（机器人大赛）","url":"/2024/08/13/厦大一日游（机器人大赛）/","content":"\n[原文链接](https://www.cnblogs.com/coper/p/XMU_robo_2023-11-25.html)\n\n原文发表日期 `2023-11-25`\n\n朝花夕拾，感悟颇深，故迁移到新博客网址\n\n![](厦大一日游（机器人大赛）\\摸鱼.gif)\n\n<!--more-->\n\n---\n\n11.25早晨六点，早早地起床，出了校门，坐了很长时间的地铁，来到了福州南站\n\n看样子学长们昨天晚上调了一个通宵的车···\n\n一个多小时后到达厦门北站，然后乘坐地铁到达岛内，又然后转乘到翔安区~~\n见证了一个繁华到清净的过程\n\n![](厦大一日游（机器人大赛）\\2932150-20231126051654143-1981000588.jpg)\n\n\n早听闻翔安校区周围都是荒地，果真如此；进入校园之后，感觉校内空间也很大\n\n道路很宽，路上人也不多（即使是吃饭时间）；这样宽阔的路上，行车行人两不误\n\n很奇怪的是，厦大翔安的面积远大于师大旗山，但目测其电动车比例很小，与师大大相径庭。晚上骑上共享单车时我得到了答案——在厦大骑车和在师大完全是不同的感觉，可谓冯虚御风，那叫一个爽；骑起来了，几乎不需要再蹬就可以走得很远很远。共享单车的故障率也远小于师大，这下子有共享电动车也不是很需要了\n\n因此，在自然选择下，可以长距离骑的山地车更适用于没有减速带的厦大；交通相对堵塞的师大更适合电动车来进行频繁的零始加速\n\n据目测，厦大跟师大的饭菜大致差不多，不过价格更便宜；米饭全部免费（因为有补贴），包装费便宜很多（呜呜呜不想回师大了）\n\n翔安校区的建筑看起来很新很好看，毕竟是新的建筑，即使是宿舍楼也很有艺术气息；很有酒吧舞的感觉，属于是名副其实了\n\n![](厦大一日游（机器人大赛）\\2932150-20231126051726097-621762781.jpg)\n\n------------\n\n关于比赛\n\n1. 准备比赛需要携带的基本物品（电控组）\nps.下次需要再加上魔术贴\n![](厦大一日游（机器人大赛）\\2932150-20231126023157525-917250009.jpg)\n![](厦大一日游（机器人大赛）\\2932150-20231126023217824-456054961.jpg)\n![](厦大一日游（机器人大赛）\\2932150-20231126023227354-1015322350.jpg)\n\n\n2. 赛前硬件出问题可能是常态，需要稳住心态，才有可能抢救\n赛前遥控器突然故障，硬件组的学长紧急抢修得以挽救；测试结束后，pitch轴控制出现离线问题，学长进行分析，得到结论：是新的线使pitch轴的线出现接触不良\n赛前不要改走线，否则容易出大问题\n3. 需要多和其他成员沟通，谋得更好的配合\n电控视觉硬件等组合作完成工作，每个人熟悉自己领域的工作并了解其他领域的工作，可以使调试效率大大提升\n4. 比赛周途劳顿是常态，需要习惯\n比赛嘛，虽然不是土木，但是总是要接触硬件，不就得跑来跑去的嘛——也是比较值得的\n\n![](厦大一日游（机器人大赛）\\2932150-20231126051748553-609376348.jpg)\n\n------------\n\n感悟\n\n1. 在RM上，师大和厦大差距很大\n一方面在资金和支持，这导致在资源上出现缺陷，师大只有一间实验室（和一间自习室），合在一起也远没有厦大的一间实验室面积大（而厦大有整整一个楼层的实验室，六间！），也因此师大没有环形高地等试验场地；\n另一方面在于层次上，就新生而论：厦大的新生已经可以做各式各样的机器人（包括但不限于带有发射机构的机器人），与此同时师大的新生却处于在循迹小车的层次，各种通信协议也需要自行学习（这一点利弊难辨），格局差距不小；就氛围而论，师大不及周边很多学校，协会人数过少，如果条件允许（然而显而易见，也许由于物质基础的限制，条件是不允许的）可以向首都师范大学学习；\n归其原因，还是因为穷，没有场地也没有资金\n在层层限制下，不能想太远，才有机会翻盘\n\n2. 在建设上，师大和厦大差距很大\n同样是人文学校，同样是不注重理工科，为什么厦大机器人协会这么富（哭）\n理工科可以算得上是一种趋势，所以各个学校都在努力向理工科砸钱，这样子，师大相对厦大的距离应该会是越来越远\n\n3. 在学生素质上，师大和厦大差距很大\n让我很为赞叹的是，开会期间，有几个厦大学生，一直在那里研究和学习\n对于大学生而言，保持专注状态已经很为难得了，除非热爱，再加上有条不紊按部就班的规划能力\n人外有人山外有山，对于个人能力，及有待提升\n4. 需要多看开源，多交流学习以开阔眼界\n看了集美成毅的车，他们的pid十分丝滑，车也显得十分轻。经过交流和观察得知，他们的部分结构设计是借鉴的开源，使用的材料也是相对轻便的玻纤，没有使用超级电容，很稳，最终以三十多秒零碰撞的成绩赢下了比赛。这应该是一个强基固本很好的例子，善于利用并学习，进而选择正确的决策才能换来成功\n\n5. 看着好，不一定真的好\n赛前，嘉庚学院的某队队长向领导展示全向轮的小车，其灵活性能令领导赞叹不已；上场后却频频“碰壁”（物理）。不禁令人沉思——再强大的设计，不经过赛场的试炼，它可以算作是强大吗？\n\n------------\n\n\nATTENDATION\n\n厦门大学学习氛围和人文主义浓厚，但是和同层次院校相比，理工科水平不足\n\n有学长说，厦门大学的理工科不如福州大学；窃以为RoboMaster比赛需要大量的经济支持来支撑起来，厦门大学作为酒吧舞固然有更多的物质支持，而硬件比拼不过，并不代表技术会有欠缺；在恶劣的环境下即使与在相对优越的环境下的他们能打平手，某种意义上也算是大获全胜了——初心高于胜负，成长胜于输赢！\n\n![](厦大一日游（机器人大赛）\\2932150-20231126051816974-1134422029.jpg)\n\n润去学高数了，再不学就挂科了\n","tags":["游记"]},{"title":"Codeforces Round 965 (Div. 2) 题解","url":"/2024/08/11/Codeforces-Round-965-Div-2-题解/","content":"\n[题目链接](https://codeforces.com/contest/1998)\n\n逆天抽象局，ab都是构造题，\n\n![](Codeforces-Round-965-Div-2-题解\\image-20240811110838813.png)\n\n<!--more-->\n\n[A. Find K Distinct Points with Fixed Center](https://codeforces.com/contest/1998/problem/A)\n\n```\n#include<iostream>\n#define int long long\nusing namespace std;\n\nint t , x , y , k;\nsigned main(){\n    cin >> t;\n    while( t -- ){\n        cin >> x >> y >> k;\n        if( k % 2 ){\n            cout << x << \" \" << y << endl;\n            for(int i = 1;i <= (k-1)/2;i ++){\n                cout << x-i << \" \" << y << endl;\n                cout << x+i << \" \" << y << endl;\n            }\n        }\n        else{\n            for(int i = 1;i <= k/2;i ++){\n                cout << x-i << \" \" << y << endl;\n                cout << x+i << \" \" << y << endl;\n            }\n        }\n    }\n    return 0;\n}\n```\n\n[B. Minimize Equal Sum Subarrays](https://codeforces.com/contest/1998/problem/B)\n\n```\n#include<iostream>\n#define int long long\nusing namespace std;\n\nconst int N = 2e5;\nint n;\nint a[N+10];\n\nsigned main(){\n    int t;cin >> t;\n    while( t -- ){\n        cin >> n;\n        for(int i = 1;i <= n;i ++){\n            cin >> a[i];\n        }\n        for(int i = 2;i <= n;i ++){\n            cout << a[i] << \" \";\n        }cout << a[1] << endl;\n    }\n    return 0;\n}\n```\n\n","tags":["算法竞赛"]},{"title":"飞行器空气动力学学习笔记（低速翼型）","url":"/2024/08/10/飞行器空气动力学学习笔记（低速翼型）/","content":"\n2024.11.06二次编辑\n\n理论的话学这些已经足够了，基础知识不需要太多，该着手于上手实操和控制系统的调试了\n\n故不再更新\n\n<!--more-->\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810173617803.png)\n\n机翼定义：平行于机翼的对称面截得的机翼截面称为翼剖面，通常称为翼型\n\n飞机设计中，在确定了平面形状、机翼形状后，首先要做的工作就是翼型设计。\n翼型的气动特性，直接影响到机翼及整个飞行器的气动特性\n\n翼型设计：确定机翼的几何形状\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810174026702.png)\n\n圆头尖尾\n用于低速、亚音速和跨音速飞行的飞机机翼，以及低超音速飞行的超音过飞机机翼\n\n尖头尖尾\n用于较高超音速飞行的超音速飞机机翼和导弹的弹翼\n\n### 翼型的几何参数\n\n```\n前缘点、后缘点、翼弦\n弯度、厚度\n前缘半径、后缘尖锐度\n```\n\n前缘点指的是最前面，后缘点指的是最后面，连接前缘和后缘的直线,称为翼型的弦线,其长称为几何弦长,简称弦长（一般用字母b表示）。\n\n描述翼型经常使用体轴坐标系（相对应的是“风轴坐标系”）\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810174402878.png)\n\n无量纲坐标可以写为\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810174645606.png)\n\n经过这样的处理之后，翼型的长度是1\n\n中弧线：每个x值对应的两个y值的平均值，中弧线的无量纲坐标$\\bar{y}_f(\\bar{x})$称为弯度分布函数，最大值称为相对弯度$\\bar{f}$，对应的弦向位置记为$\\bar{x}_f$\n$$\n\\bar{y}_f(\\bar{x})=\\frac{\\bar{y}_上+\\bar{y}_下}{2}\\\\\n\\bar{f}=\\frac{f}{b}=[\\bar{y}_f(\\bar{x})]_{max}\\\\\n\\bar{x}_f=\\frac{x_f}{b}\n$$\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810175554832.png)\n\n$\\bar{c}<=12%$ 的翼型统称 薄翼型（薄翼型理论）\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810175757111.png)\n\n##### 前缘顿度：\n\n对圆头翼型，用前缘的内切圆半径 $r_L$ 表示前缘钝度，该内切圆的圆心在中弧线前缘点的切线上，圆的半径 $r_L$ 称为前缘半径\n\n相对值定义 $\\bar{r}_L=\\frac{r_L}{b}$\n\n##### 后缘尖锐度：\n\n后缘处上下翼面切线的夹角，称为后缘角 $\\tau$，表示后缘的尖锐度\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810180119919.png)\n\n##### 低速翼型编号\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810180304068.png)\n\n##### 翼型的迎角\n\n在翼型平面上，来流和翼弦之间的夹角，称之为迎角(攻角)\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810180715088.png)\n\n一定程度内，迎角越大，升力越大\n\n对弦线而言，来流上偏升力为正，来流下偏升力为负\n\n飞机的迎角：来流和机身轴线间的夹角\n\n滑跑：三轮着地，速度方向平行于地面\n\n拉起：前轮离地，速度方向平行于地面\n\n起飞：三轮离地，速度方向偏向于轴线方向\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810181103558.png)\n\n对于一个无限翼展展长的机翼，展向取于一个单位展长的翼段，那么这个翼段上的绕流及气动力就是翼型的绕流和气动力\n\n翼型表面上每个点都作用有压强和摩擦应力，它们产生一个合力品，将R分解为垂直于来流和平行于来流方向的两个分量\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810181451940.png)\n\n垂直于来流方向的力称之为升力\n平行于来流方向的力称之为阻力\n\n法向力垂直于翼弦方向的力\n轴向力平行于翼弦方向的力\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810181549368.png)\n\n（$\\alpha$ 表示来流迎角）\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810183121573.png)\n\n低速翼型指的是马赫数小于0.3的流动对于一个给定的翼型，在不同的迎角情况下他的绕流特征是不一样的\n\n0°迎角绕流，流过相对平滑\n\n ![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810183226061.png)\n\n10°迎角绕流，尾部少许分流\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810183311856.png)\n\n30°迎角绕流，整个背风区都出现了分离流动\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810183357865.png)\n\n合适迎角——稳流\n\n临界失速迎角——气流分离\n\n失速迎角——湍流\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810183626356.png)\n\n##### 库塔-儒可夫斯基后缘条件\n\n小迎角下，翼型绕流的压力分布及升力，与绕翼型的无粘位流的压力分布及升力无本质差别；因此，不计粘性作用，用绕翼型的无粘位流求解翼型压力分布及升力,是合理的近似\n绕翼型无粘位流的升力问题，遵循儒可夫斯基升力定理，直均流流过任意截面形状翼型的升力:  \n\n$Y=\\rho V_{\\infty} \\Gamma$ （升力=密度\\*来流速度\\*环量）**确定速度环量是关键**\n\n 只有后驻点在后缘点上，才能有唯一的速度环量值与之对应\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810184307965.png)\n\n ![](飞行器空气动力学学习笔记（低速翼型）\\image-20240810184509863.png)\n\n圆弧形后缘翼型：$V_{S上}=V_{S下}$ ，后缘点没有载荷（库塔-儒可夫斯基后缘条件）\n\n### 薄翼型理论\n\n##### 低速位流的控制方程\n\n$\\Phi$速度位，$\\phi _{\\infty}$来流速度位，$\\vec{n}$翼面外法线单位矢\n\n速度位：即“速度势”（velocity potential），标量，用于描述无旋流动（即涡度为零的流动）和处理理想流体（无粘性且不可压缩的流体）的流动问题。\n\n设流场中的速度矢量为 \\($\\mathbf{v}$\\)，如果流体的流动是无旋的（即涡度 \\($\\nabla \\times \\mathbf{v} = 0$\\)），那么存在一个标量函数 \\($\\Phi$\\)（速度势），使得流场中的速度可以表示为该函数的梯度：\\($\\mathbf{v} = \\nabla \\Phi$\\)。\n\n由于流体是无旋的，可以保证存在这样一个标量函数，且该函数满足拉普拉斯方程 \\($\\nabla^2 \\Phi = 0$)，这就是所谓的速度势方程。\n\n##### 速度位与速度的关系：\n\n$\\nabla\\Phi = \\left(\\frac{\\partial \\Phi}{\\partial x}, \\frac{\\partial \\Phi}{\\partial y}\\right)=(v_x,v_y)$\n\n单位外法矢分量 $\\vec{n}=(n_x,n_y)$\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815052851019.png)\n\n翼型低速无粘位流\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815053041554.png)\n\n小扰动线性化近似的解析解法\n\n##### 扰动速度位的线性方程\n\n翼型绕流速度位 $\\Phi$ 满足拉普拉斯方程，因此它可分解为直均来流速度位 $\\phi _{\\infty}$ 和翼型存在引起的扰动速度位 $\\phi$ ，即\n\n因有 $\\Phi=\\phi _{\\infty}+\\phi\\\\ \\Delta \\Phi=0\\\\ \\Delta\\phi _{\\infty}=0$（满足拉普拉斯方程）\n\n所以扰动速度位也满足拉普拉斯方程（翼型的存在引起的扰动速度位）\n\n##### 翼面边界条件线化近似\n\n翼面上 $x,y$ 方向的流速分量记为 $v_{xw},v_{yw}$\n\n问题：绕过一个翼型，来流迎角为$\\alpha$，来流速度为$V_\\infty$的无粘位流的流动情况\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815054031414.png)\n\n\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815054403514.png)\n\n$\\alpha$表示来流迎角，$cos\\alpha$ 趋向于0，$sin\\alpha$趋向于$\\alpha$\n\nx方向速度 ≈ 来流速度 + 由于翼型的存在引起的扰动的x方向速度\n\n带入得到\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815054749889.png)\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815054859061.png)\n\n最终可以得到翼面边界条件的线性化近似表达式：\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815055012155.png)\n\n边界条件=来流速度（弯度±厚度-来流迎角）\n\n##### 压强系数的线化近似\n\n根据伯努利方程，流场中任一点的压强系数为\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815055412804.png)\n\n$v$表示当地速度，$V_\\infty$表示来流速度\n\n略去二阶小量，只保留一阶小量，则有\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815055739662.png)\n\n其中 $C_P$是物面的压强系数\n\n进一步近似，得到\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815055949854.png)\n\n分别为：来流迎角引起的部分+翼型弯度引起的部分+翼型厚度引起的部分\n\n##### 小结：扰动速度位的线性叠加\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815060222795.png)\n\n再将问题分解，即可分为迎角问题，弯板问题和厚度问题\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815060405921.png)\n\n分为三个分方程，每个方程都对应一种流动\n\n![](飞行器空气动力学学习笔记（低速翼型）\\image-20240815060630754.png)\n\n弯度问题 对应 0攻角情况下中弧线弯板扰流，$y_{f(x)}$就是这个翼型的中弧线\n\n厚度问题 对应 没有迎角的厚度对称问题\n\n迎角问题 对应 有迎角的平板扰流\n\n","tags":["RoboMaster"]},{"title":"Codeforces Round 964 (Div.4)题解","url":"/2024/08/07/Codeforces-Round-964-Div-4-题解/","content":"\n[题目链接](https://codeforces.com/contest/1999)\n\n![](Codeforces-Round-964-Div-4-题解\\1.png)\n\n差一道题就ak了，打代码的速度还是慢了点\n\n<!--more-->\n\nF时间不够了，于是随便糊了个时间复杂度不对的算法，结果算法对了，少了个预处理然后就TLE了，赛时没有发现\n\n[A.A+B Again?](https://codeforces.com/contest/1999/problem/A)\n\n```\n#include<iostream>\nusing namespace std;\nint t , n;\nsigned main(){\n    cin >> t;\n    while( t -- ){\n        cin >> n;\n        cout << (n/10)+(n%10) << endl;\n    }\n    return 0;\n}\n```\n\n---\n\n[B.Card Game](https://codeforces.com/contest/1999/problem/B)\n\n直接穷举所有可能性即可\n\n思路不是很难，就看如何实现了\n\n```\n#include<iostream>\n#define int long long\nusing namespace std;\n\nint t , a[5];\n\nsigned main(){\n    cin >> t;\n    while( t -- ){\n        for(int i = 1;i <= 4;i ++) cin >> a[i];\n        int l , r , ans = 0;\n        for(int i = 1;i <= 2;i ++){\n            int ii = (i==1)?2:1;\n            for(int j = 3;j <= 4;j ++){\n                int jj = (j==3)?4:3;\n                l = 0 , r = 0;\n                if( a[i] > a[j] ) l ++;\n                if( a[i] < a[j] ) r ++;\n\n                if( a[ii] > a[jj] ) l ++;\n                if( a[ii] < a[jj] ) r ++;\n\n                if( l > r ) ans ++;\n                //cout << a[i] << \" \" << a[ii] << \" \" << a[j] << \" \" << a[jj] << endl;\n            }\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n\n---\n\n[C.Showering](https://codeforces.com/contest/1999/problem/C)\n\n典型贪心（弱化版）\n\n数据范围可以 $O(nlogn)$，无脑sort就好了\n\n```\n#include<iostream>\n#include<algorithm>\n#define int long long\nusing namespace std;\n\nconst int N = 2e5;\nint t , n , s , m;\nstruct TIME{\n    int l , r;\n}a[N+10];\n\nbool cmp( TIME x , TIME y ){\n    return x.l < y.l;\n}\n\nsigned main(){\n    cin >> t;\n    while( t -- ){\n        cin >> n >> s >> m;\n        for(int i = 1;i <= n;i ++){\n            cin >> a[i].l >> a[i].r;\n        }\n        sort( a + 1 , a + n + 1 , cmp );\n        bool flag = 0;\n        a[0].r = 0 , a[n+1].l = m;\n        for(int i = 1;i <= n+1;i ++){\n            if( a[i].l - a[i-1].r >= s ){\n                flag = 1;\n                break;\n            }\n        }\n        if( flag ) cout << \"YES\" << endl;\n        else cout << \"NO\" << endl;\n    }\n    return 0;\n}\n```\n\n---\n\n[D.Slavic's Exam](https://codeforces.com/contest/1999/problem/D)\n\n这里的匹配不需要连续，所以只要有`?`就直接替换就可以了，多余的`?`需要替换成任意小写字母\n\n```\n#include<iostream>\n#include<string>\n#define int long long\nusing namespace std;\n\nint T;\nstring s , t;\n\nsigned main(){\n    cin >> T;\n    while( T -- ){\n        cin >> s >> t;\n        int t_top = 0;\n        //cout << s.length() << \" \" << t.length() << endl;\n        for(int i = 0;i < s.length();i ++){\n            if( t_top == t.length() ){\n                if( s[i] == '?' ) s[i] = 'a';\n                continue;\n            }\n            if( s[i] == '?' || s[i] == t[t_top] ){\n                s[i] = t[t_top];\n                t_top ++;\n            }\n        }\n        if( t_top != t.length() ) cout << \"NO\" << endl;\n        else{\n            cout << \"YES\" << endl;\n            cout << s << endl;\n        }\n    }\n    return 0;\n}\n```\n\n---\n\n[E.Triple Operations](https://codeforces.com/contest/1999/problem/E)\n\n这道题开始上难度了\n\n先说结论，$ans=log_3(min(a_i))+\\sum log_3(a_i)$\n\n容易观察到，我们只需要将其中一个数变为0，后续将数字除以3（减小）的时候不会造成其他数字乘以3（增大），我们只需要将最小的数变为0就可以，但是同时也会有另外一个数字增大，这时造成的代价即为$log_3(min(a_i))$\n\n现在只需要计算 $log_3(min(a_i))+\\sum log_3(a_i)$ ，即$log_3l+\\sum_l^r log_3(a_i)$ \n\n我们观察到从 $l$ 到 $r$ 是单调的，所以利用指数即可在 $O(logn)$ 求解\n\n```\n#include<iostream>\n#include<string>\n#define int long long\nusing namespace std;\n\nint T;\nint l , r;\n\nint log3( int x ){\n    int ans = 0;\n    while( x ){\n        x /= 3;\n        ans ++;\n    }\n    return ans;\n}\n\nint poww( int x ){\n    int ans = 1;\n    while( x -- ){\n        ans *= 3;\n    }\n    return ans;\n}\n\nsigned main(){/*\n    for(int i = 1;i <= 100;i ++){\n        cout << i << \" | \" << log3(i) << endl;\n    }\n    return 0;*/\n    cin >> T;\n    while( T -- ){\n        cin >> l >> r;\n        /*\n        int ans = log3(l);\n        for(int i = l;i <= r;i ++){\n            ans += log3(i);\n        }*/\n        int ans = log3(l)+log3(r) , log_i , jumper;\n        for(int i = l;i <= r;i ++){\n            log_i = log3(i);\n            jumper = poww( log_i );\n            //cout << \"jumper: \" << jumper  << \" |ans: \" << ans << endl;\n            if( jumper < r ) ans += (jumper-i)*log_i , i = jumper-1;\n            else ans += (r-i)*log_i , i = r;\n        }\n        cout << ans << endl;\n\n    }\n    return 0;\n}\n```\n\n---\n\n[F.Expected Median](https://codeforces.com/contest/1999/problem/F)\n\n假设 $1$ 有 $x$ 个，$0$ 有 $y$ 个，那么 $ans=\\sum (C_x^i+C_y^{k-i}) $，即从 $x$ 中选 $i$ 个，从 $y$ 中选 $k-i$ 个的所有可能，其中 $i$ 需要满足 从 $x$ 中取出的元素多余从 $y$ 中取出（即 $1$ 比 $0$ 多，这样的中位数才能是 $1$ ）\n\n计算组合数需要用阶乘，记得预处理（悲\n\n```\n#include<iostream>\n#include<string>\n#define int long long\nusing namespace std;\n\nconst int N = 2e5 , p = 1e9+7;\nint T , n , k;\nint a[N+10];\nint num_0 , num_1;\nint jc[N+10];\n\nvoid init(){\n    jc[0] = 1;\n    for(int i = 1;i <= N;i ++){\n        jc[i] = jc[i-1]*i;\n        jc[i] %= p;\n    }\n    return ;\n}\n\nint qpow(long long a, int b) {\n  int ans = 1;\n  a = (a % p + p) % p;\n  for (; b; b >>= 1) {\n    if (b & 1) ans = (a * ans) % p;\n    a = (a * a) % p;\n  }\n  return ans;\n}\n\nint inv( int x ){\n    return qpow( x , p-2 );\n}\n\nint C( int nn , int mm ){\n    int ans = 1;\n    ans *= jc[nn];\n    ans %= p;\n    ans *= inv(jc[mm]);\n    ans %= p;\n    ans *= inv(jc[nn-mm]);\n    ans %= p;\n    return ans;\n}\n\nsigned main(){\n    init();\n    cin >> T;\n    while( T -- ){\n        cin >> n >> k;\n        num_0 = num_1 = 0;\n        for(int i = 1;i <= n;i ++){\n            cin >> a[i];\n            if( a[i] ) num_1 ++ ; else num_0 ++;\n        }\n        int ans = 0;\n        for(int i = min(num_1,k);i>k/2 and (k-i)<=num_0;i --){\n            //cout << num_0 << \" \" <<  k-i << \" \" << num_1 << \" \" << i << endl;\n            ans += C( num_0 , k-i ) * C( num_1 , i );\n            ans %= p;\n        }\n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n\n---\n\n[G1.Ruler (easy version)](https://codeforces.com/contest/1999/problem/G1)\n\n简单的二分法\n\n```\n#include<iostream>\n#include<string>\n#define int long long\nusing namespace std;\n\nconst int N = 2e5 , p = 1e9+7;\nint T , t;\n\nint ef( int l , int r ){\n    if( l == r ) return l;\n    int mid = (l+r)>>1;\n    cout << \"? \" << mid << \" \" << mid << endl;\n    cout << flush;\n    int t;\n    cin >> t;\n    //int redder = mid + ( mid>=100?1:0);\n    //t = redder*redder;\n    if( t == (mid+1)*(mid+1) ) return ef( l , mid );\n    else return ef( mid+1 , r );\n}\n\nsigned main(){\n    cin >> T;\n    while( T -- ){\n        int ans = ef( 2 , 999 );\n        cout << \"! \" << ans << endl;\n        cout << flush;\n    }\n    return 0;\n}\n```\n\n---\n\n[G2.Ruler (hard version)](https://codeforces.com/contest/1999/problem/G2)\n\n三分法，写法有很多，七次询问可以确定一个数即可\n\n```\n#include<iostream>\n#include<string>\n#define int long long\nusing namespace std;\n\nconst int N = 2e5 , p = 1e9+7;\nint T , t;\n\nint ef( int l , int r ){\n    if( l == r ) return l;\n    int mid_l = l+(r-l)/3 , mid_r = l+(r-l)/3*2;\n    cout << \"? \" << mid_l << \" \" << mid_r << endl;\n    cout << flush;\n    int t;\n    cin >> t;/*\n    int lll = mid_l + ( mid_l>=700?1:0);\n    int rrr = mid_r + ( mid_r>=700?1:0);\n    t = lll*rrr;*/\n    if( t == (mid_l+1)*(mid_r+1) ) return ef( l , mid_l );\n    else if( t == (mid_l)*(mid_r+1) ) return ef( mid_l+1 , mid_r );\n    else return ef( mid_r+1 , r );\n}\n\nsigned main(){\n    cin >> T;\n    while( T -- ){\n        int ans = ef( 2 , 999 );\n        cout << \"! \" << ans << endl;\n        cout << flush;\n    }\n    return 0;\n}\n```\n\n","tags":["算法竞赛"]},{"title":"数位板+onenote铅笔橡皮快速切换的实现方式","url":"/2024/08/06/数位板-onenote铅笔橡皮快速切换的实现方式/","content":"\n配置：高漫1060pro + windows11 + onenote(office最新版)\n\n众所周知onenote最新版取消了`笔收藏夹`这一选项，导致选择画笔很不方便，一般情况下无法使画笔和橡皮快速切换，在一番探索下得到了以下方案\n\n<!--more-->\n\n![](数位板-onenote铅笔橡皮快速切换的实现方式\\聊天记录.jpg)\n\n笔者之前使用c++做过控制键鼠点击等程序，但是黑窗口弹出需要一定时间很不方便，在和朋友交流下得到了知道了有一个叫`AutoHotkey`的编程语言，专门用来进行这样的操作\n\n![](数位板-onenote铅笔橡皮快速切换的实现方式\\插入图片1.png)\n\n![](数位板-onenote铅笔橡皮快速切换的实现方式\\插入图片2.png)\n\n由上图可以知道切换画笔的操作是`Alt+D+G+键盘右键*多次+键盘左键（切回黑色画笔）+Enter`\n\n这样就可以编写`ahk`脚本\n\n```\nSend {Alt Down}\nSleep 50\nSend {Alt Up}\nSend {D Down}\nSleep 50\nSend {D Up}\nSend {G Down}\nSleep 50\nSend {G Up}\nSend {Right Down}\nSleep 50\nSend {Right Up}\nSend {Right Down}\nSleep 50\nSend {Right Up}\nSend {Right Down}\nSleep 50\nSend {Right Up}\nSend {Left Down}\nSleep 50\nSend {Left Up}\nSend {Enter Down}\nSleep 50\nSend {Enter Up}\n\n;Click, 440, 180 ;也可以直接让鼠标点击固定坐标\n\nreturn\n```\n\n具体延迟和操作可以自行更改\n\n然后放入路径（前提是数位板支持）就可以了\n\n![](数位板-onenote铅笔橡皮快速切换的实现方式\\插入图片3.png)\n\nUPD.后来我发现切换功能里的这个可以一键切换···\n\n![](数位板-onenote铅笔橡皮快速切换的实现方式\\插入图片4.png)\n\n不过无论如何是可以用了\n\n不支持运行程序和切换功能的数位板，估计不能一键切换了\n","tags":["misc"]},{"title":"CRYTPO 24.8第一周刷题记录","url":"/2024/08/05/CRYTPO-24-8第一周刷题记录/","content":"\n### [SWPUCTF 2021 新生赛]crypto3\n\n<!--more-->\n\n```\nfrom gmpy2 import *\nfrom Crypto.Util.number import *\n\nflag  = '******************'\n\np = getPrime(512)\nq = getPrime(512)\nm1 = bytes_to_long(bytes(flag.encode()))\n\nn = p*q\n\nflag1 = pow(m1,p,n)\nflag2 = pow(m1,q,n)\nprint('flag1= '+str(flag1))\nprint('flag2= '+str(flag2))\nprint('n= '+str(n))\n\n\n#flag1= 17893542812755845772427795161304049467610774531005620109503081344099161906017295486868699578946474114607624347167976713200068059018517606363517478396368430072890681401898145302336139240273132723451063402106360810413024642916851746118524166947301681245568333254648265529408446609050354235727237078987509705857\n#flag2= 95580409405085606847879727622943874726633827220524165744517624606566789614499137069562997931972825651309707390763700301965277040876322904891716953565845966918293178547100704981251056401939781365264616997055296773593435626490578886752446381493929807909671245959154990639046333135728431707979143972145708806954\n#n= 140457323583824160338989317689698102738341061967768153879646505422358544720607476140977064053629005764551339082120337223672330979298373653766782620973454095507484118565884885623328751648660379894592063436924903894986994746394508539721459355200184089470977772075720319482839923856979166319700474349042326898971\n```\n\n---\n\nhttps://www.osgeo.cn/sagemath/tutorial/index.html\n\n得到\n$$\n\\left\\{\n\\begin{aligned}\nm^p \\equiv h_1\\ mod\\ n\\\\\nm^q \\equiv h_2\\ mod\\ n\\\\\n\\end{aligned}\n\\right.\n$$\n由费马小定理，因为 $p$ $q$ 为质数，故\n$$\n\\left\\{\n\\begin{aligned}\nm^p \\equiv m\\ mod\\ p\\\\\nm^q \\equiv m\\ mod\\ q\\\\\n\\end{aligned}\n\\right.\n$$\n则有\n$$\n\\left\\{\n\\begin{aligned}\nh_1 \\equiv m+k_1*p\\ mod\\ n\\\\\nh_2 \\equiv m+k_2*q\\ mod\\ n\\\\\n\\end{aligned}\n\\right.\n$$\n即\n$$\n\\left\\{\n\\begin{aligned}\nh_1 \\equiv m+k_1*p\\ + k_3*p*q\\\\\nh_2 \\equiv m+k_2*q\\ + k_4*p*q\\\\\n\\end{aligned}\n\\right.\n$$\n可以得到，在 $Zmod(n)$ 下，有\n$$\n\\left\\{\n\\begin{aligned}\nh_1+h_2 & = 2*m+k_1*p+k_2*q\\ \\\\\nh_1*h_2 & = m^2+(k_1*p+k_2*q)*m\\\\\n\\end{aligned}\n\\right.\n$$\n可以消去 $k_1$ $k_2$ 得到式子\n\n$m^2 - (h1+h2)*m + h1*h2=0$\n\n代码：\n\n```\n#sage\nfrom Crypto.Util.number import *\n\nh1= \nh2= \nn= \n\nPR.<m> = PolynomialRing( Zmod(n) )\nf = m^2 - (h1+h2)*m + h1*h2\na = int(str(f.small_roots( X=2^400 )[0]))\n\nprint( flag )\nprint( long_to_bytes(flag) )\n```\n\noutput:\n\n```\n1920535408007397834236393374892057067669865609963495845501\nb'NSSCTF{why_gongmo_again}'\n```\n\nflag:`NSSCTF{why_gongmo_again}`\n\n### [BUUCTF·V&N2020 公开赛]easy_RSA\n\ntag.暴力分解 小技巧\n\n```\nfrom random import randint\nfrom gmpy2 import *\nfrom Crypto.Util.number import *\n\ndef getprime(bits):\n    while 1:\n        n = 1\n        while n.bit_length() < bits:\n            n *= next_prime(randint(1,1000))\n        if isPrime(n - 1):\n            return n - 1\n\nm = bytes_to_long(b'flag{************************************}')\n\np = getprime(505)\nq = getPrime(512)\nr = getPrime(512)\nassert m < q\n\nn = p * q * r\ne = 0x10001\nd = invert(q ** 2, p ** 2)\nc = pow(m, 2, r)\ncipher = pow(c, e, n)\n\nprint(n)\nprint(d)\nprint(cipher)\n```\n\n---\n\n使用factordb分解得到$p\\ q\\ r$的数值\n\n`c = pow(m, 2, r)`已知 $m\\ r$ 求 $c$\n\n求 $x^n\\equiv a\\ mod\\ p$ 的解的方法：\n\n```\nfrom sympy.ntheory.residue_ntheory import nthroot_mod\nx=nthroot_mod(a,n,p)\n```\n\nexp:\n\n```\nfrom Crypto.Util.number import long_to_bytes\nimport gmpy2\nimport math\n\nn = \nd = \nm = \ne = 0x10001\np = 102634610559478918970860957918259981057327949366949344137104804864768237961662136189827166317524151288799657758536256924609797810164397005081733039415393\nq = 7534810196420932552168708937019691994681052660068275906973480617604535381306041583841106383688654426129050931519275383386503174076258645141589911492908993\nr = 10269028767754306217563721664976261924407940883784193817786660413744866184645984238866463711873380072803747092361041245422348883639933712733051005791543841\n\nd1 = gmpy2.invert( e , (p-1)*(q-1)*(r-1) )\nc1 = pow( m , d1 , n )\n\nfrom sympy.ntheory.residue_ntheory import nthroot_mod\nc = nthroot_mod( c1 , 2 , r )\nprint( c )\nprint( long_to_bytes( c ) )\n```\n\nadd.在其他师傅的wp上摘到的Tonelli–Shanks算法 求解二次平方根\n\n```\nimport gmpy2\nfrom Crypto.Util.number import *\ndef legendre(a, p):\n    return pow(a, (p - 1) // 2, p)\n\n\ndef tonelli(n, p):\n    assert legendre(n, p) == 1\n    q = p - 1\n    s = 0\n    while q % 2 == 0:\n        q //= 2\n        s += 1\n    if s == 1:\n        return pow(n, (p + 1) // 4, p)\n    for z in range(2, 10000):\n#    for z in range(2, p):\n        if p - 1 == legendre(z, p):\n            break\n    c = pow(z, q, p)\n    r = pow(n, (q + 1) // 2, p)\n    t = pow(n, q, p)\n    m = s\n    t2 = 0\n    while (t - 1) % p != 0:\n        t2 = (t * t) % p\n        for i in range(1, m):\n            if (t2 - 1) % p == 0:\n                break\n            t2 = (t2 * t2) % p\n        b = pow(c, 1 << (m - i - 1), p)\n        r = (r * b) % p\n        c = (b * b) % p\n        t = (t * c) % p\n        m = i\n    return r\nn=7941371739956577280160664419383740967516918938781306610817149744988379280561359039016508679365806108722198157199058807892703837558280678711420411242914059658055366348123106473335186505617418956630780649894945233345985279471106888635177256011468979083320605103256178446993230320443790240285158260236926519042413378204298514714890725325831769281505530787739922007367026883959544239568886349070557272869042275528961483412544495589811933856131557221673534170105409\nd=gmpy2.mpz(7515987842794170949444517202158067021118454558360145030399453487603693522695746732547224100845570119375977629070702308991221388721952258969752305904378724402002545947182529859604584400048983091861594720299791743887521228492714135449584003054386457751933095902983841246048952155097668245322664318518861440)\ncipher=1618155233923718966393124032999431934705026408748451436388483012584983753140040289666712916510617403356206112730613485227084128314043665913357106301736817062412927135716281544348612150328867226515184078966397180771624148797528036548243343316501503364783092550480439749404301122277056732857399413805293899249313045684662146333448668209567898831091274930053147799756622844119463942087160062353526056879436998061803187343431081504474584816590199768034450005448200\n\n#python2 -m primefac -vs -m=p+1  7941371739956577280160664419383740967516918938781306610817149744988379280561359039016508679365806108722198157199058807892703837558280678711420411242914059658055366348123106473335186505617418956630780649894945233345985279471106888635177256011468979083320605103256178446993230320443790240285158260236926519042413378204298514714890725325831769281505530787739922007367026883959544239568886349070557272869042275528961483412544495589811933856131557221673534170105409\np=gmpy2.mpz(102634610559478918970860957918259981057327949366949344137104804864768237961662136189827166317524151288799657758536256924609797810164397005081733039415393)\n\nq2=gmpy2.invert(d,p**2)\nfor i in range(1000000):\n\tq=gmpy2.iroot(q2+i*p**2,2)\n\tif(q[1]==1):\n\t\tprint q[0],i\n\t\tbreak\nq=q[0]\nr=n//p//q\n\ne=0x10001\nphi=(p-1)*(q-1)*(r-1)\nD=gmpy2.invert(e,phi)\nc=pow(cipher,D,n)\nprint c\n\nm=tonelli(c,r)\nprint m\nprint long_to_bytes(m)\n#flag{fd462593-25e4-4631-a96a-0cd5c72b2d1b}\n```\n\n---\n\n### [De1CTF2019]babyrsa\n\ntag: 共膜攻击 | 低密度指数攻击 | 暴力分解 | e,phi不互质pro\n\n```\nimport binascii\nfrom data import e1,e2,p,q1p,q1q,hint,flag\n\nn =  [20129615352491765499340112943188317180548761597861300847305827141510465619670536844634558246439230371658836928103063432870245707180355907194284861510906071265352409579441048101084995923962148527097370705452070577098780246282820065573711015664291991372085157016901209114191068574208680397710042842835940428451949500607613634682684113208766694028789275748528254287705759528498986306494267817198340658241873024800336013946294891687591013414935237821291805123285905335762719823771647853378892868896078424572232934360940672962436849523915563328779942134504499568866135266628078485232098208237036724121481835035731201383423L, 31221650155627849964466413749414700613823841060149524451234901677160009099014018926581094879840097248543411980533066831976617023676225625067854003317018794041723612556008471579060428898117790587991055681380408263382761841625714415879087478072771968160384909919958010983669368360788505288855946124159513118847747998656422521414980295212646675850690937883764000571667574381419144372824211798018586804674824564606122592483286575800685232128273820087791811663878057827386379787882962763290066072231248814920468264741654086011072638211075445447843691049847262485759393290853117072868406861840793895816215956869523289231421L, 29944537515397953361520922774124192605524711306753835303703478890414163510777460559798334313021216389356251874917792007638299225821018849648520673813786772452822809546571129816310207232883239771324122884804993418958309460009406342872173189008449237959577469114158991202433476710581356243815713762802478454390273808377430685157110095496727966308001254107517967559384019734279861840997239176254236069001453544559786063915970071130087811123912044312219535513880663913831358790376650439083660611831156205113873793106880255882114422025746986403355066996567909581710647746463994280444700922867397754748628425967488232530303L, 25703437855600135215185778453583925446912731661604054184163883272265503323016295700357253105301146726667897497435532579974951478354570415554221401778536104737296154316056314039449116386494323668483749833147800557403368489542273169489080222009368903993658498263905567516798684211462607069796613434661148186901892016282065916190920443378756167250809872483501712225782004396969996983057423942607174314132598421269169722518224478248836881076484639837343079324636997145199835034833367743079935361276149990997875905313642775214486046381368619638551892292787783137622261433528915269333426768947358552919740901860982679180791L]\nc =  [19131432661217908470262338421299691998526157790583544156741981238822158563988520225986915234570037383888112724408392918113942721994125505014727545946133307329781747600302829588248042922635714391033431930411180545085316438084317927348705241927570432757892985091396044950085462429575440060652967253845041398399648442340042970814415571904057667028157512971079384601724816308078631844480110201787343583073815186771790477712040051157180318804422120472007636722063989315320863580631330647116993819777750684150950416298085261478841177681677867236865666207391847046483954029213495373613490690687473081930148461830425717614569L, 15341898433226638235160072029875733826956799982958107910250055958334922460202554924743144122170018355117452459472017133614642242411479849369061482860570279863692425621526056862808425135267608544855833358314071200687340442512856575278712986641573012456729402660597339609443771145347181268285050728925993518704899005416187250003304581230701444705157412790787027926810710998646191467130550713600765898234392350153965811595060656753711278308005193370936296124790772689433773414703645703910742193898471800081321469055211709339846392500706523670145259024267858368216902176489814789679472227343363035428541915118378163012031L, 18715065071648040017967211297231106538139985087685358555650567057715550586464814763683688299037897182845007578571401359061213777645114414642903077003568155508465819628553747173244235936586812445440095450755154357646737087071605811984163416590278352605433362327949048243722556262979909488202442530307505819371594747936223835233586945423522256938701002370646382097846105014981763307729234675737702252155130837154876831885888669150418885088089324534892506199724486783446267336789872782137895552509353583305880144947714110009893134162185382309992604435664777436197587312317224862723813510974493087450281755452428746194446L, 2282284561224858293138480447463319262474918847630148770112472703128549032592187797289965592615199709857879008271766433462032328498580340968871260189669707518557157836592424973257334362931639831072584824103123486522582531666152363874396482744561758133655406410364442174983227005501860927820871260711861008830120617056883514525798709601744088135999465598338635794275123149165498933580159945032363880613524921913023341209439657145962332213468573402863796920571812418200814817086234262280338221161622789516829363805084715652121739036183264026120868756523770196284142271849879003202190966150390061195469351716819539183797L]\nf=lambda m,e,n,c:pow(m,e,n)==c\nassert(sum(map(f,[p]*4,[4]*4,n,c))==4)\n\nee1 = 42\nee2 = 3\nce1 =  45722651786340123946960815003059322528810481841378247280642868553607692149509126962872583037142461398806689489141741494974836882341505234255325683219092163052843461632338442529011502378931140356111756932712822516814023166068902569458299933391973504078898958921809723346229893913662577294963528318424676803942288386430172430880307619748186863890050113934573820505570928109017842647598266634344447182347849367714564686341871007505886728393751147033556889217604647355628557502208364412269944908011305064122941446516990168924709684092200183860653173856272384\nce2 =  13908468332333567158469136439932325992349696889129103935400760239319454409539725389747059213835238373047899198211128689374049729578146875309231962936554403287882999967840346216695208424582739777034261079550395918048421086843927009452479936045850799096750074359160775182238980989229190157551197830879877097703347301072427149474991803868325769967332356950863518504965486565464059770451458557744949735282131727956056279292800694203866167270268988437389945703117070604488999247750139568614939965885211276821987586882908159585863514561191905040244967655444219603287214405014887994238259270716355378069726760953320025828158\ntmp =  864078778078609835167779565982540757684070450697854309005171742813414963447462554999012718960925081621571487444725528982424037419052194840720949809891134854871222612682162490991065015935449289960707882463387\nn  =  15911581555796798614711625288508309704791837516232122410440958830726078821069050404012820896260071751380436992710638364294658173571101596931605797509712839622479368850251206419748090059752427303611760004621378226431226983665746837779056271530181865648115862947527212787824629516204832313026456390047768174765687040950636530480549014401279054346098030395100387004111574278813749630986724706263655166289586230453975953773791945408589484679371854113457758157492241225180907090235116325034822993748409011554673180494306003272836905082473475046277554085737627846557240367696214081276345071055578169299060706794192776825039\nassert(pow(e1,ee1,n)==ce1)\nassert(pow(e2+tmp,ee2,n)==ce2)\n\ne = 46531\nn = 16278524034278364842964386062476113517067911891699789991355982121084973951738324063305190630865511554888330215827724887964565979607808294168282995825864982603759381323048907814961279012375346497781046417204954101076457350988751188332353062731641153547102721113593787978587135707313755661153376485647168543680503160420091693269984008764444291289486805840439906620313162344057956594836197521501755378387944609246120662335790110901623740990451586621846212047950084207251595169141015645449217847180683357626383565631317253913942886396494396189837432429078251573229378917400841832190737518763297323901586866664595327850603\nc = 14992132140996160330967307558503117255626925777426611978518339050671013041490724616892634911030918360867974894371539160853827180596100892180735770688723270765387697604426715670445270819626709364566478781273676115921657967761494619448095207169386364541164659123273236874649888236433399127407801843412677293516986398190165291102109310458304626261648346825196743539220198199366711858135271877662410355585767124059539217274691606825103355310348607611233052725805236763220343249873849646219850954945346791015858261715967952461021650307307454434510851869862964236227932964442289459508441345652423088404453536608812799355469\nhint=int(binascii.hexlify(hint),16)\nassert(q1p*q1q==n)\nassert(q1p<q1q)\nassert(c==pow(hint,e,n))\n\nflag=int(binascii.hexlify(flag),16)\nq1=q1p\nq2 =  114401188227479584680884046151299704656920536168767132916589182357583461053336386996123783294932566567773695426689447410311969456458574731187512974868297092638677515283584994416382872450167046416573472658841627690987228528798356894803559278308702635288537653192098514966089168123710854679638671424978221959513\nc1 =  262739975753930281690942784321252339035906196846340713237510382364557685379543498765074448825799342194332681181129770046075018122033421983227887719610112028230603166527303021036386350781414447347150383783816869784006598225583375458609586450854602862569022571672049158809874763812834044257419199631217527367046624888837755311215081173386523806086783266198390289097231168172692326653657393522561741947951887577156666663584249108899327053951891486355179939770150550995812478327735917006194574412518819299303783243886962455399783601229227718787081785391010424030509937403600351414176138124705168002288620664809270046124\nc2 =  7395591129228876649030819616685821899204832684995757724924450812977470787822266387122334722132760470911599176362617225218345404468270014548817267727669872896838106451520392806497466576907063295603746660003188440170919490157250829308173310715318925771643105064882620746171266499859049038016902162599261409050907140823352990750298239508355767238575709803167676810456559665476121149766947851911064706646506705397091626648713684511780456955453552020460909638016134124590438425738826828694773960514221910109473941451471431637903182205738738109429736425025621308300895473186381826756650667842656050416299166317372707709596\nassert(c1==pow(flag,e1,p*q1))\nassert(c2==pow(flag,e2,p*q2))\n```\n\n---\n\n对于第一部分：使用共膜攻击即可\n\n前置知识：\n\n1. lambda:相当于一个函数，表达式为 `函数名=lambda 输入值:函数式`，常搭配`map`使用\n2. map:表达式为`map(函数名,输入值)`，返回函数名对应的函数式的结果\n\n翻译一下，原式相当于 $p^4\\equiv\\ c_i\\ mod\\ n_i$\n\n通过四组 $c_i\\ n_i$ 利用中国剩余定理即可求出 $p^4$ ，然后开根即可\n\n```\ndef CRT( r , p ):\n    M = 1\n    for i in p:\n        M *= i\n    m = []\n    for i in p:\n        m.append( M // i )\n    ans = 0\n    for i in range( len(p) ):\n        ans += r[i] * m[i] * invert( m[i] , p[i] )\n        ans %= M\n    return ans\n\n#part1 共膜攻击\ndef part1():\n    n =  \n    c =  \n    p4 = CRT( c , n )\n    p = iroot( p4 , 4 )[0]\n    #print( p )\n    return p\n```\n\n对于第二部分：使用低密度指数攻击\n\n$e1\\ e2$很小，所以可以直接爆破\n\n```\nimport gmpy2\nk = 0\nwhile True:\n    if gmpy2.iroot( ce1 + n*k , ee1 )[1] == True:\n        e1 = gmpy2.iroot( ce1 + n*k , ee1 )[0]\n        break\n    k += 1\nprint( e1 )\nk = 0\nwhile True:\n    if gmpy2.iroot( ce2 + n*k , ee2 )[1] == True:\n        e2 = gmpy2.iroot( ce2 + n*k , ee2 )[0] - tmp\n        break\n    k += 1\nprint( e2 )\n```\n\n得到\n\n```\ne1 = 15218928658178\ne2 = 381791429275130\n```\n\n也可以使用先估计 $k$ 范围的做法\n\n已知$(e2+tmp)^{ee2}=ce2+k*n$\n\n发现ee2=3，考虑低密度指数攻击\n\n计算`print( tmp**3 / n )`\n\n得到`40545.874109734694`\n\n因而可以穷举k，可以得到$e2+tmp$\n\n对于前一半，运行`print( len(str(ce1)) , len(str(n)) )`；发现相差五十多位，是个小概率事件；所以认为与n无关，可以直接开根\n\n```\n#part2 低密度指数攻击\ndef part2():\n    ee1 = 42\n    ee2 = 3\n    ce1 = \n    ce2 =  \n    tmp =  \n    n  =  \n    print( tmp**3 / n ) \n    for k in range( 40000 , 41000 ):\n        if iroot( ce2 + k*n , ee2 )[1]:\n            e2 = iroot( ce2 + k*n , ee2 )[0] - tmp \n            break\n    #print( e2 )\n    \n    #print( len(str(ce1)) , len(str(n)) )\n    e1 = iroot( ce1 , ee1 )[0]\n    #print( e1 )\n    return e1 , e2\n```\n\n对于第三部分：直接分解即可\n\n```\ndef part3():\n    e = \n    n = \n    c = \n    p = \n    q = \n    phi = (p-1)*(q-1)\n    d = invert( e , phi )\n    hint = pow( c , d , n )\n    print( long_to_bytes( hint ) )\n    return min( p , q )\n```\n\n得到hint:`b'orz...you.found.me.but.sorry.no.hint...keep.on.and.enjoy.it!'`（和flag并无关系）\n\n对于第四部分：\n\n已知` p , q1 , q2 , e1 , e2 `，但是 e1 , e2 和 phi1 , phi2 不互质，无法正常求私钥 d\n\n一般来说遇到这种情况都是让 $e$ 除去其与欧拉函数的最大公约数，让这两个数重新互质，然后求 $m^{gcd(e,\\phi)}$的值\n\n```\na = gcd( e1 , (p-1) * (q1-1) )\nb = gcd( e2 , (p-1) * (q2-1) )\nprint( a , b ) \n```\n\n得到 $a=14,b=14$，发现 $m^{14}$ 的幂次比较高，不好处理\n\n $(m^{2})^{7}=m_1\\ mod\\ q_1\\\\ (m^{2})^{7}=m_2\\ mod\\ q_2$\n\n$(m^2)^7\\%(q1*q2)$组成一个新的rsa解密，$e=7\\ ,\\ n=q1*q2\\ ,\\ m=m^2\\ ,\\ c=m^{14}$\n\nreference:\n\nhttps://blog.csdn.net/a5555678744/article/details/117308377\n\nhttps://blog.csdn.net/qq_57235775/article/details/131167215\n\n```\nn =  [ q1, q2 ]\na = gmpy2.gcd(e1,(p-1)*(q1-1))\nb = gmpy2.gcd(e2,(p-1)*(q2-1))\nc = [ gmpy2.powmod(c1,gmpy2.invert(e1//a,(p-1)*(q1-1)),q1)\n    , gmpy2.powmod(c2,gmpy2.invert(e2//b,(p-1)*(q2-1)),q2)]\nM = n[0] * n[1]\nm = [0]*2\ninv = [0]*2\nx = 0\nfor i in range(2):\n    m[i]=M//n[i]\n    inv[i]=gmpy2.invert(m[i],n[i])\n    x+=(c[i]*inv[i]*m[i])\nx = x % M\ne=7\nd=gmpy2.invert(e,(q1-1)*(q2-1))\nflag=gmpy2.iroot(gmpy2.powmod(x,d,q1*q2),2)[0]\nprint(long_to_bytes(flag))\n```\n\nflag:`de1ctf{9b10a98b-71bb-4bdf-a6ff-f319943de21f}`\n\n---\n\n### [DASCTF Sept X 浙江工业大学秋季挑战赛]签到\n\n```\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom Crypto.Util.number import *\nimport random\nflag=b'flag{******************}'\nn = 2 ** 256\nflaglong=bytes_to_long(flag)\nm = random.randint(2, n-1) | 1\nc = pow(m, flaglong, n)\nprint('m = ' + str(m))\nprint('c = ' + str(c))\n\n# m = 73964803637492582853353338913523546944627084372081477892312545091623069227301\n# c = 21572244511100216966799370397791432119463715616349800194229377843045443048821\n```\n\n---\n\ndiscrete_log()使用示例：\n\n```\n>>> from sympy.ntheory import discrete_log\n>>> discrete_log(41, 15, 7)\n3\n```\n\n即 $7^3\\equiv 15(mod\\ 41)$\n\n```\nimport sympy\nimport binascii\nm = 73964803637492582853353338913523546944627084372081477892312545091623069227301\nc = 21572244511100216966799370397791432119463715616349800194229377843045443048821\nn = 2 ** 256\nflag=sympy.discrete_log(n,c,m)\nprint(binascii.unhexlify(hex(flag)[2:]))\n```\n\nflag:`flag{DASCTF_zjut}`\n","tags":["cryptoCTF"]},{"title":"Codeforces Round 963 (Div. 2)题解","url":"/2024/08/05/Codeforces-Round-963-Div-2-题解/","content":"\n[题目链接](https://codeforces.com/contest/1993)\n\n本场比赛应该算是今年我打的第一场算法竞赛，也是NOIP2021结束之后难得发挥出来的比赛。ABC都是比较简单的题，D是`二分+dp`，比较难想\n\nE最终还是不会，疑似是一个高级dp\n\n<!--more-->\n\n[A.Question Marks](https://codeforces.com/contest/1993/problem/A)\n\n观察样例就能打出来\n\n```\n#include<iostream>\n#include<string>\nusing namespace std;\n\nsigned main(){\n    int t;cin >> t;\n    while( t -- ){\n        string s;int n;cin >> n;cin >> s;\n        int a , b , c , d , e;a = b = c = d = e = 0;\n        for(int i = 0;i < s.length();i ++){\n            if( s[i] == 'A' ) a ++;\n            if( s[i] == 'B' ) b ++;\n            if( s[i] == 'C' ) c ++;\n            if( s[i] == 'D' ) d ++;\n            if( s[i] == '?' ) e ++;\n        }\n        a = max( a-n , 0 );\n        b = max( b-n , 0 );\n        c = max( c-n , 0 );\n        d = max( d-n , 0 );\n        //cout << \"a: \" << a << endl;\n        cout << n*4-a-b-c-d-e << endl;\n    }\n    return 0;\n}\n```\n\n---\n\n[B.Parity and Sum](https://codeforces.com/contest/1993/problem/B)\n\n策略是取出最大的奇数，和所有的偶数从小到大进行比较，如果比当前偶数大，那么将最大的奇数+=当前偶数，否则ans需要+1（仅加一次，此时表示当前最大的奇数不如这个偶数大，只需要进行一次最大奇数加上最大偶数的操作（即ans+=1）即可获得可以使任意偶数变为奇数的大数，如果最大的奇数从小到大累加偶数都能比下一个偶数更大则不需要进行这一步操作）\n\n全奇全偶需要特判\n\n```\n#include<iostream>\n#include<string>\n#include<algorithm>\n#define int long long\nusing namespace std;\n\nint t , n , a[200010];\n\nsigned main(){\n    cin >> t;\n    while( t -- ){\n        cin >> n;\n        int ans = 0;\n        int lag_d = 0;\n        for(int i = 1;i <= n;i ++){\n            cin >> a[i];\n            if( a[i] % 2 == 0 ) ans ++;\n            else lag_d = max( a[i] , lag_d );\n        }\n        sort( a + 1 , a + n + 1 );\n        if( ans == n ) ans = 0;\n        if( ans ){\n            for(int i = 1;i <= n;i ++){\n                if( a[i] % 2 == 0 ){\n                    if( a[i] > lag_d ){\n                        ans ++;\n                        //cout << \"error: \"<< i << \" \" << a[i] << \" \" << lag_d << endl;\n                        break;\n                    }\n                    else{\n                        lag_d += a[i];\n                    }\n                } \n            }\n        }\n        \n        cout << ans << endl;\n    }\n    return 0;\n}\n```\n\n---\n\n[C.Light Switches](https://codeforces.com/contest/1993/problem/C)\n\n首先可以确定，最终答案在[最大值,最大值+k]区间，如果这个区间没有答案，那么输出-1\n\nk过大，直接扫肯定会超时；所以根据每个$a_i$计算它相应的区间（宽度为k，但是左右区间不同），然后将$l$取$max$，将$r$取$min$，如果$l<r$那么答案就是$l$，否则没有答案\n\n```\n#include<iostream>\n#include<string>\n#include<algorithm>\n#define int long long\nusing namespace std;\n\nint t , n , k , a[200010];\n\nsigned main(){\n    cin >> t;\n    while( t -- ){\n        cin >> n >> k;\n        int maxn = 0;\n        for(int i = 1;i <= n;i ++){\n            cin >> a[i];\n            maxn = max( maxn , a[i] );\n        }\n        int l , r;l = maxn , r = maxn + k;\n        for(int i = 1;i <= n;i ++){\n            int rat = (maxn - a[i]) / k;\n            if( rat % 2 ) rat ++;\n            l = max( a[i] + rat * k , l );\n            r = min( a[i] + rat * k + k , r );\n        }\n        //cout << \"demo: \"<< l << \" \" << r << endl;\n        if( l >= r ) cout << -1 << endl;\n        else cout << l << endl;\n    }\n    return 0;\n}\n```\n\n---\n\n以下题目结为赛后补题：\n\n[D.Med-imize](https://codeforces.com/contest/1993/problem/D)\n\n利用二分中位数，我们可以用 $log(max(a_i))$ 的代价使中位数由未知变为已知\n\n观察得到一个结论——最终序列的 $id$ 总是在 $mod\\ k$ 下能填满 $[0,n\\%k]$，以此可以选择出最优化的一组解（正好填满 $[0,n\\%k]$ ），即尽量多选大于中位数的选项，如果总共选到大于中位数的数字多余小于的，那么可以判断这组中位数是可以用的\n\n最终输出最大的中位数即可\n\n```\n#include<iostream>\n#define int long long\nusing namespace std;\n\nconst int N = 5e5;\n\nint t , n , k , a[N+10];\nint dp[N+10] , b[N+10];\n\nbool checker( int mid ){\n    for(int i = 0;i < n;i ++){\n        if( a[i] >= mid ){\n            b[i] = 1;\n        }\n        else{\n            b[i] = -1;\n        }\n    }\n    dp[0] = b[0];\n    for(int i = 1;i < n;i ++){\n        if( i % k == 0 ){#这一组的开头，如果前面的或者当前位置下有1就可以是1\n            dp[i] = max( dp[i-k] , b[i] );\n        }else{#直接选当前的，i不是第一个循环的话，则可以继承上一个循环的（反正是选最大值）\n            dp[i] = dp[i-1] + b[i];\n            if( i > k ){\n                dp[i] = max( dp[i] , dp[i-k] );\n            }\n        }\n    }\n    return dp[n-1] > 0;\n}\n\nsigned main(){\n    cin >> t;\n    while( t -- ){\n        cin >> n >> k;\n        for(int i = 0;i < n;i ++){\n            cin >> a[i];\n        }\n        int l = 1 , r = 1e9;\n        while( l <= r ){\n            int mid = (l+r)>>1;\n            if( checker(mid) ){\n                l = mid+1;\n            }\n            else{\n                r = mid-1;\n            }\n        }\n        cout << r << endl;\n    }   \n    return 0;\n}\n```\n\n","tags":["算法竞赛"]},{"title":"BUUCTF crypto wp","url":"/2024/06/06/BUUCTF-crypto-wp/","content":"\n### [NewStarCTF 2023 公开赛道]Rabin's RSA\n\n```\nfrom Crypto.Util.number import *\nfrom secret import flag\np = getPrime(64)\nq = getPrime(64)\nassert p % 4 == 3\nassert q % 4 == 3\n\nn = p * q\n\ne = 2\nm = bytes_to_long(flag)\n\nc = pow(m,e,n)\n\nprint('n =', n)\nprint('c =', c)\n\n# n = 201354090531918389422241515534761536573\n# c = 20442989381348880630046435751193745753\n```\n\n---\n\nRabin加密算法——一种基于摸平方和模平方根的非对称加密\n\n特点：\n\n- 同一密文，可能有两个以上对应的明文\n- 破解该体制等价于对大整数的分解\n- 满足 $p\\equiv 3\\mod4$ 且 $q\\equiv 3\\mod4$\n\nRabin密码体制选取 `e=2`\n\n加密过程：\n\n* $c\\equiv m^2\\mod n$\n\n解密过程：\n\n* 根据费马小定理计算 $m$ 在模 $p$ 和 $q$ 时的平方根 $m_p$ 和 $m_q$：\n\n  $\\circ$ $m_p\\equiv c^{\\frac{1}{4}(p+1)}\\mod p$\n\n  $\\circ$ $m_q\\equiv c^{\\frac{1}{4}(q+1)}\\mod q$\n\n* 使用拓展欧几里得算法来查找 $inv_p$ 和 $inv_q$ ：\n\n  $\\circ$ $inv_p*p+inv_q*q=1$\n\n* 根据中国剩余定理定理求四个模 $n$ 时的平方根：\n\n  $\\circ$ $r_1\\equiv (inv_p\\cdot p\\cdot m_q+inv_q\\cdot q\\cdot m_p)\\mod n$\n\n  $\\circ$ $r_2\\equiv (n-r_1)\\mod n$\n\n  $\\circ$ $r_3\\equiv (inv_p\\cdot p\\cdot m_q-inv_q\\cdot q\\cdot m_p)\\mod n$\n\n  $\\circ$ $r_4\\equiv (n-r_3)\\mod n$\n\n---\n\n- 为什么 $m\\equiv c^{\\frac{1}{4}(p+1)}\\mod p$ 是 $m^2\\equiv c\\mod p$ 的解？\n\n即：已知 $m^2\\equiv c\\mod p$，求证 $m\\equiv c^{\\frac{1}{4}(p+1)}\\mod p$\n\n因为 $p$ 是素数，且 $c$ 是一个模 $p$ 的二次剩余，那么有：\n\n$c^{\\frac{p-1}{2}}\\equiv 1\\mod p$ $\\ (Euler's Criterion)$\n\n恒等号两侧同时乘以 $c$\n\n$c^{\\frac{p+1}{2}}\\equiv c\\mod p$\n\n恒等号两侧同时开根\n\n$c^{\\frac{p+1}{4}}\\equiv c^{\\frac{1}{2}}\\mod p$\n\n模 $p$ 意义下的 $c^{\\frac{1}{2}}$ 即为 $m$\n\n故 $m\\equiv c^{\\frac{1}{4}(p+1)}\\mod p$\n\n证毕。\n\n- 为什么 $inv_p*p+inv_q*q=1$\n\n根据贝祖定理，有 $x*p+y*q=gcd(p,q)=1$\n\n该式对 $q$ 取模，得到 $x*p\\equiv 1\\mod q$ ，故 $x\\equiv p^{-1}\\mod q$\n\n同理对 $p$ 取模，$y\\equiv q^{-1}\\mod p$\n\n故有 $inv_p*p+inv_q*q=1$\n\n证毕\n\n---\n\n能够抵御低密度指数攻击的原因：\n\n低密度指数攻击基于爆破 $k$ 满足 $m*m=c+i*n$\n\n本题的 $n,m,c$ 数位相近，$i$ 需要枚举到 $n,m,c$ 数位量级才有可能爆破出答案\n\n---\n\n由于模数 N 通常是两个大质数相乘，其[欧拉函数](https://zhida.zhihu.com/search?q=欧拉函数&zhida_source=entity&is_preview=1)很大概率是偶数，故欧拉函数和加密指数不互素，那么逆元性质将不再成立，导致解密操作无法正确还原出原始明文。\n\n原RSA里面要求 e 和 d 模 N 互为逆元 ，否则明文不唯一，明文不唯一的后果就是容易被攻击\n\n传统RSA算法不能解决不互素的情况，无法得到所有的明文解，而二次剩余的情况可以专门被处理，所以就可以被其他算法专门研究\n\nTonelli-Shanks算法：$p,q\\equiv 1\\mod 4$\n\n推导：设 $p=4k-3,x^2\\equiv c\\mod p$\n\n由费马定理，$x^{4k-4}\\equiv 1\\mod p$\n\n也即 $(c^{\\frac{p-1}{4}}+1)^2\\equiv 1\\mod p$（存疑，这一步是怎么得到的https://zhuanlan.zhihu.com/p/631005614\n\n# UNFIXED\n\n本题代码：\n\n```\nfrom Crypto.Util.number import *\nimport gmpy2\n\nn = 201354090531918389422241515534761536573\nc = 20442989381348880630046435751193745753\np = 14450452739004884887\nq = 13934102561950901579\ne = 2\n\ninv_p = gmpy2.invert( p , q )\ninv_q = gmpy2.invert( q , p )\nmp = pow( c , (p+1)//4 , p )\nmq = pow( c , (q+1)//4 , q )\n\na = (inv_p * p * mq + inv_q * q * mp) % n\nb = n - int(a)\nc = (inv_p * p * mq - inv_q * q * mp) % n\nd = n - int(c)\n# 因为rabin 加密有四种结果，全部列出。\naa = [a, b, c, d]\n \nfor i in aa:\n    print(i)\n    print( long_to_bytes(i) )\n```\n\nflag:`flag{r4b1n#4c58}`\n\n### [b01lers2020]safety_in_numbers\n\n题目给了三个文件：enc.py[加密](https://so.csdn.net/so/search?q=加密&spm=1001.2101.3001.7020)程序，flag加密结果，pubkey公钥文件\n\n```\nimport sys\nimport Crypto.PublicKey.RSA as RSA\n\n\ndef enc(msg, pubkey):\n   (n,e) = pubkey\n   m = int.from_bytes(msg, byteorder = 'little')\n   c = pow(m, e, n)\n   ctxt = (c).to_bytes(c.bit_length() // 8 + 1, byteorder = 'little')\n   return ctxt\n\n\nwith open(\"pubkey.pem\", \"r\") as f:\n   ciph = RSA.importKey(f.read())     # chill out, Crypto.RSA takes its sweet time... (minutes)\n\npubkey = (ciph.n, ciph.e)\n\n\nwith open(\"flag.txt\", \"rb\") as f:\n   flag = f.read()\n\nsys.stdout.buffer.write(enc(flag, pubkey))\n```\n\n---\n\n通过pem文件提取公钥\n\n```\nimport Crypto.PublicKey.RSA as RSA\n\nwith open(\"pubkey.pem\", \"r\") as f:\n   ciph = RSA.importKey(f.read())     # chill out, Crypto.RSA takes its sweet time... (minutes)\nn = ciph.n\ne = ciph.e\nprint (n)\nprint (e)\n```\n\nn太大太大了，跑了半天都无法输出（可能超过4300位），所以直接对c开e次方即可得到flag\n\n```\nfrom gmpy2 import*\nfrom libnum import*\nfrom Crypto.Util.number import long_to_bytes\n\nf = open('flag.enc','rb').read()\n\ne = 65537\ntmp = int.from_bytes(f, byteorder = 'little')\n\nm = iroot(tmp,e)[0]\nprint(long_to_bytes(m))\nprint(long_to_bytes(m)[::-1])\n```\n\n其中，pem文件的最后一段是存储e的\n\n```\nfrom Crypto.Util.number import*\nfrom libnum import*\nimport base64\n\ns = 'AQAB'\nm = base64.b64decode(s)\nm = bytes_to_long(m)\nprint(hex(m))\n```\n\n### [AFCTF2018]你听过一次一密么？\n\n```\n25030206463d3d393131555f7f1d061d4052111a19544e2e5d54\n0f020606150f203f307f5c0a7f24070747130e16545000035d54\n1203075429152a7020365c167f390f1013170b1006481e13144e\n0f4610170e1e2235787f7853372c0f065752111b15454e0e0901\n081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a1855\n0909075412132e247436425332281a1c561f04071d520f0b1158\n4116111b101e2170203011113a69001b47520601155205021901\n041006064612297020375453342c17545a01451811411a470e44\n021311114a5b0335207f7c167f22001b44520c15544801125d40\n06140611460c26243c7f5c167f3d015446010053005907145d44\n0f05110d160f263f3a7f4210372c03111313090415481d49530f\n```\n\n---\n\n多次一密\n\n已知异或的性质，有 $C_1\\oplus C_2=(M_1\\oplus key)\\oplus(M_2\\oplus key)=M_1\\oplus M_2$\n\n先试用第一行和其他行异或\n\n```\nc = [eval('0x'+x.strip()) for x in open('Problem.txt','r').readlines()]\nm1 = c[0]\n\nfor i in range( 1 , len(c) ):\n    tmp = hex( m1^c[i] )[2:]\n    for i in range( 0 , len(tmp), 2 ):#两位一转ascll\n        p = chr(eval('0x'+tmp[i:i+2]))\n        if p.isalpha():\n            print( p , end='' )\n        else:\n            print('.', end='' )\n    print()\n```\n\n得到：\n\n```\n....S....N.U.....A..M.N...\n...Ro..I...I....SE....P.I.\n.E..H...IN..H...........TU\n..A.H.R.....E....P......E.\n...RT...E...M....M....A.L.\nd...V..I..DNEt........K.DU\n.......I....K..I.ST...TiS.\n.....f...N.I........M.O...\n.........N.I...I.S.I..I...\n....P....N.OH...SA....Sg..\n```\n\n规律：小写字母$\\oplus$空格=相应的大写字母，大写字母$\\oplus$空格=相应的小写字母\n\n故某一 **列** 英文字母越多，$M_1$ 相应位置是空格的可能性越大\n\n因为异或运算下，$x$ 的逆元是自身\n\n故有 $M_i[j]=M_1[j]\\oplus M_i[j]\\oplus M_1[j]=M_1[j]\\oplus M_i[j]\\oplus 0x20$（$j$ 表示列）\n\n只需知道某一字符串的某一位是空格，即可回复所有的密文在这一列的值\n\n解密代码：\n\n```\nimport Crypto.Util.strxor as xo\nimport libnum, codecs, numpy as np\n\ndef isChr(x):\n    if ord('a') <= x and x <= ord('z'): return True\n    if ord('A') <= x and x <= ord('Z'): return True\n    return False\n\ndef infer(index, pos):\n    if msg[index, pos] != 0:\n        return\n    msg[index, pos] = ord(' ')\n    for x in range(len(c)):\n        if x != index:\n            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ ord(' ')\n\ndat = []\n\ndef getSpace():\n    for index, x in enumerate(c):\n        res = [xo.strxor(x, y) for y in c if x!=y]\n        f = lambda pos: len(list(filter(isChr, [s[pos] for s in res])))\n        cnt = [f(pos) for pos in range(len(x))]\n        for pos in range(len(x)):\n            dat.append((f(pos), index, pos))\n\nc = [codecs.decode(x.strip().encode(), 'hex') for x in open('Problem.txt', 'r').readlines()]\n\nmsg = np.zeros([len(c), len(c[0])], dtype=int)\n\ngetSpace()\n\ndat = sorted(dat)[::-1]\nfor w, index, pos in dat:\n    infer(index, pos)\n\nprint('\\n'.join([''.join([chr(c) for c in x]) for x in msg]))\n```\n\n得到：\n\n```\nDear Friend, T%is tim< I u\nnderstood my m$stake 8nd u\nsed One time p,d encr ptio\nn scheme, I he,rd tha- it \nis the only en.ryptio7 met\nhod that is ma9hemati:ally\n proven to be #ot cra:ked \never if the ke4 is ke)t se\ncure, Let Me k#ow if  ou a\ngree with me t\" use t1is e\nncryption sche e alwa s...\n```\n\n但是有点问题，可以选择手动修复，或者使用代码修复\n\n```\ndef know(s,x,y):\n    msg[x,y] = ord(s)\n    for index in range(len(c)):\n        if index != x:\n            msg[index,y] = xo.strxor(c[x], c[index])[y] ^ ord(s)\n            \nknow('h',0,14)\nknow('e',0,21)\n```\n\n得到\n\n```\nDear Friend, This time I u\nnderstood my mistake and u\nsed One time pad encryptio\nn scheme, I heard that it \nis the only encryption met\nhod that is mathematically\n proven to be not cracked \never if the key is kept se\ncure, Let Me know if you a\ngree with me to use this e\nncryption scheme always...\n```\n\n有了明文了，计算 $C_1\\oplus M_1$ 即可得到 `key`\n\n```\nkey = xo.strxor(c[0], ''.join([chr(c) for c in msg[0]]).encode())\nprint(key)\n```\n\nkey就是flag\n\nflag:`flag{OPT_1s_Int3rest1ng}`\n\n---\n\n后记：\n\n按行读取TXT中的数据：`c = [x for x in open('Problem.txt','r').readlines()]`\n\n去除尾部的`'\\n'`：`c = [x.strip() for x in open('Problem.txt','r').readlines()]`\n\neval的用法十分灵活，默认十进制：`c = [eval('0x'+x.strip()) for x in open('Problem.txt','r').readlines()]`\n\n\n\n### [NewStarCTF 2023 公开赛道]babyaes\n\n```\nfrom Crypto.Cipher import AES\nimport os\nfrom flag import flag\nfrom Crypto.Util.number import *\n\ndef pad(data):\n    return data + b\"\".join([b'\\x00' for _ in range(0, 16 - len(data))])\n\ndef main():\n    flag_ = pad(flag)\n    key = os.urandom(16) * 2\n    iv = os.urandom(16)\n    print(bytes_to_long(key) ^ bytes_to_long(iv) ^ 1)\n    aes = AES.new(key, AES.MODE_CBC, iv)\n    enc_flag = aes.encrypt(flag_)\n    print(enc_flag)\n\nif __name__ == \"__main__\":\n    main()\n# 3657491768215750635844958060963805125333761387746954618540958489914964573229\n# b'>]\\xc1\\xe5\\x82/\\x02\\x7ft\\xf1B\\x8d\\n\\xc1\\x95i'\n```\n\n---\n\nkey是高位16bytes，iv是低位16bytes，所以可以很轻易的区分\n\n```\nfrom Crypto.Cipher import AES\nimport os\nfrom gmpy2 import*\nfrom Crypto.Util.number import*\n\nxor = 3657491768215750635844958060963805125333761387746954618540958489914964573229\nenc_flag = b'>]\\xc1\\xe5\\x82/\\x02\\x7ft\\xf1B\\x8d\\n\\xc1\\x95i'\nout = long_to_bytes(xor)#先转化成16进制形式，aes和rsa不一样，操作一般都是在hex下\nkey = out[:16]*2#这一部分是key的，另外一部分是iv的（别忘了最低位有个1）\niv = long_to_bytes(bytes_to_long(key[16:])^bytes_to_long(out[16:])^1)\naes = AES.new(key,AES.MODE_CBC,iv)#调用函数库解密\nflag = aes.decrypt(enc_flag)\nprint(flag)\n```\n\nflag:`flag{firsT_cry_Aes}`\n\n### [QCTF2018]Xman-RSA\n\nciphertext:\n\n```\n1240198b148089290e375b999569f0d53c32d356b2e95f5acee070f016b3bef243d0b5e46d9ad7aa7dfe2f21bda920d0ac7ce7b1e48f22b2de410c6f391ce7c4347c65ffc9704ecb3068005e9f35cbbb7b27e0f7a18f4f42ae572d77aaa3ee189418d6a07bab7d93beaa365c98349d8599eb68d21313795f380f05f5b3dfdc6272635ede1f83d308c0fdb2baf444b9ee138132d0d532c3c7e60efb25b9bf9cb62dba9833aa3706344229bd6045f0877661a073b6deef2763452d0ad7ab3404ba494b93fd6dfdf4c28e4fe83a72884a99ddf15ca030ace978f2da87b79b4f504f1d15b5b96c654f6cd5179b72ed5f84d3a16a8f0d5bf6774e7fd98d27bf3c9839\n129d5d4ab3f9e8017d4e6761702467bbeb1b884b6c4f8ff397d078a8c41186a3d52977fa2307d5b6a0ad01fedfc3ba7b70f776ba3790a43444fb954e5afd64b1a3abeb6507cf70a5eb44678a886adf81cb4848a35afb4db7cd7818f566c7e6e2911f5ababdbdd2d4ff9825827e58d48d5466e021a64599b3e867840c07e29582961f81643df07f678a61a9f9027ebd34094e272dfbdc4619fa0ac60f0189af785df77e7ec784e086cf692a7bf7113a7fb8446a65efa8b431c6f72c14bcfa49c9b491fb1d87f2570059e0f13166a85bb555b40549f45f04bc5dbd09d8b858a5382be6497d88197ffb86381085756365bd757ec3cdfa8a77ba1728ec2de596c5ab\n```\n\nn2&n3:\n\n```\nPVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw==\nTmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ==\n```\n\nn1.encrypted:\n\n```\n2639c28e3609a4a8c953cca9c326e8e062756305ae8aee6efcd346458aade3ee8c2106ab9dfe5f470804f366af738aa493fd2dc26cb249a922e121287f3eddec0ed8dea89747dc57aed7cd2089d75c23a69bf601f490a64f73f6a583081ae3a7ed52238c13a95d3322065adba9053ee5b12f1de1873dbad9fbf4a50a2f58088df0fddfe2ed8ca1118c81268c8c0fd5572494276f4e48b5eb424f116e6f5e9d66da1b6b3a8f102539b690c1636e82906a46f3c5434d5b04ed7938861f8d453908970eccef07bf13f723d6fdd26a61be8b9462d0ddfbedc91886df194ea022e56c1780aa6c76b9f1c7d5ea743dc75cec3c805324e90ea577fa396a1effdafa3090\n42ff1157363d9cd10da64eb4382b6457ebb740dbef40ade9b24a174d0145adaa0115d86aa2fc2a41257f2b62486eaebb655925dac78dd8d13ab405aef5b8b8f9830094c712193500db49fb801e1368c73f88f6d8533c99c8e7259f8b9d1c926c47215ed327114f235ba8c873af7a0052aa2d32c52880db55c5615e5a1793b690c37efdd5e503f717bb8de716303e4d6c4116f62d81be852c5d36ef282a958d8c82cf3b458dcc8191dcc7b490f227d1562b1d57fbcf7bf4b78a5d90cd385fd79c8ca4688e7d62b3204aeaf9692ba4d4e44875eaa63642775846434f9ce51d138ca702d907849823b1e86896e4ea6223f93fae68b026cfe5fa5a665569a9e3948a\n```\n\nencryption.encrypted:\n\n```\ngqhb jbkl2 pbkhqw pt_kqpbd\ngqhb ht pbkhqw zqreahb\npbkhqw urtd64\n\nadg ulwdt_wh_ezb(u):\n\tqdwzqe pew(u.dexhad('mdi'), 16)\n\t\nadg ezb_wh_ulwdt(e):\n\tu = mdi(e)[2:-1]\n\tu = '0' + u pg yde(u)%2 == 1 dytd u\n\tqdwzqe u.adxhad('mdi')\n\nadg jdw_r_kqpbd(y):\n\tqreahb_tdda = zqreahb(y)\n\n\tezb = ulwdt_wh_ezb(qreahb_tdda)\n\t\n\tfmpyd Tqzd:\n\t\tpg pt_kqpbd(ezb):\n\t\t\tuqdrv\n\t\tezb+=1\n\tqdwzqe ezb\n\nadg dexqlkw(t, d, e):\n\tk = ulwdt_wh_ezb(t)\n\tk = khf(k, d, e)\n\tqdwzqe ezb_wh_ulwdt(k).dexhad('mdi')\t\n\nadg tdkrqrwd(e):\n\tk = e % 4\n\tw = (k*k) % 4\n\tqdwzqe w == 1\n\t\ng = hkde('gyrj.wiw', 'q')\ngyrj = g.qdra()\n\t\t\nbtj1 = \"\"\nbtj2 = \"\"\nghq p pe qrejd(yde(gyrj)):\n\tpg tdkrqrwd(p):\n\t\tbtj2 += gyrj[p]\n\tdytd:\n\t\tbtj1 += gyrj[p]\n\nk1 = jdw_r_kqpbd(128)\nk2 = jdw_r_kqpbd(128)\nk3 = jdw_r_kqpbd(128)\ne1 = k1*k2\ne2 = k1*k3\nd = 0i1001\nx1 = dexqlkw(btj1, d, e1)\nx2 = dexqlkw(btj2, d, e2)\nkqpew(x1)\nkqpew(x2)\n\nd1 = 0i1001\nd2 = 0i101\nk4 = jdw_r_kqpbd(128)\nk5 = jdw_r_kqpbd(128)\ne3 = k4*k5\nx1 = ezb_wh_ulwdt(khf(e1, d1, e3)).dexhad('mdi')\nx2 = ezb_wh_ulwdt(khf(e1, d2, e3)).dexhad('mdi')\nkqpew(x1)\nkqpew(x2)\n\nkqpew(urtd64.u64dexhad(ezb_wh_ulwdt(e2)))\nkqpew(urtd64.u64dexhad(ezb_wh_ulwdt(e3)))\n```\n\n---\n\n加密代码非要替换一下，直接 [词频分析](https://quipqiup.com/) 得到代码原文：（需要自行加入空格）\n\n```\nfrom gmpy2 import is_prime \nfrom os import urandom \nimport base64 \ndef bytes_to_num(b): \n    return int(b.encode('hex'), 16) \ndef num_to_bytes(n): \n    b = hex(n)[2:-1] \n    b = '0' + b if len(b)%2 == 1 else b \n    return b.decode('hex') \ndef get_a_prime(l): \n    random_seed = urandom(l) \n    \n    num = bytes_to_num(random_seed) \n    while True: \n        if is_prime(num): \n            break \n        num+=1 \n        return num \ndef encrypt(s, e, n): \n    p = bytes_to_num(s) \n    p = pow(p, e, n) \n    return num_to_bytes(p).encode('hex') \n \ndef separate(n): \n    p = n % 4 \n    t = (p*p) % 4 \n    return t == 1 \n    \nf = open('flag.txt', 'r') \nflag = f.read() \nmsg1 = \"\" \nmsg2 = \"\" \nfor i in range(len(flag)): \n    if separate(i): \n        msg2 += flag[i] \n    else: \n        msg1 += flag[i] \n \np1 = get_a_prime(128) \np2 = get_a_prime(128) \np3 = get_a_prime(128) \n \nn1 = p1*p2 \nn2 = p1*p3 \ne = 0x1001 \nc1 = encrypt(msg1, e, n1) \nc2 = encrypt(msg2, e, n2) \nprint(c1) \nprint(c2) \ne1 = 0x1001 \ne2 = 0x101 \np4 = get_a_prime(128) \np5 = get_a_prime(128) \nn3 = p4*p5 \nc1 = num_to_bytes(pow(n1, e1, n3)).encode('hex') \nc2 = num_to_bytes(pow(n1, e2, n3)).encode('hex') \nprint(c1) \nprint(c2) \nprint(base64.b64encode(num_to_bytes(n2))) \nprint(base64.b64encode(num_to_bytes(n3)))\n```\n\n从后往前解，n2和n3是从先 `long_to_bytes`，然后 `base64` 加密，容易得到代码：\n\n```\nimport base64\nfrom Crypto.Util.number import bytes_to_long\n\ndef dec( x ):\n    return bytes_to_long(base64.b64decode(x)) \n\nn2 = dec('PVNHb2BfGAnmxLrbKhgsYXRwWIL9eOj6K0s3I0slKHCTXTAUtZh3T0r+RoSlhpO3+77AY8P7WETYz2Jzuv5FV/mMODoFrM5fMyQsNt90VynR6J3Jv+fnPJPsm2hJ1Fqt7EKaVRwCbt6a4BdcRoHJsYN/+eh7k/X+FL5XM7viyvQxyFawQrhSV79FIoX6xfjtGW+uAeVF7DScRcl49dlwODhFD7SeLqzoYDJPIQS+VSb3YtvrDgdV+EhuS1bfWvkkXRijlJEpLrgWYmMdfsYX8u/+Ylf5xcBGn3hv1YhQrBCg77AHuUF2w/gJ/ADHFiMcH3ux3nqOsuwnbGSr7jA6Cw==')\nn3 = dec('TmNVbWUhCXR1od3gBpM+HGMKK/4ErfIKITxomQ/QmNCZlzmmsNyPXQBiMEeUB8udO7lWjQTYGjD6k21xjThHTNDG4z6C2cNNPz73VIaNTGz0hrh6CmqDowFbyrk+rv53QSkVKPa8EZnFKwGz9B3zXimm1D+01cov7V/ZDfrHrEjsDkgK4ZlrQxPpZAPl+yqGlRK8soBKhY/PF3/GjbquRYeYKbagpUmWOhLnF4/+DP33ve/EpaSAPirZXzf8hyatL4/5tAZ0uNq9W6T4GoMG+N7aS2GeyUA2sLJMHymW4cFK5l5kUvjslRdXOHTmz5eHxqIV6TmSBQRgovUijlNamQ==')\n\nprint( n2 )\nprint( n3 )\n```\n\n然后通过共膜攻击，求得 `n1` ：\n\n```\nimport gmpy2\n\ne1 = 0x1001\ne2 = 0x101\nc1 = \nc2 = \n \ns, s1, s2 = gmpy2.gcdext(e1, e2)\nn1 = (pow(c1, s1, n3) * pow(c2, s2, n3) % n3)\n \nprint( n1 )\n```\n\n因为 `n1` 和 `n2` 有公因数，易求得 `p1,p2,p3`：\n\n```\nimport gmpy2\n \nn1 = \nn2 = \n\np1 = gmpy2.gcd(n1, n2)\np2 = n1 // p1\np3 = n2 // p2\nprint( p1 , p2 , p3 )\n```\n\n剩下的是常规rsa，注意flag拼接：\n\n```\n\nc1 = \nc2 = \ne = 0x1001\n \nphi1 = (p1-1)*(p2-1)\nphi2 = (p1-1)*(p3-1)\nd1 = gmpy2.invert(e, phi1)\nd2 = gmpy2.invert(e, phi2)\nm1 = pow(c1, d1, n1)\nm2 = pow(c2, d2, n2)\nflag1 = long_to_bytes(int(m1))\nflag2 = long_to_bytes(int(m2))\n \nprint(flag1)\nprint(flag2)\n\nfor i in range(len(flag1)):\n    print(chr(flag1[i]), end = '')\n    try:\n        print(chr(flag2[i]), end = '')\n    except:\n        pass\n```\n\nflag:`flag{CRYPT0_I5_50_Interestingvim rsa.py}`\n\n---\n\n### [羊城杯 2020]RRRRRRRSA\n\n```\nimport hashlib\nimport sympy\nfrom Crypto.Util.number import *\n\nflag = 'GWHT{************}'\nflag1 = flag[:19].encode()\nflag2 = flag[19:].encode()\nassert(len(flag) == 38)\nP1 = getPrime(1038)\nP2 = sympy.nextprime(P1)\nassert(P2 - P1 < 1000)\nQ1 = getPrime(512)\nQ2 = sympy.nextprime(Q1)\nN1 = P1 * P1 * Q1\nN2 = P2 * P2 * Q2\nE1 = getPrime(1024)\nE2 = sympy.nextprime(E1)\nm1 = bytes_to_long(flag1)\nm2 = bytes_to_long(flag2)\nc1 = pow(m1, E1, N1)\nc2 = pow(m2, E2, N2)\n\noutput = open('secret', 'w')\noutput.write('N1=' + str(N1) + '\\n')\noutput.write('c1=' + str(c1) + '\\n')\noutput.write('E1=' + str(E1) + '\\n')\noutput.write('N2=' + str(N2) + '\\n')\noutput.write('c2=' + str(c2) + '\\n')\noutput.write('E2=' + str(E2) + '\\n')\noutput.close()\n```\n\n```\nN1=\nc1=\nE1=\nN2=\nc2=\nE2=\n```\n\n---\n\n`wiener attack` 是依靠连分数进行的攻击方式，适用于非常接近某一值（比如1）时，求一个比例关系，通过该比例关系再来反推关键信息就简单很多。这种攻击对于解密指数d很小时有很好的效果，一般的用法是通过 \n\n$ed \\mod \\phi(N)\\equiv1$ \n\n得到 $ed=k*\\phi(N)+1$\n\n即  $\\frac{e}{\\phi(N)}=\\frac{k}{d}+\\frac{1}{\\phi(N)}$\n\n这种情况下 $\\phi(N)≈N$，且 $\\phi(N)$ 非常大\n\n所以有 $\\frac{e}{N}-\\frac{k}{d}=\\frac{1}{\\phi(N)}$\n\n也就是说 $\\frac{k}{d}$ 与 $\\frac{e}{N}$ 非常接近，而 $\\frac{e}{N}$ 又是已知的\n\n对 $\\frac{e}{N}$ 进行连分数展开，得到的一串分数的分母很有可能就是 $d$\n\n只要检验一下 $ed \\mod \\phi(N)$ ，看它是不是 $1$ 就知道对不对了。\n\n但是这道题和普通的wiener attack 不同的是，e与N并没有近到相除约为1的地步，相差还是很大的，也就是说解密指数d也许还是很大的，这样就解不出来。\n\n值得注意的是，e和N的关系不符合利用条件，但是N1和N2的关系却适合\n\n对于这一道题: $\\frac{N_1}{N_2}=(\\frac{P_1}{P_2})^2*\\frac{Q_1}{Q_2}$\n\n显然我们可以知道的是 $\\frac{N_1}{N_2}<\\frac{Q_1}{Q_2}$ \n\n所以在 $\\frac{Q_1}{Q_2}\\in [\\frac{N_1}{N_2},1]$ \n\n尝试对 $\\frac{N_1}{N_2}$ 进行连分数展开并求其各项渐进分数，其中某个连分数的分母可能就是 $Q_1$（依靠 $N\\%Q$ 来验证）\n\n代码：\n\n```\nimport gmpy2\nfrom Crypto.Util.number import long_to_bytes\n\nN1=\nc1=\nE1=\nN2=\nc2=\nE2=\n\ndef continuedFra(x, y): #不断生成连分数的项\n    cF = []\n    while y:\n        cF += [x // y]\n        x, y = y, x % y\n    return cF\ndef Simplify(ctnf): #化简\n    numerator = 0\n    denominator = 1\n    for x in ctnf[::-1]: #注意这里是倒叙遍历\n        numerator, denominator = denominator, x * denominator + numerator\n    return (numerator, denominator) #把连分数分成分子和算出来的分母\ndef getit(c):\n    cf=[]\n    for i in range(1,len(c)):\n        cf.append(Simplify(c[:i])) #各个阶段的连分数的分子和分母\n    return cf #得到一串连分数\n\ndef wienerAttack(e, n):\n    cf=continuedFra(e,n)\n    for (Q2,Q1) in getit(cf):#遍历得到的连分数，令分子分母分别是Q2，Q1\n        if Q1 == 0:\n            continue\n        if N1%Q1==0 and Q1!=1:#满足这个条件就找到了\n            return Q1\n    print('not find!')\nQ1=wienerAttack(N1,N2)\n\nP1=gmpy2.iroot(N1//Q1,2)[0]\nP2=gmpy2.next_prime(P1)\nQ2=gmpy2.next_prime(Q1)\nphi1=P1*(P1-1)*(Q1-1)\nphi2=P2*(P2-1)*(Q2-1)\nd1=gmpy2.invert(E1,phi1)\nd2=gmpy2.invert(E2,phi2)\nm1=long_to_bytes(gmpy2.powmod(c1,d1,N1))\nm2=long_to_bytes(gmpy2.powmod(c2,d2,N2))\nprint((m1+m2))\n```\n\nflag:`flag{3aadab41754799f978669d53e64a3aca}`\n\n### [UTCTF2020]OTP\n\n```\nEncoded A: 213c234c2322282057730b32492e720b35732b2124553d354c22352224237f1826283d7b0651\nEncoded B: 3b3b463829225b3632630b542623767f39674431343b353435412223243b7f162028397a103e\n\nOriginal A: 5448452042455354204354462043415445474f52592049532043525950544f47524150485921\nOriginal B: 4e4f205448452042455354204f4e452049532042494e415259204558504c4f49544154494f4e\n\nA XOR A: 7574666c61677b7477305f74696d335f703464737d7574666c61677b7477305f74696d335f70\nB XOR B: 7574666c61677b7477305f74696d335f703464737d7574666c61677b7477305f74696d335f70\n```\n\n---\n\n一次一密是牢不可破的！\n\n不过原文和密文都给了，就可以轻易得到flag了\n\n```\nc = '7574666c61677b7477305f74696d335f703464737d7574666c61677b7477305f74696d335f70'\n \nfor i in range(0, len(c), 2):\n    print(chr(int(c[i:i+2], 16)), end = '')\n```\n\nflag:`flag{tw0_tim3_p4ds}`\n\n### [Dest0g3 520迎新赛]babyAES\n\n```\nfrom Crypto.Cipher import AES\nimport os\niv = os.urandom(16)\nkey = os.urandom(16)\nmy_aes = AES.new(key, AES.MODE_CBC, iv)\nflag = open('flag.txt', 'rb').read()\nflag += (16 - len(flag) % 16) * b'\\x00'\nc = my_aes.encrypt(flag)\nprint(c)\nprint(iv)\nprint(key)\n\n'''\nb'C4:\\x86Q$\\xb0\\xd1\\x1b\\xa9L\\x00\\xad\\xa3\\xff\\x96 hJ\\x1b~\\x1c\\xd1y\\x87A\\xfe0\\xe2\\xfb\\xc7\\xb7\\x7f^\\xc8\\x9aP\\xdaX\\xc6\\xdf\\x17l=K\\x95\\xd07'\nb'\\xd1\\xdf\\x8f)\\x08w\\xde\\xf9yX%\\xca[\\xcb\\x18\\x80'\nb'\\xa4\\xa6M\\xab{\\xf6\\x97\\x94>hK\\x9bBe]F'\n'''\n```\n\n---\n\n最喜欢的大水题，该给的都给了，直接解就可以了\n\n```\nfrom Crypto.Cipher import AES\n \nc = b'C4:\\x86Q$\\xb0\\xd1\\x1b\\xa9L\\x00\\xad\\xa3\\xff\\x96 hJ\\x1b~\\x1c\\xd1y\\x87A\\xfe0\\xe2\\xfb\\xc7\\xb7\\x7f^\\xc8\\x9aP\\xdaX\\xc6\\xdf\\x17l=K\\x95\\xd07'\niv = b'\\xd1\\xdf\\x8f)\\x08w\\xde\\xf9yX%\\xca[\\xcb\\x18\\x80'\nkey = b'\\xa4\\xa6M\\xab{\\xf6\\x97\\x94>hK\\x9bBe]F'\n\nmy_aes = AES.new(key, AES.MODE_CBC, iv)\nm = my_aes.decrypt(c)\nprint(m)\n```\n\nflag:`flag{d0e5fa76-e50f-76f6-9cf1-b6c2d576b6f4}`\n\n### [ACTF新生赛2020]crypto-des\n\n```\n72143238992041641000000.000000,\n77135357178006504000000000000000.000000,\n1125868345616435400000000.000000,\n67378029765916820000000.000000,\n75553486092184703000000000000.000000,\n4397611913739958700000.000000,\n76209378028621039000000000000000.000000\nTo solve the key, Maybe you know some interesting data format about C language?\n```\n\n---\n\n网上抄来的脚本，我也不知道为什么要这么干（感觉和密码学没关联\n\n```\nfrom libnum import*\nimport struct\nimport binascii\n\ns = [72143238992041641000000.000000,77135357178006504000000000000000.000000,1125868345616435400000000.000000,67378029765916820000000.000000,75553486092184703000000000000.000000,4397611913739958700000.000000,76209378028621039000000000000000.000000]\na = ''\nb = ''\nfor i in s:\n    i = float(i)\n    a += struct.pack('<f',i).hex()        #小端\nprint(a)\n\nfor j in s:\n    i = float(i)\n    b += struct.pack('>f',i).hex()        #小端\nprint(b)\n\nprint(n2s(a))\nprint(n2s(b))\n```\n\n得到：\n\n```\nb'Interestring Idea to encrypt'\nb'tpyrtpyrtpyrtpyrtpyrtpyrtpyr'\n```\n\n但是我自己习惯的写法，得到的a是相同的\n\n```\nimport struct\nimport binascii\nfrom Crypto.Util.number import long_to_bytes , bytes_to_long\n\ns = [\n    72143238992041641000000.000000,\n    77135357178006504000000000000000.000000,\n    1125868345616435400000000.000000,\n    67378029765916820000000.000000,\n    75553486092184703000000000000.000000,\n    4397611913739958700000.000000,\n    76209378028621039000000000000000.000000\n]\n\ndef solve( f ):\n    output = ''\n    for i in s:\n        output += str(struct.pack(f,float(i)))[2:].strip('\\'')\n    return output\n\na = solve('<f')\nb = solve('>f')\nprint( a )\nprint( b )\n```\n\n得到：\n\n```\nInterestring Idea to encrypt\netnItsergniredI ot acne tpyr\n```\n\n[这篇文章](https://www.codeleading.com/article/82534229429/)的解法看着相对靠谱很多，但是没有详细代码，不知道是如何操作的，尝试只好一番之后未成功只好作罢\n\n输出结果中，b的不一样而a一样，但是解压密码就是a的输出\n\n解压密码是:`Interestring Idea to encrypt`\n\n得到zip文件：\n\n```\nimport pyDes\nimport base64\nfrom FLAG import flag\ndeskey = \"********\"\nDES = pyDes.des(deskey)\nDES.setMode('ECB')\nDES.Kn = 一个矩阵\ncipher_list = base64.b64encode(DES.encrypt(flag))\n#b'vrkgBqeK7+h7mPyWujP8r5FqH5yyVlqv0CXudqoNHVAVdNO8ML4lM4zgez7weQXo'\n```\n\n新生赛的题是这样的，直接解就可以了\n\n```\nimport pyDes\nimport base64\nfrom Crypto.Util.number  import*\ndeskey  = \"********\"\nDES = pyDes.des(deskey)\nDES.setMode('ECB')\nDES.Kn =\n\nk = b'vrkgBqeK7+h7mPyWujP8r5FqH5yyVlqv0CXudqoNHVAVdNO8ML4lM4zgez7weQXo'\ndata = base64.b64decode(k)\nflag = DES.decrypt(data)\nprint(flag)\n```\n\nflag:`flag{breaking_DES_is_just_a_small_piece_of_cake}`\n\n### [AFCTF2018]One Secret, Two encryption\n\n```\n一份秘密发送给两个人不太好吧，那我各自加密一次好啦~~~\n素数生成好慢呀\n偷个懒也……不会有问题的吧？\n```\n\n`flag_encry1`\n\n`flag_encry2`\n\n`public1.pub`\n\n`public2.pub`\n\n---\n\n先用 [公钥解析](http://www.hiencode.com/pub_asys.html) 提取一下公钥\n\n得到两组n和e\n\n```\nprint( math.gcd(n1,n2) )\n```\n\n得到两组p和q\n\n也可以直接用库函数来解\n\n```\nimport rsa\nd=int(gmpy2.invert(e,(p-1)*(q-1)))\nRsa=rsa.PrivateKey(n,e,d,p,q)\nwith open('flag_encry1','rb') as f:\n     cipher1=f.read()\n     print(rsa.decrypt(cipher1,Rsa))\n```\n\nflag:`flag{You_Know_0p3u55I}`\n\n### [watevrCTF 2019]Swedish RSA\n\n```\nflag = bytearray(raw_input())\nflag = list(flag)\nlength = len(flag)\nbits = 16\n\n## Prime for Finite Field.\np = random_prime(2^bits-1, False, 2^(bits-1))\n\nfile_out = open(\"downloads/polynomial_rsa.txt\", \"w\")\nfile_out.write(\"Prime: \" + str(p) + \"\\n\")\n\n## Univariate Polynomial Ring in y over Finite Field of size p\nR.<y> = PolynomialRing(GF(p))\n\n## Analogous to the primes in Z\ndef gen_irreducable_poly(deg):\n    while True:\n        out = R.random_element(degree=deg)\n        if out.is_irreducible():\n            return out\n\n\n## Polynomial \"primes\"\nP = gen_irreducable_poly(ZZ.random_element(length, 2*length))\nQ = gen_irreducable_poly(ZZ.random_element(length, 2*length))\n\n## Public exponent key\ne = 65537\n\n## Modulus\nN = P*Q\nfile_out.write(\"Modulus: \" + str(N) + \"\\n\")\n\n## Univariate Quotient Polynomial Ring in x over Finite Field of size 659 with modulus N(x)\nS.<x> = R.quotient(N)\n\n## Encrypt\nm = S(flag)\nc = m^e\n\nfile_out.write(\"Ciphertext: \" + str(c))\nfile_out.close()\n```\n\n---\n\n将传统 RSA 中的 p和q 用多项式来替代\n\n```\n传统欧拉函数：对于正整数n，欧拉函数是小于等于n的数中与n互质的数的个数。\n多项式欧拉函数：对于多项式P(y)来讲，欧拉函数phi(P(y))表示所有不高于P(y)幂级的环内所有多项式中，与P(y)无（除1以外）公因式的其他多项式的个数。\n```\n\n经过 `is_irreducible` 函数的判断，可以得知 $P(y)$ 是不可约多项式，所以 $\\phi(P(y))=43753^{degree()}-1$\n\n$degree()$ 就是多项式的最高项指数\n\n信息是多项式形式的，明文的每个字符都转化成数值，作为多项式上的系数\n\n```\nP=43753\nR.<y> = PolynomialRing(GF(P))\nN=\nS.<x> = R.quotient(N)\nC=\np,q = N.factor()\np,q = p[0],q[0]\nphi=(pow(P,65)-1)*(pow(P,112)-1)\ne = 65537\nd = inverse_mod(e,phi)\nm = C^d\nprint(\"\".join([chr(c) for c in m.list()]))\n```\n\nflag`flag{RSA_from_ikea_is_fun_but_insecure#k20944uehdjfnjd335uro}`\n\n### [watevrCTF 2019]ECC-RSA\n\n```\nfrom fastecdsa.curve import P521 as Curve\nfrom fastecdsa.point import Point\nfrom Crypto.Util.number import bytes_to_long, isPrime\nfrom os import urandom\nfrom random import getrandbits\n\ndef gen_rsa_primes(G):\n\turand = bytes_to_long(urandom(521//8))\n\twhile True:\n\t\ts = getrandbits(521) ^ urand\n\n\t\tQ = s*G\n\t\tif isPrime(Q.x) and isPrime(Q.y):\n\t\t\tprint(\"ECC Private key:\", hex(s))\n\t\t\tprint(\"RSA primes:\", hex(Q.x), hex(Q.y))\n\t\t\tprint(\"Modulo:\", hex(Q.x * Q.y))\n\t\t\treturn (Q.x, Q.y)\n\n\nflag = int.from_bytes(input(), byteorder=\"big\")\n\necc_p = Curve.p\na = Curve.a\nb = Curve.b\n\nGx = Curve.gx\nGy = Curve.gy\nG = Point(Gx, Gy, curve=Curve)\n\n\ne = 0x10001\np, q = gen_rsa_primes(G)\nn = p*q\n\n\nfile_out = open(\"downloads/ecc-rsa.txt\", \"w\")\n\nfile_out.write(\"ECC Curve Prime: \" + hex(ecc_p) + \"\\n\")\nfile_out.write(\"Curve a: \" + hex(a) + \"\\n\")\nfile_out.write(\"Curve b: \" + hex(b) + \"\\n\")\nfile_out.write(\"Gx: \" + hex(Gx) + \"\\n\")\nfile_out.write(\"Gy: \" + hex(Gy) + \"\\n\")\n\nfile_out.write(\"e: \" + hex(e) + \"\\n\")\nfile_out.write(\"p * q: \" + hex(n) + \"\\n\")\n\nc = pow(flag, e, n)\nfile_out.write(\"ciphertext: \" + hex(c) + \"\\n\")\n```\n\n---\n\n\n\n","tags":["cryptoCTF","常驻"]},{"title":"数论小芝士","url":"/2024/06/03/数论小芝士/","content":"\n**欧拉定理**：https://oi-wiki.org/math/number-theory/fermat/\n\n<!--more-->\n\n```\n#[LitCTF 2023]Euler\nfrom Crypto.Util.number import *\nfrom secret import flag\n\nm = bytes_to_long(flag)\np = getPrime(512)\nq = getPrime(512)\nn = p*q\nc = pow(m,n-p-q+3,n)\nprint(f'n = {n}')\nprint(f'c = {c}')\n\"\"\"\nn = \nc = \n\"\"\"\n```\n\n$phi = n-p-q+1$，故 $c=m^{phi+2} mod \\ n$ ，由欧拉定理可得 $c^{phi}\\equiv 1 \\ mod n $\n\n则  $c\\equiv m^{2} mod \\ n $\n\n直接开根即可\n\n```\nimport gmpy2\nfrom Crypto.Util.number import long_to_bytes\nc = \nprint( long_to_bytes(gmpy2.iroot(c,2)[0]) )\n```\n\n---\n\n威尔逊定理：$(p-1)!\\equiv -1\\ mod\\ p$\n\n```\n#[长安杯 2021]checkin\nfrom Crypto.Util.number import *\nfrom secret import flag\np = getPrime(1024)\nq = getPrime(16)\nn = p*q\nm = bytes_to_long(flag)\nfor i in range(1,p-q):\n    m = m*i%n\ne = 1049\nprint(pow(2,e,n))\nprint(pow(m,e,n))\n#4513855932190587780512692251070948513905472536079140708186519998265613363916408288602023081671609336332823271976169443708346965729874135535872958782973382975364993581165018591335971709648749814573285241290480406050308656233944927823668976933579733318618949138978777831374262042028072274386196484449175052332019377\n#3303523331971096467930886326777599963627226774247658707743111351666869650815726173155008595010291772118253071226982001526457616278548388482820628617705073304972902604395335278436888382882457685710065067829657299760804647364231959804889954665450340608878490911738748836150745677968305248021749608323124958372559270\n```\n\n第一步爆破n：\n\n```\nhint1 = \nhint2 = \ne = 1049\nfor k in range( 1 , 1000000 ):\n    if ( 2**e - hint1 ) % k == 0:\n        n = ( 2**e - hint1 ) // k\n        print( k , n.bit_length() , n  )\n```\n\n得到 $n$，直接分解得到 $p$ 和 $q$\n\n第二步：\n\n已知 $M\\equiv m*(p-q-1)\\ mod\\ n$\n\n因为 $p\\mid n$，所以 $M\\equiv m*(p-q-1)\\ mod\\ p$（放缩）\n\n得到方程\n$$\n\\begin{cases}\n\t(p-1)! \\equiv -1\\ mod\\ p\\\\\n\tM\\equiv m*(p-q-1)\\ mod\\ p\n\\end{cases}\n$$\n$\\therefore m\\equiv \\dfrac{M*(p-1)!}{(-1)*(p-q-1)!}$\n\n```\nimport gmpy2\nfrom Crypto.Util.number import long_to_bytes\n\nhint2 = 33035...\ne = 1049\nn = 58237...\n\np = 17022...\nq = 34211\n\nphi = (p-1)*(q-1)\nassert p*q == n\nd = gmpy2.invert( e , phi )\nm = pow( hint2 , d , n )\nprint( m )\nm = -1*m\nfor i in range( p-q , p ):\n    m = m * i % p\nprint( long_to_bytes(m) )\n```\n\n---\n\n","tags":["cryptoCTF"]},{"title":"制导镖","url":"/2024/06/02/制导镖/","content":"\n发射点到对方前哨站的距离：16m；发射点到对方基地的距离：25m\n\n<!--more-->\n\n---\n\n三个阶段：\n\n第一阶段，可以辅助制导，通过少量气瓶等方案实现，在镖架的机械误差较大，散布直径在500mm-1000mm的镖可以制导击中前哨站概率超过20%，散布直径在200mm-500mm的镖可以制导击中前哨站概率超过40%，散布直径200mm以下的听天由命不过也基本上大概率能中\n\n第二阶段，可以辅助制导，通过舵机等方案实现（和南航较像），对镖架要求进一步降低，可以击中前哨站概率超过60%\n\n第三阶段，可以制导，通过较大推力实现稳定弹道方案，只要不摔坏就一定能打中\n\n---\n\n第一阶段：\n\n构想：主体沿用旧版传统飞镖，尾部新增安装一个`气球`，使用3d打印件控制气球大小的上限，主体部分嵌入飞镖内部，通过一个360°舵机控制其出风方向，通过陀螺仪传感器数值进行定点放气\n\n或者考虑使用舵机等电机进行动量和姿态的改变\n\nupd：为了保持镖身左右稳定，可以考虑使用两个舵机进行对称控制\n\n大致成本：\n\n镖身：耗材的价格\n\n陀螺仪MPU6050：7r\n\n舵机最普通的\\*2：5\\*2=10r\n\n摄像头ov7670：7r\n\n开发板c6t6：5r\n\n总成本：50-\n\n---\n\n第二阶段（南航制导镖）\n\n大致成本：\n\nSTM32F401CCU6 14.5r\n\nMPU6050 6.58r\n\n蓝剑高刷新率微型舵机 39r\n\nstm32H750视觉处理 40r\n\nov7725摄像头 25r\n\n\n\n第三阶段：\n\n在保证推重比小于1的前提下，飞行至最高点时开启制导模式，使用FPGA和大于0.5g的推力和pid等控制方式\n","tags":["RoboMaster"]},{"title":"install crypto in sage of wsl","url":"/2024/05/23/install-crypto-in-sage-of-wsl/","content":"\nWhen I input `sudo -pip install pycryptodome`\n\n<!--more-->\n\nIt output\n\n```\nroot@LAPTOP-LDQVJGQS:/mnt/c/Users/coper# python3 -m pip install --user pipx\nerror: externally-managed-environment\n\n× This environment is externally managed\n╰─> To install Python packages system-wide, try apt install\n    python3-xyz, where xyz is the package you are trying to\n    install.\n    \n    If you wish to install a non-Debian-packaged Python package,\n    create a virtual environment using python3 -m venv path/to/venv.\n    Then use path/to/venv/bin/python and path/to/venv/bin/pip. Make\n    sure you have python3-full installed.\n    \n    If you wish to install a non-Debian packaged Python application,\n    it may be easiest to use pipx install xyz, which will manage a\n    virtual environment for you. Make sure you have pipx installed.\n\n    See /usr/share/doc/python3.11/README.venv for more information.\n\nnote: If you believe this is a mistake, please contact your Python installation or OS distribution provider. You can override this, at the risk of breaking your Python installation or OS, by passing --break-system-packages.\nhint: See PEP 668 for the detailed specification.\nroot@LAPTOP-LDQVJGQS:/mnt/c/Users/coper#\n```\n\nJust translate it\n\n```\nroot@LAPTOP-LDQVJGQS:/mnt/c/Users/coper/Desktop# sage --pip install pycrypto\nerror: externally-managed-environment\n\n× 该环境由外部管理\n╰─> 要在全系统安装 Python 软件包，请尝试使用 apt install\n    python3-xyz，其中 xyz 是要安装的软件包。\n    安装。\n\n    如果您想安装非 Debian 打包的 Python 软件包、\n    使用 python3 -m venv path/to/venv 创建一个虚拟环境。\n    然后使用 path/to/venv/bin/python 和 path/to/venv/bin/pip。确保\n    确保安装了 python3-full。\n\n    如果您想安装非 Debian 打包的 Python 应用程序、\n    最简单的方法是使用 pipx install xyz，它会为您管理一个\n    虚拟环境。请确保已安装 pipx。\n\n    更多信息请参见 /usr/share/doc/python3.11/README.venv。\n\n注意：如果您认为这是一个错误，请联系您的 Python 安装或操作系统发行提供商。您可以通过 --break-system-packages 来覆盖此选项，但可能会破坏您的 Python 安装或操作系统。\n提示：详细规范请参见 PEP 668。\n```\n\nI choose ignore it and input ` sage --pip install pycryptodome --break-system-packages`\n\nIn this way, we succeed.\n\n```\nroot@LAPTOP-LDQVJGQS:/mnt/c/Users/coper/Desktop# sage --pip install pycryptodome --break-system-packages\nCollecting pycryptodome\n  Downloading pycryptodome-3.20.0-cp35-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)\n     ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━ 2.1/2.1 MB 93.7 kB/s eta 0:00:00\nInstalling collected packages: pycryptodome\nSuccessfully installed pycryptodome-3.20.0\nWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\nroot@LAPTOP-LDQVJGQS:/mnt/c/Users/coper/Desktop# \n```\n\n","tags":["cryptoCTF"]},{"title":"hexo usage","url":"/2024/05/23/hexo-usage/","content":"\n`hexo s`  #启动并预览\n\n`hexo c`  #清除缓存文件 db.json 和已生成的静态文件 public \n\n`hexo g`  #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写) \n\n`hexo d`  #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)\n\n","tags":["misc"]}]